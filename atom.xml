<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>我的梦想是星辰大海</title>
  
  <subtitle>知识源于积累,登峰造极源于自律</subtitle>
  <link href="http://xubatian.cn/atom.xml" rel="self"/>
  
  <link href="http://xubatian.cn/"/>
  <updated>2022-03-23T15:47:39.444Z</updated>
  <id>http://xubatian.cn/</id>
  
  <author>
    <name>xubatian</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>推荐一款很棒的浏览器插件iTab</title>
    <link href="http://xubatian.cn/%E6%8E%A8%E8%8D%90%E4%B8%80%E6%AC%BE%E5%BE%88%E6%A3%92%E7%9A%84%E6%B5%8F%E8%A7%88%E5%99%A8%E6%8F%92%E4%BB%B6iTab/"/>
    <id>http://xubatian.cn/%E6%8E%A8%E8%8D%90%E4%B8%80%E6%AC%BE%E5%BE%88%E6%A3%92%E7%9A%84%E6%B5%8F%E8%A7%88%E5%99%A8%E6%8F%92%E4%BB%B6iTab/</id>
    <published>2022-03-23T15:43:45.000Z</published>
    <updated>2022-03-23T15:47:39.444Z</updated>
    
    <content type="html"><![CDATA[<p>浏览器主页很丑,iTab将你的浏览器变成ipad版丝滑~</p><p>效果.</p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220323234516.png"></p><span id="more"></span><h1><span id="安装步骤">安装步骤</span></h1><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220323234653.png"></p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220323234706.png"></p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220323234722.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;浏览器主页很丑,iTab将你的浏览器变成ipad版丝滑~&lt;/p&gt;
&lt;p&gt;效果.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220323234516.png&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Tools" scheme="http://xubatian.cn/categories/Tools/"/>
    
    
    <category term="Tools" scheme="http://xubatian.cn/tags/Tools/"/>
    
  </entry>
  
  <entry>
    <title>展示浏览器文章目录插件-Smart TOC</title>
    <link href="http://xubatian.cn/%E5%B1%95%E7%A4%BA%E6%B5%8F%E8%A7%88%E5%99%A8%E6%96%87%E7%AB%A0%E7%9B%AE%E5%BD%95%E6%8F%92%E4%BB%B6-Smart-TOC/"/>
    <id>http://xubatian.cn/%E5%B1%95%E7%A4%BA%E6%B5%8F%E8%A7%88%E5%99%A8%E6%96%87%E7%AB%A0%E7%9B%AE%E5%BD%95%E6%8F%92%E4%BB%B6-Smart-TOC/</id>
    <published>2022-03-23T15:30:31.000Z</published>
    <updated>2022-03-23T15:42:46.369Z</updated>
    
    <content type="html"><![CDATA[<p>由于文章没有目录时常失效很难阅读,建议安装一款浏览器插件.方便展示文章目录. 插件名为: Smart TOC</p><span id="more"></span><h1><span id="火狐浏览器安装步骤">火狐浏览器安装步骤:</span></h1><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220323233414.png"></p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220323233450.png"></p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220323233627.png"></p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220323233755.png"></p><h1><span id="谷歌浏览器安装步骤">谷歌浏览器安装步骤:</span></h1><p>由于谷歌浏览器安装插件需要VPN, 我没有,所以略…</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;由于文章没有目录时常失效很难阅读,建议安装一款浏览器插件.方便展示文章目录. 插件名为: Smart TOC&lt;/p&gt;</summary>
    
    
    
    <category term="Tools" scheme="http://xubatian.cn/categories/Tools/"/>
    
    
    <category term="Tools" scheme="http://xubatian.cn/tags/Tools/"/>
    
  </entry>
  
  <entry>
    <title>数仓建模设计理论及概念</title>
    <link href="http://xubatian.cn/%E6%95%B0%E4%BB%93%E5%BB%BA%E6%A8%A1%E8%AE%BE%E8%AE%A1%E7%90%86%E8%AE%BA%E5%8F%8A%E6%A6%82%E5%BF%B5/"/>
    <id>http://xubatian.cn/%E6%95%B0%E4%BB%93%E5%BB%BA%E6%A8%A1%E8%AE%BE%E8%AE%A1%E7%90%86%E8%AE%BA%E5%8F%8A%E6%A6%82%E5%BF%B5/</id>
    <published>2022-03-23T14:28:36.000Z</published>
    <updated>2022-03-23T15:17:57.667Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="数据仓库概述">数据仓库概述</span></h1><h2><span id="数据仓库概念">数据仓库概念</span></h2><p>数据仓库是一个为数据分析而设计的企业级数据管理系统。数据仓库可集中、整合多个信息源的大量数据，借助数据仓库的分析能力，企业可从数据中获得宝贵的信息进而改进决策。同时，随着时间的推移，数据仓库中积累的大量历史数据对于数据科学家和业务分析师也是十分宝贵的。</p><span id="more"></span><h2><span id="数据仓库核心架构">数据仓库核心架构</span></h2><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220323222957.png"></p><h1><span id="数据仓库建模概述">数据仓库建模概述</span></h1><h2><span id="数据仓库建模的意义">数据仓库建模的意义</span></h2><p>如果把数据看作图书馆里的书，我们希望看到它们在书架上分门别类地放置；如果把数据看作城市的建筑，我们希望城市规划布局合理；如果把数据看作电脑文件和文件夹，我们希望按照自己的习惯有很好的文件夹组织方式，而不是糟糕混乱的桌面，经常为找一个文件而不知所措。</p><p>数据模型就是数据组织和存储方法，它强调从业务、数据存取和使用角度合理存储数据。只有将数据有序的组织和存储起来之后，数据才能得到高性能、低成本、高效率、高质量的使用。</p><p>高性能：良好的数据模型能够帮助我们快速查询所需要的数据。</p><p>低成本：良好的数据模型能减少重复计算，实现计算结果的复用，降低计算成本。</p><p>高效率：良好的数据模型能极大的改善用户使用数据的体验，提高使用数据的效率。</p><p>高质量：良好的数据模型能改善数据统计口径的混乱，减少计算错误的可能性。</p><h2><span id="数据仓库建模方法论">数据仓库建模方法论</span></h2><h3><span id="er模型">ER模型</span></h3><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220323223509.png"></p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220323223333.png"></p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220323223400.png"></p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220323223425.png"></p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220323223617.png"></p><p>下图为一个采用Bill Inmon倡导的建模方法构建的模型，从图中可以看出，较为松散、零碎，物理表数量多。</p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220323223646.png"></p><p>这种建模方法的出发点是整合数据，其目的是将整个企业的数据进行组合和合并，并进行规范处理，减少数据冗余性，保证数据的一致性。这种模型并不适合直接用于分析统计。</p><h3><span id="维度模型">维度模型</span></h3><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220323223724.png"></p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220323223734.png"></p><p>维度建模以数据分析作为出发点，为数据分析服务，因此它关注的重点的用户如何更快的完成需求分析以及如何实现较好的大规模复杂查询的响应性能。</p><h1><span id="维度建模理论之事实表">维度建模理论之事实表</span></h1><h2><span id="事实表概述">事实表概述</span></h2><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220323223831.png"></p><h3><span id="事实表特点">事实表特点</span></h3><p>事实表通常比较“细长”，即列较少，但行较多，且行的增速快。</p><h3><span id="事实表分类">事实表分类</span></h3><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220323223918.png"></p><h2><span id="事务型事实表">事务型事实表</span></h2><h3><span id="概述">概述</span></h3><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220323224002.png"></p><h3><span id="设计流程">设计流程</span></h3><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220323224029.png"></p><h3><span id="不足">不足</span></h3><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220323224057.png"></p><h2><span id="周期型快照事实表">周期型快照事实表</span></h2><h3><span id="概述">概述</span></h3><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220323224144.png"></p><h3><span id="设计流程">设计流程</span></h3><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220323224208.png"></p><h3><span id="事实类型">事实类型</span></h3><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220323224232.png"></p><h2><span id="累计型快照事实表">累计型快照事实表</span></h2><h3><span id="概述">概述</span></h3><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220323224318.png"></p><h3><span id="设计流程">设计流程</span></h3><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220323224346.png"></p><h1><span id="维度建模理论之维度表">维度建模理论之维度表</span></h1><h2><span id="维度表概述">维度表概述</span></h2><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220323224437.png"></p><h2><span id="维度表设计步骤">维度表设计步骤</span></h2><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220323224508.png"></p><h2><span id="维度设计要点">维度设计要点</span></h2><h3><span id="规范化与反规范化">规范化与反规范化</span></h3><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220323224607.png"></p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220323224614.png"></p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220323224633.png"></p><h3><span id="维度变化">维度变化</span></h3><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220323224807.png"></p><p>（1）什么是拉链表</p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220323224823.png"></p><p>（2）为什么要做拉链表</p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220323224848.png"></p><p>（3）如何使用拉链表</p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220323224913.png"></p><h3><span id="拉链表的形成过程">拉链表的形成过程</span></h3><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220323224943.png"></p><h3><span id="拉链表制作过程图">拉链表制作过程图</span></h3><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220323225009.png"></p><h3><span id="拉链表制作过程">拉链表制作过程</span></h3><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220323225032.png"></p><p><strong>步骤1：制作当日变动数据(包括新增,修改)每日执行</strong></p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220323225142.png"></p><p><strong>步骤2：先合并变动信息，再追加新增信息，插入到临时表中</strong><br>1）建立临时表</p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220323225340.png"></p><p>2）导入脚本</p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220323225356.png"></p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220323225638.png"></p><p>步骤3：把临时表覆盖给拉链表</p><p>1）导入数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hive (gmall)<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">insert</span> overwrite <span class="keyword">table</span> dwd_order_info_his </span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> dwd_order_info_his_tmp;</span><br></pre></td></tr></table></figure><p>2）查询导入数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hive (gmall)<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> dwd_order_info_his;</span><br></pre></td></tr></table></figure><p>整理为每日脚本</p><h3><span id="多值维度">多值维度</span></h3><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220323225753.png"></p><h3><span id="多值属性">多值属性</span></h3><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220323225837.png"></p><h1><span id="数据仓库设计">数据仓库设计</span></h1><h2><span id="数据仓库分层规划">数据仓库分层规划</span></h2><p>优秀可靠的数仓体系，需要良好的数据分层结构。合理的分层，能够使数据体系更加清晰，使复杂问题得以简化。以下是该项目的分层规划。</p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220323225951.png"></p><h2><span id="数据仓库构建流程">数据仓库构建流程</span></h2><p>以下是构建数据仓库的完整流程。</p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220323230023.png"></p><h3><span id="数据调研">数据调研</span></h3><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220323230047.png"></p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220323230102.png"></p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220323230129.png"></p><h3><span id="明确数据域">明确数据域</span></h3><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220323230212.png"></p><h3><span id="构建业务总线矩阵">构建业务总线矩阵</span></h3><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220323230243.png"></p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220323230256.png"></p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220323230317.png"></p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220323230354.png"></p><p>后续的DWD层以及DIM层的搭建需参考业务总线矩阵。</p><h3><span id="明确统计指标">明确统计指标</span></h3><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220323230440.png"></p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220323230513.png"></p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220323230525.png"></p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220323230537.png"></p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220323230601.png"></p><h3><span id="按照上述标准整理出的指标体系如下"><strong>按照上述标准整理出的指标体系如下：</strong></span></h3><h3><span id="思维导图版">思维导图版</span></h3><h3><span id="从上述指标体系中抽取出来的所有派生指标见如下表格"><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220323231027.png">从上述指标体系中抽取出来的所有派生指标见如下表格</span></h3><p>派生指标</p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220323231355.png"></p><h3><span id="维度模型设计">维度模型设计</span></h3><p>维度模型的设计参照上述得到的业务总线矩阵即可。事实表存储在DWD层，维度表存储在DIM层</p><h3><span id="汇总模型设计">汇总模型设计</span></h3><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220323231548.png"></p><h1><span id="总结">总结</span></h1><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220323231627.png"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;数据仓库概述&quot;&gt;&lt;a href=&quot;#数据仓库概述&quot; class=&quot;headerlink&quot; title=&quot;数据仓库概述&quot;&gt;&lt;/a&gt;数据仓库概述&lt;/h1&gt;&lt;h2 id=&quot;数据仓库概念&quot;&gt;&lt;a href=&quot;#数据仓库概念&quot; class=&quot;headerlink&quot; title=&quot;数据仓库概念&quot;&gt;&lt;/a&gt;数据仓库概念&lt;/h2&gt;&lt;p&gt;数据仓库是一个为数据分析而设计的企业级数据管理系统。数据仓库可集中、整合多个信息源的大量数据，借助数据仓库的分析能力，企业可从数据中获得宝贵的信息进而改进决策。同时，随着时间的推移，数据仓库中积累的大量历史数据对于数据科学家和业务分析师也是十分宝贵的。&lt;/p&gt;</summary>
    
    
    
    <category term="大数据" scheme="http://xubatian.cn/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
    <category term="数仓建模" scheme="http://xubatian.cn/tags/%E6%95%B0%E4%BB%93%E5%BB%BA%E6%A8%A1/"/>
    
  </entry>
  
  <entry>
    <title>pgSQL,Hologres,dataworks常用SQL函数</title>
    <link href="http://xubatian.cn/pgSQL-Hologres-dataworks%E5%B8%B8%E7%94%A8SQL%E5%87%BD%E6%95%B0/"/>
    <id>http://xubatian.cn/pgSQL-Hologres-dataworks%E5%B8%B8%E7%94%A8SQL%E5%87%BD%E6%95%B0/</id>
    <published>2022-03-16T07:16:17.000Z</published>
    <updated>2022-03-19T07:04:15.707Z</updated>
    
    <content type="html"><![CDATA[<p>使用阿里云数仓 ,涉及到pgsql,dataworks常用,Hologres常用sql记录</p><span id="more"></span><h2><span id="常用命令">常用命令</span></h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建内部表</span></span><br><span class="line"><span class="keyword">begin</span>;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> [if <span class="keyword">not</span> <span class="keyword">exists</span>] [schema_name.]table_name(</span><br><span class="line">id <span class="type">bigint</span> <span class="keyword">primary</span> key,</span><br><span class="line">    b text,</span><br><span class="line">    ds text,</span><br><span class="line">)</span><br><span class="line"><span class="keyword">partition</span> <span class="keyword">by</span> list(ds);</span><br><span class="line"><span class="keyword">commit</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建子表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> table_name_date_202101 <span class="keyword">partition</span> <span class="keyword">of</span> table_name <span class="keyword">for</span> <span class="keyword">values</span> <span class="keyword">in</span> (<span class="string">&#x27;202101&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建外部表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FOREIGN</span> <span class="keyword">TABLE</span> odps_students (</span><br><span class="line">id <span class="type">bigint</span>,</span><br><span class="line">    b text,</span><br><span class="line">    ds text,</span><br><span class="line">)</span><br><span class="line">SERVER odps_server</span><br><span class="line">OPTIONS (project_name <span class="string">&#x27;public_data&#x27;</span>, table_name <span class="string">&#x27;oracle2odps_cust&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除表</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> [ IF <span class="keyword">EXISTS</span> ] table_name [, ...];</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除外部表</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">FOREIGN</span> <span class="keyword">TABLE</span> [ IF <span class="keyword">EXISTS</span> ] name [, ...] [ CASCADE <span class="operator">|</span> RESTRICT ]</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改表名</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name RENAME <span class="keyword">to</span> new_table_name;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改外部表名</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">FOREIGN</span> <span class="keyword">TABLE</span> [ IF <span class="keyword">EXISTS</span> ] name RENAME <span class="keyword">TO</span> new_name;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 增加列</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> table_name <span class="keyword">ADD</span> <span class="keyword">COLUMN</span> new_column_name data_type; </span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> table_name <span class="keyword">ADD</span> <span class="keyword">COLUMN</span> col_add_1 data_type, <span class="keyword">ADD</span> <span class="keyword">COLUMN</span> col_add_2 TEXT IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> col_add_2 data_type;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 给表增加注释</span></span><br><span class="line">COMMENT <span class="keyword">ON</span> <span class="keyword">TABLE</span> table_name <span class="keyword">IS</span> <span class="string">&#x27;my comments on table table_name.&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 给列增加注释</span></span><br><span class="line">COMMENT <span class="keyword">ON</span> <span class="keyword">COLUMN</span> table_name.col1 <span class="keyword">IS</span> <span class="string">&#x27;This my first col1&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 给外部表增加注释</span></span><br><span class="line">COMMENT <span class="keyword">ON</span> <span class="keyword">FOREIGN</span> <span class="keyword">TABLE</span> foreign_table <span class="keyword">IS</span> <span class="string">&#x27; comments on my foreign table&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询执行计划</span></span><br><span class="line">explain querysql;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询表所在的组名</span></span><br><span class="line"><span class="keyword">select</span> property_value <span class="keyword">from</span> hologres.hg_table_properties <span class="keyword">where</span> table_name <span class="operator">=</span> <span class="string">&#x27;表名&#x27;</span> <span class="keyword">and</span> property_key <span class="operator">=</span> <span class="string">&#x27;table_group&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询对应表组的shard count</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> hologres.hg_table_group_properties <span class="keyword">where</span> tablegroup_name <span class="operator">=</span> <span class="string">&#x27;组名&#x27;</span> <span class="keyword">and</span> property_key <span class="operator">=</span> <span class="string">&#x27;shard_count&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 获取当前用户Account ID</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">current_user</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 获取当前用户的阿里云显示名称</span></span><br><span class="line"><span class="keyword">SELECT</span> user_display_name(<span class="built_in">current_user</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 获取所有用户的阿里云显示名称</span></span><br><span class="line"><span class="keyword">SELECT</span> user_display_name(rolname) <span class="keyword">FROM</span> pg_roles;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- UNION </span></span><br><span class="line">返回位于一个或者两个结果集中的全部行</span><br><span class="line"></span><br><span class="line"><span class="comment">-- INTERSECT</span></span><br><span class="line">返回同时位于两个结果集中的所有行</span><br><span class="line"></span><br><span class="line"><span class="comment">-- EXCEPT</span></span><br><span class="line">返回位于第一个结果集但不在第二个结果集中的行</span><br><span class="line"></span><br><span class="line">注：在所有三种情况下，重复行都会被消除（除非指定<span class="keyword">ALL</span>）。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2><span id="索引">索引</span></h2><h3><span id="存储类型设置">存储类型设置</span></h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">call</span> set_table_property(<span class="string">&#x27;table1&#x27;</span>,<span class="string">&#x27;orientation&#x27;</span>,<span class="string">&#x27;[row|colume]&#x27;</span>);</span><br><span class="line"></span><br><span class="line">行存适用于高QPS的基于<span class="keyword">primary</span> key的点查询，例如<span class="keyword">where</span> pk<span class="operator">=</span>abc,其余场景都应该选用列存方式。</span><br></pre></td></tr></table></figure><h3><span id="聚簇索引-clustering-key">聚簇索引 Clustering key</span></h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">call</span> set_table_property(<span class="string">&#x27;table1&#x27;</span>,<span class="string">&#x27;clustering_key&#x27;</span>,<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line"><span class="keyword">or</span> </span><br><span class="line"><span class="keyword">call</span> set_table_property(<span class="string">&#x27;tbl&#x27;</span>, <span class="string">&#x27;clustering_key&#x27;</span>, <span class="string">&#x27;a:desc,b:asc&#x27;</span>);</span><br><span class="line"></span><br><span class="line">对建立索引数据进行排序，建立聚簇索引能够加速用户在索引列上的<span class="keyword">range</span>和<span class="keyword">filter</span>查询</span><br><span class="line">例：<span class="keyword">select</span> <span class="built_in">sum</span>(a) <span class="keyword">from</span> table1 <span class="keyword">where</span> a <span class="operator">&gt;</span> <span class="number">100</span> <span class="keyword">and</span> a <span class="operator">&lt;</span> <span class="number">200</span>;</span><br><span class="line">注：<span class="keyword">desc</span>和<span class="keyword">asc</span>表名构建索引时的排序方式，默认为<span class="keyword">asc</span>。clustering key创建的时候数据类型不能为<span class="type">float</span><span class="operator">/</span><span class="keyword">double</span>，每个表最多只有一个clustering key</span><br></pre></td></tr></table></figure><h3><span id="分段键segment-key">分段键Segment Key</span></h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">call</span> set_table_property(<span class="string">&#x27;table1&#x27;</span>,<span class="string">&#x27;segment key&#x27;</span>,<span class="string">&#x27;ds&#x27;</span>);</span><br><span class="line"></span><br><span class="line">分段键帮助Hologres进行一些文件的快速筛选和跳过。指定分段键，当查询条件包含分段列时，查询可以通过segment key快速找到相应数据对应的存储位置。</span><br><span class="line">例：<span class="keyword">select</span> <span class="built_in">sum</span>(a) <span class="keyword">from</span> table1 <span class="keyword">where</span> ts <span class="operator">&gt;</span> <span class="string">&#x27;2020-01-01&#x27;</span> <span class="keyword">and</span> ts <span class="operator">&lt;</span> <span class="string">&#x27;2020-03-02&#x27;</span></span><br><span class="line">注：segment key要求按照数据输入自增，一般只有时间类型的字段（timestamptz）适合设置为segment key，其他场景基本不需要设置。只有列存表支持分段键设置。</span><br></pre></td></tr></table></figure><h3><span id="比特编码列bitmap-columns">比特编码列bitmap columns</span></h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">call</span> set_table_property(<span class="string">&#x27;table1&#x27;</span>,<span class="string">&#x27;bitmap key&#x27;</span>,<span class="string">&#x27;ds&#x27;</span>);</span><br><span class="line"></span><br><span class="line">指定比特编码列使Hologres会在这些列上构建比特编码，相当于把数据与对应的行号做一个映射</span><br><span class="line">例：<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> table1 <span class="keyword">where</span> a <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">注：bitmap可以对segment内部的数据进行快速过滤，因此建议把<span class="keyword">filter</span>条件的数据建成比特编码。目前Hologres会默认所有text列都会被隐藏式地设置到bitmap_columns中。但是只有列存表支持比特编码列</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3><span id="字典编码列设置">字典编码列设置</span></h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">call</span> set_table_property(<span class="string">&#x27;table1&#x27;</span>,<span class="string">&#x27;dictionary_encoding_columns&#x27;</span>,<span class="string">&#x27;b&#x27;</span>);</span><br><span class="line"></span><br><span class="line">字典编码可以将字符串的比较转换成数字的比较，加速<span class="keyword">group</span> <span class="keyword">by</span>查询</span><br><span class="line">例：<span class="keyword">select</span> <span class="built_in">sum</span>(a) <span class="keyword">from</span> table1 <span class="keyword">group</span> <span class="keyword">by</span> b;</span><br><span class="line">注：不建议将基数高的列建为字典编码列，会导致查询性能变差。目前Hologres会默认所有text列都会被隐藏式地设置到bitmap_columns中。但是只有列存表支持比特编码列</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3><span id="分部键distribution-key">分部键distribution key</span></h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">call</span> set_table_property(<span class="string">&#x27;table1&#x27;</span>,<span class="string">&#x27;distribution key&#x27;</span>,<span class="string">&#x27;b&#x27;</span>);</span><br><span class="line"></span><br><span class="line">指定分布列，数据将按照指定列，将数据shuffle到各个shard，同样的数值肯定会在同样的shrad中。</span><br><span class="line">例：<span class="keyword">select</span> <span class="built_in">count</span>(<span class="number">1</span>) <span class="keyword">from</span> tmp1 <span class="keyword">join</span> tmp2 <span class="keyword">on</span> tmp1.a <span class="operator">=</span> tmp2.b</span><br><span class="line">注：对于有pk的表，其分布键默认就是pk，如果不想pk字段作为分布键，可以指定pk字段的子集，但是不能随意指定。</span><br><span class="line">可以通过shard_count来指定表的shard数，如果不指定的话每个数据库都有一个默认的shard数，一旦指定了一个表的shard数，其他的表如果想要和这个表做<span class="keyword">local</span> <span class="keyword">join</span>，就必须指定colcate <span class="keyword">with</span>这个表。</span><br></pre></td></tr></table></figure><h3><span id="数据生命周期管理time_to_live_in_seconds">数据生命周期管理time_to_live_in_seconds</span></h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">call</span> set_table_property(<span class="string">&#x27;table1&#x27;</span>,<span class="string">&#x27;time_to_live_in_seconds&#x27;</span>,<span class="string">&#x27;96400&#x27;</span>);</span><br><span class="line"></span><br><span class="line">管理数据的声明周期，默认时间是秒，必须是非负数字类型。表数据的TTL并不是精确的时间，当超过设置的TTL后，系统会在某一个时间自动删除数据，因此业务逻辑不能强依赖TTL，以免带来不必要的损失时</span><br></pre></td></tr></table></figure><h2><span id="函数">函数</span></h2><h3><span id="获取今天日期-获取今天时刻-hologres">获取今天日期 获取今天时刻 (Hologres)</span></h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">    now()::<span class="type">timestamp</span>(<span class="number">0</span>)<span class="keyword">without</span> <span class="type">time</span> zone <span class="keyword">as</span> now_date, <span class="comment">--当前日期(精确到秒)</span></span><br><span class="line">    <span class="built_in">current_date</span> <span class="keyword">as</span> sta_data, <span class="comment">--当前日期(精确到日)</span></span><br><span class="line">    date_part(<span class="string">&#x27;hour&#x27;</span>, clock_timestamp()) sta_hour <span class="comment">--当前时刻</span></span><br><span class="line">    </span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">    TO_CHAR((now()::<span class="type">timestamp</span>(<span class="number">0</span>)<span class="keyword">without</span> <span class="type">time</span> zone),<span class="string">&#x27;yyyy-MM-dd&#x27;</span>) <span class="keyword">as</span> today_date, <span class="comment">--今天日期(精确到天)</span></span><br><span class="line">    TO_CHAR(((<span class="built_in">current_timestamp</span> <span class="operator">-</span><span class="type">interval</span> <span class="string">&#x27;1D&#x27;</span>)::<span class="type">timestamp</span>(<span class="number">0</span>)<span class="keyword">without</span> <span class="type">time</span> zone),<span class="string">&#x27;yyyy-MM-dd&#x27;</span>) <span class="keyword">as</span> yesterday_date, <span class="comment">--昨天日期(精确到天)</span></span><br><span class="line">    TO_CHAR(((<span class="built_in">current_timestamp</span> <span class="operator">-</span><span class="type">interval</span> <span class="string">&#x27;7D&#x27;</span>)::<span class="type">timestamp</span>(<span class="number">0</span>)<span class="keyword">without</span> <span class="type">time</span> zone),<span class="string">&#x27;yyyy-MM-dd&#x27;</span>) <span class="keyword">as</span> seven_days_ago_date, <span class="comment">--7天前日期(精确到天)</span></span><br><span class="line">    <span class="built_in">current_date</span> <span class="keyword">as</span> today_date, <span class="comment">--今天日期(精确到日)</span></span><br><span class="line">    date_part(<span class="string">&#x27;hour&#x27;</span>, clock_timestamp()) today_hour <span class="comment">--当前时刻(昨天的当前时刻)</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment">-- 所有字段都是TEXT类型    </span></span><br><span class="line"> <span class="keyword">select</span> </span><br><span class="line">    <span class="built_in">CAST</span>(TO_CHAR((now()::<span class="type">timestamp</span>(<span class="number">0</span>)<span class="keyword">without</span> <span class="type">time</span> zone),<span class="string">&#x27;yyyy-MM-dd&#x27;</span>) <span class="keyword">as</span> TEXT) <span class="keyword">as</span> today_date, <span class="comment">--今天日期(精确到天)</span></span><br><span class="line">    <span class="built_in">CAST</span>(TO_CHAR(((<span class="built_in">current_timestamp</span> <span class="operator">-</span><span class="type">interval</span> <span class="string">&#x27;1D&#x27;</span>)::<span class="type">timestamp</span>(<span class="number">0</span>)<span class="keyword">without</span> <span class="type">time</span> zone),<span class="string">&#x27;yyyy-MM-dd&#x27;</span>) <span class="keyword">as</span> TEXT)  <span class="keyword">as</span> yesterday_date, <span class="comment">--昨天日期(精确到天)</span></span><br><span class="line">    <span class="built_in">CAST</span>(TO_CHAR(((<span class="built_in">current_timestamp</span> <span class="operator">-</span><span class="type">interval</span> <span class="string">&#x27;7D&#x27;</span>)::<span class="type">timestamp</span>(<span class="number">0</span>)<span class="keyword">without</span> <span class="type">time</span> zone),<span class="string">&#x27;yyyy-MM-dd&#x27;</span>) <span class="keyword">as</span> TEXT)  <span class="keyword">as</span> seven_days_ago_date, <span class="comment">--7天前日期(精确到天)</span></span><br><span class="line">    <span class="built_in">CAST</span>(<span class="built_in">current_date</span> <span class="keyword">as</span> TEXT)  <span class="keyword">as</span> today_date, <span class="comment">--今天日期(精确到天)</span></span><br><span class="line">    <span class="built_in">CAST</span>(date_part(<span class="string">&#x27;hour&#x27;</span>, clock_timestamp()) <span class="keyword">as</span> TEXT)  today_hour <span class="comment">--当前时刻(昨天的当前时刻)</span></span><br><span class="line">    </span><br><span class="line">  </span><br><span class="line"><span class="comment">-- 干掉时间的间隔符号: &#x27;2020-01-01&#x27; 转变为 &#x27;20200101&#x27;  </span></span><br><span class="line"><span class="comment">-- 关联其他表报错:  </span></span><br><span class="line"><span class="comment">-- [20:14:38] [执行失败!  0 row  耗时:16.65ms]</span></span><br><span class="line"><span class="comment">-- [20:14:38] 错误原因:ERROR: Feature not supported: Single Row Volatile functions</span></span><br><span class="line"><span class="comment">-- 错误地方就是: CAST(date_part(&#x27;hour&#x27;, clock_timestamp()) as TEXT)  today_hour</span></span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">    now()::<span class="type">timestamp</span>(<span class="number">0</span>)<span class="keyword">without</span> <span class="type">time</span> zone <span class="keyword">as</span> now_date, <span class="comment">--当前日期(精确到秒)</span></span><br><span class="line">    REPLACE(<span class="built_in">CAST</span>(TO_CHAR((now()::<span class="type">timestamp</span>(<span class="number">0</span>)<span class="keyword">without</span> <span class="type">time</span> zone),<span class="string">&#x27;yyyy-MM-dd&#x27;</span>) <span class="keyword">as</span> TEXT),<span class="string">&#x27;-&#x27;</span>,<span class="string">&#x27;&#x27;</span>) <span class="keyword">as</span> today_date, <span class="comment">--今天日期(精确到天)</span></span><br><span class="line">    REPLACE(<span class="built_in">CAST</span>(TO_CHAR(((<span class="built_in">current_timestamp</span> <span class="operator">-</span><span class="type">interval</span> <span class="string">&#x27;1D&#x27;</span>)::<span class="type">timestamp</span>(<span class="number">0</span>)<span class="keyword">without</span> <span class="type">time</span> zone),<span class="string">&#x27;yyyy-MM-dd&#x27;</span>) <span class="keyword">as</span> TEXT),<span class="string">&#x27;-&#x27;</span>,<span class="string">&#x27;&#x27;</span>)  <span class="keyword">as</span> yesterday_date, <span class="comment">--昨天日期(精确到天)</span></span><br><span class="line">    REPLACE(<span class="built_in">CAST</span>(TO_CHAR(((<span class="built_in">current_timestamp</span> <span class="operator">-</span><span class="type">interval</span> <span class="string">&#x27;7D&#x27;</span>)::<span class="type">timestamp</span>(<span class="number">0</span>)<span class="keyword">without</span> <span class="type">time</span> zone),<span class="string">&#x27;yyyy-MM-dd&#x27;</span>) <span class="keyword">as</span> TEXT),<span class="string">&#x27;-&#x27;</span>,<span class="string">&#x27;&#x27;</span>)  <span class="keyword">as</span> seven_days_ago_date, <span class="comment">--7天前日期(精确到天)</span></span><br><span class="line">    <span class="built_in">CAST</span>(<span class="built_in">current_date</span> <span class="keyword">as</span> TEXT)  <span class="keyword">as</span> today_date, <span class="comment">--今天日期(精确到天)</span></span><br><span class="line">    <span class="built_in">CAST</span>(date_part(<span class="string">&#x27;hour&#x27;</span>, clock_timestamp()) <span class="keyword">as</span> TEXT)  today_hour <span class="comment">--当前时刻(昨天的当前时刻)</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"> <span class="comment">-- TODO 获取时间维度表: 今天此时刻 昨天此时刻 7天前此时刻 当前小时 ,时间类型: TEXT</span></span><br><span class="line">    <span class="keyword">select</span></span><br><span class="line">    now()::<span class="type">timestamp</span>(<span class="number">0</span>)<span class="keyword">without</span> <span class="type">time</span> zone <span class="keyword">as</span> now_date, <span class="comment">--当前日期(精确到秒)</span></span><br><span class="line">    REPLACE(<span class="built_in">CAST</span>(TO_CHAR((now()::<span class="type">timestamp</span>(<span class="number">0</span>)<span class="keyword">without</span> <span class="type">time</span> zone),<span class="string">&#x27;yyyy-MM-dd&#x27;</span>) <span class="keyword">as</span> TEXT),<span class="string">&#x27;-&#x27;</span>,<span class="string">&#x27;&#x27;</span>) <span class="keyword">as</span> today_date, <span class="comment">--今天日期(精确到天)</span></span><br><span class="line">    REPLACE(<span class="built_in">CAST</span>(TO_CHAR(((<span class="built_in">current_timestamp</span> <span class="operator">-</span><span class="type">interval</span> <span class="string">&#x27;1D&#x27;</span>)::<span class="type">timestamp</span>(<span class="number">0</span>)<span class="keyword">without</span> <span class="type">time</span> zone),<span class="string">&#x27;yyyy-MM-dd&#x27;</span>) <span class="keyword">as</span> TEXT),<span class="string">&#x27;-&#x27;</span>,<span class="string">&#x27;&#x27;</span>)  <span class="keyword">as</span> yesterday_date, <span class="comment">--昨天日期(精确到天)</span></span><br><span class="line">    REPLACE(<span class="built_in">CAST</span>(TO_CHAR(((<span class="built_in">current_timestamp</span> <span class="operator">-</span><span class="type">interval</span> <span class="string">&#x27;7D&#x27;</span>)::<span class="type">timestamp</span>(<span class="number">0</span>)<span class="keyword">without</span> <span class="type">time</span> zone),<span class="string">&#x27;yyyy-MM-dd&#x27;</span>) <span class="keyword">as</span> TEXT),<span class="string">&#x27;-&#x27;</span>,<span class="string">&#x27;&#x27;</span>)  <span class="keyword">as</span> seven_days_ago_date, <span class="comment">--7天前日期(精确到天)</span></span><br><span class="line">    SUBSTR(transaction_timestamp()::TEXT ,<span class="number">12</span>,<span class="number">2</span>) <span class="keyword">as</span> today_hour <span class="comment">--当前时刻(昨天的当前时刻)</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment">--TODO 获取时间维度表(主表): 今天此时刻 昨天此时刻 7天前此时刻 当前小时 ,时间类型: TEXT</span></span><br><span class="line">    <span class="keyword">select</span></span><br><span class="line">    <span class="comment">-- now()::timestamp(0)without time zone as now_date, --当前日期(精确到秒)</span></span><br><span class="line">    REPLACE(<span class="built_in">CAST</span>(TO_CHAR((now()::<span class="type">timestamp</span>(<span class="number">0</span>)<span class="keyword">without</span> <span class="type">time</span> zone),<span class="string">&#x27;yyyy-MM-dd&#x27;</span>) <span class="keyword">as</span> TEXT),<span class="string">&#x27;-&#x27;</span>,<span class="string">&#x27;&#x27;</span>) <span class="keyword">as</span> today_yesterday_sevenDaysAgo_date, <span class="comment">--今天日期(精确到天)</span></span><br><span class="line">    SUBSTR(transaction_timestamp()::TEXT ,<span class="number">12</span>,<span class="number">2</span>) <span class="keyword">as</span> today_hour <span class="comment">--当前时刻(当前时刻)</span></span><br><span class="line">    <span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line">    <span class="keyword">select</span></span><br><span class="line">    <span class="comment">-- now()::timestamp(0)without time zone as now_date, --当前日期(精确到秒)</span></span><br><span class="line">    REPLACE(<span class="built_in">CAST</span>(TO_CHAR(((<span class="built_in">current_timestamp</span> <span class="operator">-</span><span class="type">interval</span> <span class="string">&#x27;1D&#x27;</span>)::<span class="type">timestamp</span>(<span class="number">0</span>)<span class="keyword">without</span> <span class="type">time</span> zone),<span class="string">&#x27;yyyy-MM-dd&#x27;</span>) <span class="keyword">as</span> TEXT),<span class="string">&#x27;-&#x27;</span>,<span class="string">&#x27;&#x27;</span>), <span class="comment">--昨天日期(精确到天)</span></span><br><span class="line">    SUBSTR(transaction_timestamp()::TEXT ,<span class="number">12</span>,<span class="number">2</span>) <span class="comment">--当前时刻(当前时刻)</span></span><br><span class="line">    <span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line">    <span class="keyword">select</span></span><br><span class="line">    <span class="comment">-- now()::timestamp(0)without time zone as now_date, --当前日期(精确到秒)</span></span><br><span class="line">    REPLACE(<span class="built_in">CAST</span>(TO_CHAR(((<span class="built_in">current_timestamp</span> <span class="operator">-</span><span class="type">interval</span> <span class="string">&#x27;7D&#x27;</span>)::<span class="type">timestamp</span>(<span class="number">0</span>)<span class="keyword">without</span> <span class="type">time</span> zone),<span class="string">&#x27;yyyy-MM-dd&#x27;</span>) <span class="keyword">as</span> TEXT),<span class="string">&#x27;-&#x27;</span>,<span class="string">&#x27;&#x27;</span>), <span class="comment">--7天前日期(精确到天)</span></span><br><span class="line">    SUBSTR(transaction_timestamp()::TEXT ,<span class="number">12</span>,<span class="number">2</span>) <span class="comment">--当前时刻(当前时刻)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- TODO 获取时间维度表(主表): 今天此时刻 昨天此时刻 7天前此时刻 当前小时 ,时间类型: TEXT</span></span><br><span class="line">    <span class="keyword">select</span></span><br><span class="line">    now()::<span class="type">timestamp</span>(<span class="number">0</span>)<span class="keyword">without</span> <span class="type">time</span> zone <span class="keyword">as</span> now_date, <span class="comment">--当前日期(精确到秒)</span></span><br><span class="line">    REPLACE(<span class="built_in">CAST</span>(TO_CHAR((now()::<span class="type">timestamp</span>(<span class="number">0</span>)<span class="keyword">without</span> <span class="type">time</span> zone),<span class="string">&#x27;yyyy-MM-dd&#x27;</span>) <span class="keyword">as</span> TEXT),<span class="string">&#x27;-&#x27;</span>,<span class="string">&#x27;&#x27;</span>) <span class="keyword">as</span> today_date, <span class="comment">--今天日期(精确到天)</span></span><br><span class="line">    <span class="string">&#x27;NULL&#x27;</span> <span class="keyword">as</span> yesterday_date, <span class="comment">--昨天日期(精确到天)</span></span><br><span class="line">    <span class="string">&#x27;NULL&#x27;</span> <span class="keyword">as</span> seven_days_ago_date, <span class="comment">--7天前日期(精确到天)</span></span><br><span class="line">    SUBSTR(transaction_timestamp()::TEXT ,<span class="number">12</span>,<span class="number">2</span>) <span class="keyword">as</span> today_hour <span class="comment">--当前时刻(当前时刻)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">select</span></span><br><span class="line">    now()::<span class="type">timestamp</span>(<span class="number">0</span>)<span class="keyword">without</span> <span class="type">time</span> zone <span class="keyword">as</span> now_date, <span class="comment">--当前日期(精确到秒)</span></span><br><span class="line">    <span class="string">&#x27;NULL&#x27;</span> <span class="keyword">as</span> today_date, <span class="comment">--今天日期(精确到天)</span></span><br><span class="line">    REPLACE(<span class="built_in">CAST</span>(TO_CHAR(((<span class="built_in">current_timestamp</span> <span class="operator">-</span><span class="type">interval</span> <span class="string">&#x27;1D&#x27;</span>)::<span class="type">timestamp</span>(<span class="number">0</span>)<span class="keyword">without</span> <span class="type">time</span> zone),<span class="string">&#x27;yyyy-MM-dd&#x27;</span>) <span class="keyword">as</span> TEXT),<span class="string">&#x27;-&#x27;</span>,<span class="string">&#x27;&#x27;</span>)  <span class="keyword">as</span> yesterday_date, <span class="comment">--昨天日期(精确到天)</span></span><br><span class="line">    <span class="string">&#x27;NULL&#x27;</span> <span class="keyword">as</span> seven_days_ago_date, <span class="comment">--7天前日期(精确到天)</span></span><br><span class="line">    SUBSTR(transaction_timestamp()::TEXT ,<span class="number">12</span>,<span class="number">2</span>) <span class="keyword">as</span> today_hour <span class="comment">--当前时刻(当前时刻)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">select</span></span><br><span class="line">    now()::<span class="type">timestamp</span>(<span class="number">0</span>)<span class="keyword">without</span> <span class="type">time</span> zone <span class="keyword">as</span> now_date, <span class="comment">--当前日期(精确到秒)</span></span><br><span class="line">    <span class="string">&#x27;NULL&#x27;</span> <span class="keyword">as</span> today_date, <span class="comment">--今天日期(精确到天)</span></span><br><span class="line">    <span class="string">&#x27;NULL&#x27;</span> <span class="keyword">as</span> yesterday_date, <span class="comment">--昨天日期(精确到天)</span></span><br><span class="line">    REPLACE(<span class="built_in">CAST</span>(TO_CHAR(((<span class="built_in">current_timestamp</span> <span class="operator">-</span><span class="type">interval</span> <span class="string">&#x27;7D&#x27;</span>)::<span class="type">timestamp</span>(<span class="number">0</span>)<span class="keyword">without</span> <span class="type">time</span> zone),<span class="string">&#x27;yyyy-MM-dd&#x27;</span>) <span class="keyword">as</span> TEXT),<span class="string">&#x27;-&#x27;</span>,<span class="string">&#x27;&#x27;</span>)  <span class="keyword">as</span> seven_days_ago_date, <span class="comment">--7天前日期(精确到天)</span></span><br><span class="line">    SUBSTR(transaction_timestamp()::TEXT ,<span class="number">12</span>,<span class="number">2</span>) <span class="keyword">as</span> today_hour <span class="comment">--当前时刻(当前时刻)</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="comment">--TODO 获取时间维度表(主表): 今天此时刻 昨天此时刻 7天前此时刻 当前小时 ,时间类型: TEXT</span></span><br><span class="line">        <span class="keyword">select</span></span><br><span class="line">        t.now_date, <span class="comment">--当前日期(精确到秒)</span></span><br><span class="line">        t.today_date, <span class="comment">--今天日期(精确到天)</span></span><br><span class="line">        t.yesterday_date, <span class="comment">--昨天日期(精确到天)</span></span><br><span class="line">        t.seven_days_ago_date, <span class="comment">--7天前日期(精确到天)</span></span><br><span class="line">        t.today_hour, <span class="comment">--截止到此时今天的各个小时</span></span><br><span class="line">        t.twenty_four_hh <span class="comment">--24小时</span></span><br><span class="line">        <span class="keyword">from</span></span><br><span class="line">        (</span><br><span class="line">            <span class="keyword">select</span></span><br><span class="line">             t1.now_date, <span class="comment">--当前日期(精确到秒)</span></span><br><span class="line">             t1.today_date, <span class="comment">--今天日期(精确到天)</span></span><br><span class="line">             t1.yesterday_date, <span class="comment">--昨天日期(精确到天)</span></span><br><span class="line">             t1.seven_days_ago_date, <span class="comment">--7天前日期(精确到天)</span></span><br><span class="line">             t1.today_hour, <span class="comment">--截止到此时今天的各个小时</span></span><br><span class="line">             t1.twenty_four_hh <span class="comment">--24小时</span></span><br><span class="line">            <span class="keyword">from</span></span><br><span class="line">            (</span><br><span class="line">                <span class="keyword">select</span></span><br><span class="line">                p.now_date, <span class="comment">--当前日期(精确到秒)</span></span><br><span class="line">                p.today_date, <span class="comment">--今天日期(精确到天)</span></span><br><span class="line">                p.yesterday_date, <span class="comment">--昨天日期(精确到天)</span></span><br><span class="line">                p.seven_days_ago_date, <span class="comment">--7天前日期(精确到天)</span></span><br><span class="line">                <span class="keyword">CASE</span> <span class="keyword">WHEN</span> p.today_hour<span class="operator">&gt;=</span>p.hh_id <span class="keyword">THEN</span> p.hh_id</span><br><span class="line">                     <span class="keyword">ELSE</span> <span class="string">&#x27;时候未到&#x27;</span></span><br><span class="line">                <span class="keyword">END</span> <span class="keyword">AS</span>  today_hour,</span><br><span class="line">                p.hh_id twenty_four_hh</span><br><span class="line">                <span class="keyword">from</span></span><br><span class="line">                    (</span><br><span class="line">                        <span class="comment">--当前日期到目前小时</span></span><br><span class="line">                        <span class="keyword">SELECT</span></span><br><span class="line">                            now()::<span class="type">timestamp</span>(<span class="number">0</span>)<span class="keyword">without</span> <span class="type">time</span> zone <span class="keyword">as</span> now_date, <span class="comment">--当前日期(精确到秒)</span></span><br><span class="line">                            REPLACE(<span class="built_in">CAST</span>(TO_CHAR((now()::<span class="type">timestamp</span>(<span class="number">0</span>)<span class="keyword">without</span> <span class="type">time</span> zone),<span class="string">&#x27;yyyy-MM-dd&#x27;</span>) <span class="keyword">as</span> TEXT),<span class="string">&#x27;-&#x27;</span>,<span class="string">&#x27;&#x27;</span>) <span class="keyword">as</span> today_date, <span class="comment">--今天日期(精确到天)</span></span><br><span class="line">                            <span class="string">&#x27;昨天日期&#x27;</span> <span class="keyword">as</span> yesterday_date, <span class="comment">--昨天日期(精确到天)</span></span><br><span class="line">                            <span class="string">&#x27;7天前日期&#x27;</span> <span class="keyword">as</span> seven_days_ago_date, <span class="comment">--7天前日期(精确到天)</span></span><br><span class="line">                            SUBSTR(transaction_timestamp()::TEXT ,<span class="number">12</span>,<span class="number">2</span>) today_hour, <span class="comment">--截止到当前小时</span></span><br><span class="line">                            hh_id   <span class="comment">-- 一天的24小时</span></span><br><span class="line">                        <span class="keyword">FROM</span></span><br><span class="line">                            dim_hh</span><br><span class="line">                        <span class="keyword">order</span> <span class="keyword">by</span></span><br><span class="line">                             hh_id</span><br><span class="line">                    )p</span><br><span class="line">                <span class="keyword">order</span> <span class="keyword">by</span></span><br><span class="line">                p.hh_id</span><br><span class="line">            )t1</span><br><span class="line"></span><br><span class="line">            <span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">select</span></span><br><span class="line">             t2.now_date, <span class="comment">--当前日期(精确到秒)</span></span><br><span class="line">             t2.today_date, <span class="comment">--今天日期(精确到天)</span></span><br><span class="line">             t2.yesterday_date, <span class="comment">--昨天日期(精确到天)</span></span><br><span class="line">             t2.seven_days_ago_date, <span class="comment">--7天前日期(精确到天)</span></span><br><span class="line">             t2.today_hour, <span class="comment">--截止到此时今天的各个小时</span></span><br><span class="line">             t2.twenty_four_hh <span class="comment">--24小时</span></span><br><span class="line">            <span class="keyword">from</span></span><br><span class="line">            (</span><br><span class="line">                <span class="keyword">select</span></span><br><span class="line">                p.now_date, <span class="comment">--当前日期(精确到秒)</span></span><br><span class="line">                p.today_date, <span class="comment">--今天日期(精确到天)</span></span><br><span class="line">                p.yesterday_date, <span class="comment">--昨天日期(精确到天)</span></span><br><span class="line">                p.seven_days_ago_date, <span class="comment">--7天前日期(精确到天)</span></span><br><span class="line">                <span class="keyword">CASE</span> <span class="keyword">WHEN</span> p.today_hour<span class="operator">&gt;=</span>p.hh_id <span class="keyword">THEN</span> p.hh_id</span><br><span class="line">                     <span class="keyword">ELSE</span> <span class="string">&#x27;时候未到&#x27;</span></span><br><span class="line">                <span class="keyword">END</span> <span class="keyword">AS</span>  today_hour,</span><br><span class="line">                p.hh_id twenty_four_hh</span><br><span class="line">                <span class="keyword">from</span></span><br><span class="line">                    (</span><br><span class="line">                        <span class="comment">--当前日期到目前小时</span></span><br><span class="line">                        <span class="keyword">SELECT</span></span><br><span class="line">                            now()::<span class="type">timestamp</span>(<span class="number">0</span>)<span class="keyword">without</span> <span class="type">time</span> zone <span class="keyword">as</span> now_date, <span class="comment">--当前日期(精确到秒)</span></span><br><span class="line">                            <span class="string">&#x27;今天日期&#x27;</span> <span class="keyword">as</span> today_date, <span class="comment">--今天日期(精确到天)</span></span><br><span class="line">                            REPLACE(<span class="built_in">CAST</span>(TO_CHAR(((<span class="built_in">current_timestamp</span> <span class="operator">-</span><span class="type">interval</span> <span class="string">&#x27;1D&#x27;</span>)::<span class="type">timestamp</span>(<span class="number">0</span>)<span class="keyword">without</span> <span class="type">time</span> zone),<span class="string">&#x27;yyyy-MM-dd&#x27;</span>) <span class="keyword">as</span> TEXT),<span class="string">&#x27;-&#x27;</span>,<span class="string">&#x27;&#x27;</span>) <span class="keyword">as</span> yesterday_date, <span class="comment">--昨天日期(精确到天)</span></span><br><span class="line">                            <span class="string">&#x27;7天前日期&#x27;</span> <span class="keyword">as</span> seven_days_ago_date, <span class="comment">--7天前日期(精确到天)</span></span><br><span class="line">                            SUBSTR(transaction_timestamp()::TEXT ,<span class="number">12</span>,<span class="number">2</span>) today_hour, <span class="comment">--截止到当前小时</span></span><br><span class="line">                            hh_id   <span class="comment">-- 一天的24小时</span></span><br><span class="line">                        <span class="keyword">FROM</span></span><br><span class="line">                            dim_hh</span><br><span class="line">                        <span class="keyword">order</span> <span class="keyword">by</span></span><br><span class="line">                             hh_id</span><br><span class="line">                    )p</span><br><span class="line">                <span class="keyword">order</span> <span class="keyword">by</span></span><br><span class="line">                p.hh_id</span><br><span class="line">            )t2</span><br><span class="line"></span><br><span class="line">            <span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">select</span></span><br><span class="line">             t3.now_date, <span class="comment">--当前日期(精确到秒)</span></span><br><span class="line">             t3.today_date, <span class="comment">--今天日期(精确到天)</span></span><br><span class="line">             t3.yesterday_date, <span class="comment">--昨天日期(精确到天)</span></span><br><span class="line">             t3.seven_days_ago_date, <span class="comment">--7天前日期(精确到天)</span></span><br><span class="line">             t3.today_hour, <span class="comment">--截止到此时今天的各个小时</span></span><br><span class="line">             t3.twenty_four_hh <span class="comment">--24小时</span></span><br><span class="line">            <span class="keyword">from</span></span><br><span class="line">            (</span><br><span class="line">                <span class="keyword">select</span></span><br><span class="line">                p.now_date, <span class="comment">--当前日期(精确到秒)</span></span><br><span class="line">                p.today_date, <span class="comment">--今天日期(精确到天)</span></span><br><span class="line">                p.yesterday_date, <span class="comment">--昨天日期(精确到天)</span></span><br><span class="line">                p.seven_days_ago_date, <span class="comment">--7天前日期(精确到天)</span></span><br><span class="line">                <span class="keyword">CASE</span> <span class="keyword">WHEN</span> p.today_hour<span class="operator">&gt;=</span>p.hh_id <span class="keyword">THEN</span> p.hh_id</span><br><span class="line">                     <span class="keyword">ELSE</span> <span class="string">&#x27;时候未到&#x27;</span></span><br><span class="line">                <span class="keyword">END</span> <span class="keyword">AS</span>  today_hour, <span class="comment">--截止到此时今天的各个小时</span></span><br><span class="line">                p.hh_id twenty_four_hh <span class="comment">--24小时</span></span><br><span class="line">                <span class="keyword">from</span></span><br><span class="line">                    (</span><br><span class="line">                        <span class="comment">--当前日期到目前小时</span></span><br><span class="line">                        <span class="keyword">SELECT</span></span><br><span class="line">                            now()::<span class="type">timestamp</span>(<span class="number">0</span>)<span class="keyword">without</span> <span class="type">time</span> zone <span class="keyword">as</span> now_date, <span class="comment">--当前日期(精确到秒)</span></span><br><span class="line">                            <span class="string">&#x27;今天日期&#x27;</span> <span class="keyword">as</span> today_date, <span class="comment">--今天日期(精确到天)</span></span><br><span class="line">                            <span class="string">&#x27;昨天日期&#x27;</span> <span class="keyword">as</span> yesterday_date, <span class="comment">--昨天日期(精确到天)</span></span><br><span class="line">                            REPLACE(<span class="built_in">CAST</span>(TO_CHAR(((<span class="built_in">current_timestamp</span> <span class="operator">-</span><span class="type">interval</span> <span class="string">&#x27;7D&#x27;</span>)::<span class="type">timestamp</span>(<span class="number">0</span>)<span class="keyword">without</span> <span class="type">time</span> zone),<span class="string">&#x27;yyyy-MM-dd&#x27;</span>) <span class="keyword">as</span> TEXT),<span class="string">&#x27;-&#x27;</span>,<span class="string">&#x27;&#x27;</span>) <span class="keyword">as</span> seven_days_ago_date, <span class="comment">--7天前日期(精确到天)</span></span><br><span class="line">                            SUBSTR(transaction_timestamp()::TEXT ,<span class="number">12</span>,<span class="number">2</span>) today_hour, <span class="comment">--截止到当前小时</span></span><br><span class="line">                            hh_id   <span class="comment">-- 一天的24小时</span></span><br><span class="line">                        <span class="keyword">FROM</span></span><br><span class="line">                            dim_hh</span><br><span class="line">                        <span class="keyword">order</span> <span class="keyword">by</span></span><br><span class="line">                             hh_id</span><br><span class="line">                    )p</span><br><span class="line">                <span class="keyword">order</span> <span class="keyword">by</span></span><br><span class="line">                p.hh_id</span><br><span class="line">            )t3</span><br><span class="line">        )t</span><br><span class="line">        <span class="keyword">order</span> <span class="keyword">by</span></span><br><span class="line">            t.today_date, <span class="comment">--今天日期(精确到天)</span></span><br><span class="line">            t.yesterday_date, <span class="comment">--昨天日期(精确到天)</span></span><br><span class="line">            t.seven_days_ago_date, <span class="comment">--7天前日期(精确到天)</span></span><br><span class="line">            t.today_hour, <span class="comment">--截止到此时今天的各个小时</span></span><br><span class="line">            t.twenty_four_hh <span class="comment">--24小时</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3><span id="获取日期dataworks">获取日期(dataworks)</span></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">--TODO 获取时间维度表(主表): 业务日期(yyyy-mm）月份(mm) ,时间类型: TEXT</span><br><span class="line">   SELECT</span><br><span class="line">   to_char(GETDATE(),&#x27;yyyymmdd&#x27;)  AS today_date,  --当前日期(某年某月某日)</span><br><span class="line">   to_char(GETDATE(),&#x27;yyyymm&#x27;)  AS year_month_date, --当前日期(某年某月)</span><br><span class="line">   to_char(GETDATE(),&#x27;mm&#x27;) as month_date --当前月份(某月)</span><br></pre></td></tr></table></figure><h3><span id="字段强转为某个类型">字段强转为某个类型</span></h3><p>CAST函数用于将某种数据类型的表达式显式转换为另一种数据类型。CAST()函数的参数是一个表达式，它包括用AS关键字分隔的源值和目标数据类型。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">CAST</span> (expression <span class="keyword">AS</span> data_type)</span><br></pre></td></tr></table></figure><p>expression：任何有效的SQServer表达式。<br>AS：用于分隔两个参数，在AS之前的是要处理的数据，在AS之后是要转换的数据类型。<br>data_type：目标系统所提供的数据类型，包括bigint和sql_variant，不能使用用户定义的数据类型。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">可以转换的类型是有限制的。这个类型可以是以下值其中的一个：</span><br><span class="line"></span><br><span class="line">    二进制，同带<span class="type">binary</span>前缀的效果 : <span class="type">BINARY</span>    </span><br><span class="line">    字符型，可带参数 : <span class="type">CHAR</span>()     </span><br><span class="line">    日期 : <span class="type">DATE</span>     </span><br><span class="line">    时间: <span class="type">TIME</span>     </span><br><span class="line">    日期时间型 : DATETIME     </span><br><span class="line">    浮点数 : <span class="type">DECIMAL</span>      </span><br><span class="line">    整数 : SIGNED     </span><br><span class="line">    无符号整数 : UNSIGNED </span><br></pre></td></tr></table></figure><h3><span id="当前时间减去一天">当前时间减去一天</span></h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SUBSTR(TO_CHAR(<span class="built_in">CURRENT_DATE</span> <span class="operator">-</span> <span class="string">&#x27;1 day&#x27;</span>::<span class="type">INTERVAL</span>, <span class="string">&#x27;yyyymmdd&#x27;</span>::TEXT), <span class="number">1</span>, <span class="number">8</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;使用阿里云数仓 ,涉及到pgsql,dataworks常用,Hologres常用sql记录&lt;/p&gt;</summary>
    
    
    
    <category term="大数据" scheme="http://xubatian.cn/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
    <category term="hive" scheme="http://xubatian.cn/tags/hive/"/>
    
    <category term="pgsql" scheme="http://xubatian.cn/tags/pgsql/"/>
    
    <category term="Hologres" scheme="http://xubatian.cn/tags/Hologres/"/>
    
  </entry>
  
  <entry>
    <title>Spark原理与实现: SparkStreaming 概述</title>
    <link href="http://xubatian.cn/Spark%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E7%8E%B0-SparkStreaming-%E6%A6%82%E8%BF%B0/"/>
    <id>http://xubatian.cn/Spark%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E7%8E%B0-SparkStreaming-%E6%A6%82%E8%BF%B0/</id>
    <published>2022-03-10T06:25:01.000Z</published>
    <updated>2022-03-10T06:55:21.936Z</updated>
    
    <content type="html"><![CDATA[<p>SparkStreaming     其实就是微批次处理架构<br>Spark Streaming他是spark当中处理流式数据的一个模块,Spark SQL是spark当中用来处理结构化数据的一个模块,假如说kafka过来的数据,不是在HDFS或者Hive那张表里面,那这时候你过来一点数据我就计算一点数据,这就叫流式处理,流式化处理我们有Storm(<a href="https://storm.apache.org/">https://storm.apache.org/</a>) 但是他已经过时了,Flink太先进.<br>RDD有创建,转换,输出;<br>Spark SQL当中有DataFrame ,DataSet的创建,转换;<br>Spark SQL的转换简单,就是我们写的SQL,因为因为他还是SQL风格;</p><span id="more"></span><p>Spark Streaming有一个自己的抽象叫Dstream,Dstream其实也是一个分布式的数据集,但是这个数据集比较特殊,他不是定死的,它随着时间的推移,它里面的数据越来越多,越来越多,以为流式数据不断地往里面放东西,因为是流式数据,经常在生产环境中遇到升级的问题,代码升级,这就需要我们主动的关闭这个流式程序,因为正常情况下来说,流式程序我们是不关闭的,7*24小时运行的,但是要升级代码了,我们还是要关闭的,所以这里面就涉及到优雅的关闭,因为流式处理当中,我们不能暴力把JVM直接把他退出了,那流式数据传到这里面来,还没有经过计算的这部分是不是就丢掉了呢?因为流式数据是有一个人来负责接收,接收完成后就计算,肯定是这个过程,假说我要对接kafka中的数据,我在spark这边肯定有kafka消费者,没有kafka消费者,他怎么能拿到kafka里面的数据呢?那我消费者数据,消费完了之后才做计算呀,先消费在计算嘛,假如说我消费完了还没计算,这个时候我们能把JVM退出吗?不能,那我数据不是丢了吗?所以这里就涉及到了优雅的关闭我先停这边消费,我把已经消费完的数据给他计算了,在去退出程序,这就他优雅的关闭;为什么叫优化的关闭呢?是因为他在源码当中给你传的那个属性,叫优雅的,而人家那个属性默认是false,关闭的,我们把优雅的这个属性改为true,所以我们也就取名叫做优雅的关闭了    </p><h2><span id="spark-streaming概述">Spark Streaming概述</span></h2><h3><span id="spark-streaming是什么">Spark Streaming是什么</span></h3><p>​    Spark Streaming是微批次处理架构,用的是批次处理来模仿实时,他不是真正意义上的计算框架,如果说在生产环境当中要求比较高,这时候往往不会用到SparkStreaming 而是用Flink 或者说storm这两个框架是真正意义上的实时处理框架,他是来一条数据处理一次,来一条数据处理一次,他的整个的延迟会低很多,比SparkStreaming延迟低很多</p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220310143251.png"></p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220310143341.png"></p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220310143409.png"></p><p>​        Spark Streaming处理流式数据集,这个流式数据集并不是真正意义上连续的,所以叫做离散化流,Spark Streaming用的是微批次处理来代替流式处理的,就是Spark Streaming不是真正意义上的流式处理的一个框架,微批次指的是什么意思呢?我们所知道Spark离线计算的一个批次处理是用的Spark Core,也就是RDD的一个操作. </p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220310143657.png"></p><h3><span id="spark-streaming特点">Spark Streaming特点</span></h3><p>1.易用</p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220310143857.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">易用性</span><br><span class="line">通过高级操作符构建应用程序。</span><br><span class="line">Spark流将Spark语言集成的APl应用于流处理，使您可以像编写批处理作业一样编写流作业。它支持Java、Scala和Python。</span><br></pre></td></tr></table></figure><p>2.容错(因为是微批次处理,假如中间某一个批次错了,他有个重试)</p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220310144011.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">容错</span><br><span class="line">有状态的语义是开箱即用的。</span><br><span class="line">火花流恢复丢失的工作和操作状态(如滑动窗口)开箱。不需要任何额外的代码。</span><br></pre></td></tr></table></figure><p>3.易整合到Spark体系</p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220310144048.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">火花集成</span><br><span class="line">将流与批处理和交互式查询结合起来。</span><br><span class="line">通过在Spark上运行，Spark流允许重用相同的代码进行批处理、根据历史数据连接流或在流状态上运行特定查询。构建强大的交互式应用程序，而不仅仅是分析。</span><br></pre></td></tr></table></figure><p><strong>易整合到Spark体系</strong></p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220310144138.png"></p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220310145511.png"></p><h3><span id="spark-streaming架构">Spark Streaming架构</span></h3><h4><span id="微批处理架构图">(微批处理)架构图</span></h4><p><strong>SparkStreaming架构图</strong></p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220310144303.png"></p><p>​                                                                        </p><p><strong>整体架构图</strong></p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220310144407.png"></p><p><strong>shangbaishuyao补充图</strong></p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220310144438.png"></p><h4><span id="背压机制">背压机制</span></h4><p>​        Spark 1.5以前版本，用户如果要限制Receiver的数据接收速率，可以通过设置静态配制参数“spark.streaming.receiver.maxRate”的值来实现，此举虽然可以通过限制接收速率，来适配当前的处理能力，防止内存溢出，但也会引入其它问题。比如：producer数据生产高于maxRate，当前集群处理能力也高于maxRate，这就会造成资源利用率下降等问题。<br>​        为了更好的协调数据接收速率与资源处理能力，1.5版本开始Spark Streaming可以动态控制数据接收速率来适配集群数据处理能力。背压机制（即Spark Streaming Backpressure）: 根据JobScheduler反馈作业的执行信息来动态调整Receiver数据接收率。<br>​        通过属性“spark.streaming.backpressure.enabled”来控制是否启用backpressure机制，默认值false，即不启用。</p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220310144707.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;SparkStreaming     其实就是微批次处理架构&lt;br&gt;Spark Streaming他是spark当中处理流式数据的一个模块,Spark SQL是spark当中用来处理结构化数据的一个模块,假如说kafka过来的数据,不是在HDFS或者Hive那张表里面,那这时候你过来一点数据我就计算一点数据,这就叫流式处理,流式化处理我们有Storm(&lt;a href=&quot;https://storm.apache.org/&quot;&gt;https://storm.apache.org/&lt;/a&gt;) 但是他已经过时了,Flink太先进.&lt;br&gt;RDD有创建,转换,输出;&lt;br&gt;Spark SQL当中有DataFrame ,DataSet的创建,转换;&lt;br&gt;Spark SQL的转换简单,就是我们写的SQL,因为因为他还是SQL风格;&lt;/p&gt;</summary>
    
    
    
    <category term="大数据" scheme="http://xubatian.cn/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
    <category term="spark" scheme="http://xubatian.cn/tags/spark/"/>
    
    <category term="SparkStreaming" scheme="http://xubatian.cn/tags/SparkStreaming/"/>
    
  </entry>
  
  <entry>
    <title>Spark原理与实现: Spark SQL编程之Spark SQL数据的加载与保存</title>
    <link href="http://xubatian.cn/Spark%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E7%8E%B0-Spark-SQL%E7%BC%96%E7%A8%8B%E4%B9%8BSpark-SQL%E6%95%B0%E6%8D%AE%E7%9A%84%E5%8A%A0%E8%BD%BD%E4%B8%8E%E4%BF%9D%E5%AD%98/"/>
    <id>http://xubatian.cn/Spark%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E7%8E%B0-Spark-SQL%E7%BC%96%E7%A8%8B%E4%B9%8BSpark-SQL%E6%95%B0%E6%8D%AE%E7%9A%84%E5%8A%A0%E8%BD%BD%E4%B8%8E%E4%BF%9D%E5%AD%98/</id>
    <published>2022-03-10T05:37:17.000Z</published>
    <updated>2022-03-10T06:01:23.324Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="通用加载保存方法">通用加载/保存方法</span></h2><p>注意:sparkSQL可以读Json文件,但是一整行必须是一个完整的文件,如下图</p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220310133900.png"></p><span id="more"></span><h3><span id="加载数据-read-直接加载-format-指定加载数据类型">加载数据    (read 直接加载 / format 指定加载数据类型)</span></h3><p>1）read直接加载数据(读数据)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scala<span class="operator">&gt;</span> spark.read.</span><br><span class="line">csv  jdbc   json  orc   parquet textFile… …</span><br></pre></td></tr></table></figure><p>注意：加载数据的相关参数需写到上述方法中。如：textFile需传入加载数据的路径，jdbc需传入JDBC相关参数。<br>2）format指定加载数据类型</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scala<span class="operator">&gt;</span> spark.read.format(&quot;…&quot;)[.option(&quot;…&quot;)].load(&quot;…&quot;)</span><br></pre></td></tr></table></figure><p><strong>用法详解：</strong><br>（1）format(“…”)：指定加载的数据类型，包括”csv”、”jdbc”、”json”、”orc”、”parquet”和”textFile”。<br>（2）load(“…”)：在”csv”、”orc”、”parquet”和”textFile”格式下需要传入加载数据的路径。<br>（3）option(“…”)：在”jdbc”格式下需要传入JDBC相应参数，url、user、password和dbtable</p><h3><span id="保存数据-write-直接保存数据-format指定保存数据类型">保存数据    (write 直接保存数据 / format指定保存数据类型)</span></h3><p><strong>1）write直接保存数据</strong><br>注意:要知道我们读数据使用spark调用的,但是我们保存数据不是使用Spark调用了.RDD的创建一般是从SparkContext开始的. DataFrame的创建一般是从spark开始的. 保存是将RDD保存出去,所以是DataFrame或者dataset,所以应该拿DataFrame去调用保存方法.因为你要保存的是当前的数据集.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scala<span class="operator">&gt;</span> df.write.</span><br><span class="line">csv  jdbc   json  orc   parquet textFile… …</span><br></pre></td></tr></table></figure><p>注意：保存数据的相关参数需写到上述方法中。如：textFile需传入加载数据的路径，jdbc需传入JDBC相关参数。</p><p><strong>2）format指定保存数据类型</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scala<span class="operator">&gt;</span> df.write.format(&quot;…&quot;)[.option(&quot;…&quot;)].save(&quot;…&quot;)</span><br></pre></td></tr></table></figure><p><strong>用法详解：</strong><br>（1）format(“…”)：指定保存的数据类型，包括”csv”、”jdbc”、”json”、”orc”、”parquet”和”textFile”。<br>（2）save (“…”)：在”csv”、”orc”、”parquet”和”textFile”格式下需要传入保存数据的路径。<br>（3）option(“…”)：在”jdbc”格式下需要传入JDBC相应参数，url、user、password和dbtable</p><p><strong>3）文件保存选项</strong><br>可以采用SaveMode执行存储操作，SaveMode定义了对数据的处理模式。SaveMode是一个枚举类，其中的常量包括：<br>（1）Append：当保存路径或者表已存在时，追加内容；<br>（2）Overwrite： 当保存路径或者表已存在时，覆写内容；<br>（3）ErrorIfExists：当保存路径或者表已存在时，报错；<br>（4）Ignore：当保存路径或者表已存在时，忽略当前的保存操作。<br><strong>使用详解：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.write.mode(SaveMode.Append).save(&quot;… …&quot;)</span><br></pre></td></tr></table></figure><h3><span id="默认数据源">默认数据源</span></h3><p>Spark SQL的默认数据源为Parquet格式。数据源为Parquet文件时，Spark SQL可以方便的执行所有的操作。修改配置项Spark.sql.sources.default，可修改默认数据源格式。<br><strong>1）加载数据</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">val df <span class="operator">=</span> spark.read.load(&quot;examples/src/main/resources/users.parquet&quot;) </span><br></pre></td></tr></table></figure><p><strong>2）保存数据</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.select(&quot;name&quot;, &quot; color&quot;).write.save(&quot;user.parquet&quot;)</span><br></pre></td></tr></table></figure><h2><span id="json文件">JSON文件</span></h2><p>Spark SQL 能够自动推测 JSON数据集的结构，并将它加载为一个Dataset[Row] Dataset意思为数据集. 可以通过SparkSession.read.json()去加载一个 一个JSON 文件。<br><strong>注意：这个JSON文件不是一个传统的JSON文件，每一行都得是一个JSON串。格式如下：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;name&quot;:&quot;Michael&quot;&#125;</span><br><span class="line">&#123;&quot;name&quot;:&quot;Andy&quot;, &quot;age&quot;:<span class="number">30</span>&#125;</span><br><span class="line">&#123;&quot;name&quot;:&quot;Justin&quot;, &quot;age&quot;:<span class="number">19</span>&#125;</span><br></pre></td></tr></table></figure><p>1）导入隐式转换</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import spark.implicits._</span><br></pre></td></tr></table></figure><p>2）加载JSON文件</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">val path <span class="operator">=</span> &quot;examples/src/main/resources/people.json&quot;</span><br><span class="line">val peopleDF <span class="operator">=</span> spark.read.json(path)</span><br></pre></td></tr></table></figure><p>3）创建临时表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peopleDF.createOrReplaceTempView(&quot;people&quot;)</span><br></pre></td></tr></table></figure><p>4）数据查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">val teenagerNamesDF <span class="operator">=</span> spark.sql(&quot;SELECT name FROM people WHERE age BETWEEN 13 AND 19&quot;)</span><br><span class="line">teenagerNamesDF.show()</span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="operator">|</span>  name<span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="operator">|</span>Justin<span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br></pre></td></tr></table></figure><h2><span id="mysql">MySQL</span></h2><p>Spark SQL可以通过JDBC从关系型数据库中读取数据的方式创建DataFrame，通过对DataFrame一系列的计算后，还可以将数据再写回关系型数据库中。<br>可在启动shell时指定相关的数据库驱动路径，或者将相关的数据库驱动放到spark的类路径下。</p><p><strong>1）启动spark-shell</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin<span class="operator">/</span>spark<span class="operator">-</span>shell <span class="comment">--master spark://hadoop102:7077 [--jars mysql-connector-java-5.1.27-bin.jar]</span></span><br></pre></td></tr></table></figure><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220310134834.png"></p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220310135046.png"></p><p><strong>2）定义JDBC相关参数配置信息</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">val connectionProperties <span class="operator">=</span> <span class="keyword">new</span> Properties()</span><br><span class="line">connectionProperties.put(&quot;user&quot;, &quot;root&quot;)</span><br><span class="line">connectionProperties.put(&quot;password&quot;, &quot;xww2018&quot;)</span><br></pre></td></tr></table></figure><p><strong>3）使用read.jdbc加载数据</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">val jdbcDF2 <span class="operator">=</span> spark.read.jdbc(&quot;jdbc:mysql://hadoop102:3306/rdd&quot;, &quot;rddtable&quot;, connectionProperties)</span><br></pre></td></tr></table></figure><p><strong>4）使用format形式加载数据</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">val jdbcDF <span class="operator">=</span> spark.read.format(&quot;jdbc&quot;).option(&quot;url&quot;, &quot;jdbc:mysql://hadoop102:3306/rdd&quot;).option(&quot;dbtable&quot;, &quot; rddtable&quot;).option(&quot;user&quot;, &quot;root&quot;).option(&quot;password&quot;, &quot;xww2018&quot;).load()</span><br></pre></td></tr></table></figure><p><strong>5）使用write.jdbc保存数据</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jdbcDF2.write.jdbc(&quot;jdbc:mysql://hadoop102:3306/mysql&quot;, &quot;db&quot;, connectionProperties)</span><br></pre></td></tr></table></figure><p><strong>6）使用format形式保存数据</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">jdbcDF.write</span><br><span class="line">.format(&quot;jdbc&quot;)</span><br><span class="line">.option(&quot;url&quot;, &quot;jdbc:mysql://hadoop102:3306/rdd&quot;)</span><br><span class="line">.option(&quot;dbtable&quot;, &quot;rddtable3&quot;)</span><br><span class="line">.option(&quot;user&quot;, &quot;root&quot;)</span><br><span class="line">.option(&quot;password&quot;, &quot;xww2018&quot;)</span><br><span class="line">.save()</span><br></pre></td></tr></table></figure><h2><span id="hive">Hive</span></h2><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220310135302.png"></p><h3><span id="内嵌hive应用-基本不用">内嵌Hive应用 (基本不用)</span></h3><p>如果要使用内嵌的Hive，什么都不用做，直接用就可以了。<br>可以修改其数据仓库地址，参数为：–conf spark.sql.warehouse.dir=./wear</p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220310135333.png"></p><p>​        <strong>注意</strong>：如果你使用的是内部的Hive，在Spark2.0之后，spark.sql.warehouse.dir用于指定数据仓库的地址，如果你需要是用HDFS作为路径，那么需要将core-site.xml和hdfs-site.xml 加入到Spark conf目录，否则只会创建master节点上的warehouse目录，查询时会出现文件找不到的问题，这是需要使用HDFS，则需要将metastore(元数据    )删除，重启集群。</p><h3><span id="外部hive应用-正常用外置的hive">外部Hive应用 (正常用外置的hive )</span></h3><p>如果想连接外部已经部署好的Hive，需要通过以下几个步骤。<br><strong>1）将Hive中的hive-site.xml拷贝或者软连接到Spark安装目录下的conf目录下。</strong></p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220310135450.png"></p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220310135502.png"></p><p>注释掉Tez引擎,因为你是用的是Spark作为引擎了.</p><p>启动hadoop集群</p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220310135542.png"></p><p><strong>2）打开spark shell，注意带上访问Hive元数据库的JDBC客户端</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin<span class="operator">/</span>spark<span class="operator">-</span>shell <span class="comment">--master spark://hadoop102:7077 --jars mysql-connector-java-5.1.27-bin.jar</span></span><br></pre></td></tr></table></figure><p>注意：启动时指定JDBC jar包路径很麻烦，我们可以选择将JDBC的驱动包放置在spark的lib目录下，一劳永逸。</p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220310135624.png"></p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220310135638.png"></p><p>创建的这个表是一个非临时表</p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220310135812.png"></p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220310135846.png"></p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220310135914.png"></p><h3><span id="运行spark-sql-cli">运行Spark SQL CLI</span></h3><p>Spark SQL CLI可以很方便的在本地运行Hive元数据服务以及从命令行执行查询任务。在Spark目录下执行如下命令启动Spark SQL CLI，直接执行SQL语句，类似一Hive窗口。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span>bin<span class="operator">/</span>spark<span class="operator">-</span><span class="keyword">sql</span></span><br></pre></td></tr></table></figure><h3><span id="代码中操作hive">代码中操作Hive</span></h3><p><strong>1）添加依赖</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">       &lt;groupId&gt;org.apache.spark&lt;/groupId&gt;</span><br><span class="line">       &lt;artifactId&gt;spark-hive_2<span class="number">.11</span>&lt;/artifactId&gt;</span><br><span class="line">       &lt;version&gt;<span class="number">2.1</span><span class="number">.1</span>&lt;/version&gt;</span><br><span class="line">   &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">   &lt;dependency&gt;</span><br><span class="line">       &lt;groupId&gt;org.apache.hive&lt;/groupId&gt;</span><br><span class="line">       &lt;artifactId&gt;hive-exec&lt;/artifactId&gt;</span><br><span class="line">       &lt;version&gt;<span class="number">1.2</span><span class="number">.1</span>&lt;/version&gt;</span><br><span class="line">   &lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p><strong>2）代码实现</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建SparkSession</span></span><br><span class="line"><span class="keyword">val</span> spark: <span class="type">SparkSession</span> = <span class="type">SparkSession</span></span><br><span class="line">  .builder()</span><br><span class="line">  .enableHiveSupport()</span><br><span class="line">  .master(<span class="string">&quot;local[*]&quot;</span>)</span><br><span class="line">  .appName(<span class="string">&quot;SQLTest&quot;</span>)</span><br><span class="line">  .getOrCreate()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;通用加载-保存方法&quot;&gt;&lt;a href=&quot;#通用加载-保存方法&quot; class=&quot;headerlink&quot; title=&quot;通用加载/保存方法&quot;&gt;&lt;/a&gt;通用加载/保存方法&lt;/h2&gt;&lt;p&gt;注意:sparkSQL可以读Json文件,但是一整行必须是一个完整的文件,如下图&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220310133900.png&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="大数据" scheme="http://xubatian.cn/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
    <category term="spark" scheme="http://xubatian.cn/tags/spark/"/>
    
  </entry>
  
  <entry>
    <title>大数据公羊说之Flink每日一题收录</title>
    <link href="http://xubatian.cn/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%85%AC%E7%BE%8A%E8%AF%B4%E4%B9%8BFlink%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%E6%94%B6%E5%BD%95/"/>
    <id>http://xubatian.cn/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%85%AC%E7%BE%8A%E8%AF%B4%E4%B9%8BFlink%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%E6%94%B6%E5%BD%95/</id>
    <published>2022-03-09T16:12:12.000Z</published>
    <updated>2022-03-23T14:24:29.619Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">文章收录的是公众号: 大数据公羊说 的 面试题总结.</span><br><span class="line">注意: 黑猫旁边就是目录<span class="operator">~</span></span><br></pre></td></tr></table></figure><p>本文目录概览</p><ul><li><a href="https://www.xubatian.cn/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%85%AC%E7%BE%8A%E8%AF%B4%E4%B9%8BFlink%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%E6%94%B6%E5%BD%95/#%E9%9D%A2%E8%AF%95%E9%A2%98%E4%BD%A0%E5%9C%A8%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E4%B8%AD%E7%A2%B0%E5%88%B0%E5%93%AA%E4%BA%9B%E9%97%AE%E9%A2%98%E4%BC%9A%E5%AF%BC%E8%87%B4%E5%8F%8D%E5%8E%8B">面试题：你在生产环境中碰到哪些问题会导致反压？</a></li><li><a href="https://www.xubatian.cn/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%85%AC%E7%BE%8A%E8%AF%B4%E4%B9%8BFlink%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%E6%94%B6%E5%BD%95/#%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8D%E5%8E%8B%E6%9C%89%E5%93%AA%E4%BA%9B%E5%8D%B1%E5%AE%B3">面试题：反压有哪些危害？</a></li><li><a href="https://www.xubatian.cn/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%85%AC%E7%BE%8A%E8%AF%B4%E4%B9%8BFlink%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%E6%94%B6%E5%BD%95/#%E9%9D%A2%E8%AF%95%E9%A2%98-%E7%8A%B6%E6%80%81-%E7%8A%B6%E6%80%81%E5%90%8E%E7%AB%AF-checkpoint-%E4%B8%89%E8%80%85%E4%B9%8B%E9%97%B4%E7%9A%84%E5%8C%BA%E5%88%AB%E5%8F%8A%E5%85%B3%E7%B3%BB">面试题: 状态、状态后端、Checkpoint 三者之间的区别及关系？</a></li><li><a href="https://www.xubatian.cn/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%85%AC%E7%BE%8A%E8%AF%B4%E4%B9%8BFlink%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%E6%94%B6%E5%BD%95/#%E9%9D%A2%E8%AF%95%E9%A2%98-%E6%8A%8A%E7%8A%B6%E6%80%81%E5%90%8E%E7%AB%AF%E4%BB%8E-filesystem-%E5%8F%98%E4%B8%BA-rocksdb-%E5%90%8Eflink-%E4%BB%BB%E5%8A%A1%E7%8A%B6%E6%80%81%E5%AD%98%E5%82%A8%E4%BC%9A%E5%8F%91%E7%94%9F%E9%82%A3%E4%BA%9B%E5%8F%98%E5%8C%96">面试题 : 把状态后端从 FileSystem 变为 RocksDB 后，Flink 任务状态存储会发生那些变化？</a></li><li><a href="https://www.xubatian.cn/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%85%AC%E7%BE%8A%E8%AF%B4%E4%B9%8BFlink%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%E6%94%B6%E5%BD%95/#%E9%9D%A2%E8%AF%95%E9%A2%98-%E4%BB%80%E4%B9%88%E6%A0%B7%E7%9A%84%E4%B8%9A%E5%8A%A1%E5%9C%BA%E6%99%AF%E4%BD%A0%E4%BC%9A%E9%80%89%E6%8B%A9-filesystem%E4%BB%80%E4%B9%88%E6%A0%B7%E7%9A%84%E4%B8%9A%E5%8A%A1%E5%9C%BA%E6%99%AF%E4%BD%A0%E4%BC%9A%E9%80%89-rocksdb-%E7%8A%B6%E6%80%81%E5%90%8E%E7%AB%AF">面试题: 什么样的业务场景你会选择 filesystem，什么样的业务场景你会选 rocksdb 状态后端？</a><span id="more"></span></li><li><a href="https://www.xubatian.cn/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%85%AC%E7%BE%8A%E8%AF%B4%E4%B9%8BFlink%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%E6%94%B6%E5%BD%95/#%E9%9D%A2%E8%AF%95%E9%A2%98-flink-sql-api-state-ttl-%E7%9A%84%E8%BF%87%E6%9C%9F%E6%9C%BA%E5%88%B6%E6%98%AF-oncreateandupdate-%E8%BF%98%E6%98%AFonreadandwrite">面试题: Flink SQL API State TTL 的过期机制是 onCreateAndUpdate 还是onReadAndWrite?</a></li><li><a href="https://www.xubatian.cn/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%85%AC%E7%BE%8A%E8%AF%B4%E4%B9%8BFlink%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%E6%94%B6%E5%BD%95/#%E9%9D%A2%E8%AF%95%E9%A2%98-watermark-%E5%88%B0%E5%BA%95%E6%98%AF%E5%B9%B2%E5%95%A5%E7%9A%84%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF">面试题: watermark 到底是干啥的？应用场景？</a></li><li><a href="https://www.xubatian.cn/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%85%AC%E7%BE%8A%E8%AF%B4%E4%B9%8BFlink%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%E6%94%B6%E5%BD%95/#%E9%9D%A2%E8%AF%95%E9%A2%98-%E4%B8%80%E4%B8%AA-flink-%E4%BB%BB%E5%8A%A1%E4%B8%AD%E5%8F%AF%E4%BB%A5%E6%97%A2%E6%9C%89%E4%BA%8B%E4%BB%B6%E6%97%B6%E9%97%B4%E7%AA%97%E5%8F%A3%E5%8F%88%E6%9C%89%E5%A4%84%E7%90%86%E6%97%B6%E9%97%B4%E7%AA%97%E5%8F%A3%E5%90%97">面试题: 一个 Flink 任务中可以既有事件时间窗口，又有处理时间窗口吗？</a></li><li><a href="https://www.xubatian.cn/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%85%AC%E7%BE%8A%E8%AF%B4%E4%B9%8BFlink%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%E6%94%B6%E5%BD%95/#%E9%9D%A2%E8%AF%95%E9%A2%98-window-%E5%90%8E%E9%9D%A2%E8%B7%9F-aggregate-%E5%92%8C-process-%E7%9A%84%E4%B8%A4%E4%B8%AA%E7%AA%97%E5%8F%A3%E8%AE%A1%E7%AE%97%E7%9A%84%E5%8C%BA%E5%88%AB%E6%98%AF%E4%BB%80%E4%B9%88">面试题: window 后面跟 aggregate 和 process 的两个窗口计算的区别是什么？</a></li><li><a href="https://www.xubatian.cn/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%85%AC%E7%BE%8A%E8%AF%B4%E4%B9%8BFlink%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%E6%94%B6%E5%BD%95/#%E9%9D%A2%E8%AF%95%E9%A2%98-%E4%B8%BA%E4%BB%80%E4%B9%88-flink-datastream-api-%E5%9C%A8%E5%87%BD%E6%95%B0%E5%85%A5%E5%8F%82%E6%88%96%E8%80%85%E5%87%BA%E5%8F%82%E6%9C%89%E6%B3%9B%E5%9E%8B%E6%97%B6%E4%B8%8D%E8%83%BD%E4%BD%BF%E7%94%A8-lambda-%E8%A1%A8%E8%BE%BE%E5%BC%8F">面试题: 为什么 Flink DataStream API 在函数入参或者出参有泛型时，不能使用 lambda 表达式？</a></li><li><a href="https://www.xubatian.cn/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%85%AC%E7%BE%8A%E8%AF%B4%E4%B9%8BFlink%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%E6%94%B6%E5%BD%95/#%E9%9D%A2%E8%AF%95%E9%A2%98-flink-%E4%B8%BA%E4%BB%80%E4%B9%88%E5%BC%BA%E8%B0%83-function-%E5%AE%9E%E7%8E%B0%E6%97%B6%E5%AE%9E%E4%BE%8B%E5%8C%96%E7%9A%84%E5%8F%98%E9%87%8F%E8%A6%81%E5%AE%9E%E7%8E%B0-serializable-%E6%8E%A5%E5%8F%A3">面试题: Flink 为什么强调 function 实现时，实例化的变量要实现 serializable 接口？</a></li><li><a href="https://www.xubatian.cn/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%85%AC%E7%BE%8A%E8%AF%B4%E4%B9%8BFlink%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%E6%94%B6%E5%BD%95/#%E9%9D%A2%E8%AF%95%E9%A2%98-flink-%E7%9A%84%E5%B9%B6%E8%A1%8C%E5%BA%A6%E5%8F%AF%E4%BB%A5%E9%80%9A%E8%BF%87%E5%93%AA%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F%E8%AE%BE%E7%BD%AE%E4%BC%98%E5%85%88%E7%BA%A7%E5%85%B3%E7%B3%BB%E6%98%AF%E4%BB%80%E4%B9%88">面试题: Flink 的并行度可以通过哪几种方式设置，优先级关系是什么？</a></li><li><a href="https://www.xubatian.cn/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%85%AC%E7%BE%8A%E8%AF%B4%E4%B9%8BFlink%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%E6%94%B6%E5%BD%95/#%E9%9D%A2%E8%AF%95%E9%A2%98-%E4%BD%A0%E6%98%AF%E6%80%8E%E4%B9%88%E5%90%88%E7%90%86%E7%9A%84%E8%AF%84%E4%BC%B0-flink-%E4%BB%BB%E5%8A%A1%E7%9A%84%E5%B9%B6%E8%A1%8C%E5%BA%A6">面试题: 你是怎么合理的评估 Flink 任务的并行度？</a></li><li><a href="https://www.xubatian.cn/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%85%AC%E7%BE%8A%E8%AF%B4%E4%B9%8BFlink%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%E6%94%B6%E5%BD%95/#%E9%9D%A2%E8%AF%95%E9%A2%98-%E4%BD%A0%E6%98%AF%E6%80%8E%E4%B9%88%E5%90%88%E7%90%86%E8%AF%84%E4%BC%B0%E4%BB%BB%E5%8A%A1%E6%9C%80%E5%A4%A7%E5%B9%B6%E8%A1%8C%E5%BA%A6">面试题: 你是怎么合理评估任务最大并行度？</a></li><li><a href="https://www.xubatian.cn/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%85%AC%E7%BE%8A%E8%AF%B4%E4%B9%8BFlink%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%E6%94%B6%E5%BD%95/#%E9%9D%A2%E8%AF%95%E9%A2%98operator-state-%E5%92%8C-keyed-state-%E4%B8%A4%E8%80%85%E7%9A%84%E5%8C%BA%E5%88%AB%E6%9C%80%E5%A4%A7%E5%B9%B6%E8%A1%8C%E5%BA%A6%E5%92%8C%E8%BF%99%E4%B8%A4%E7%A7%8D-state-%E7%9A%84%E5%85%B3%E7%B3%BB%E4%B8%BE%E4%B8%AA%E4%BE%8B%E5%AD%90%E5%BD%93%E7%94%A8%E6%88%B7%E5%81%9C%E6%AD%A2%E4%BB%BB%E5%8A%A1-%E6%9B%B4%E6%96%B0%E4%BB%A3%E7%A0%81%E9%80%BB%E8%BE%91%E5%B9%B6%E4%B8%94%E6%94%B9%E5%8F%98%E4%BB%BB%E5%8A%A1%E5%B9%B6%E5%8F%91%E5%BA%A6%E6%97%B6%E4%B8%A4%E7%A7%8D-state-%E9%83%BD%E6%98%AF%E6%80%8E%E6%A0%B7%E8%BF%9B%E8%A1%8C%E6%81%A2%E5%A4%8D%E7%9A%84">面试题：operator state 和 keyed state 两者的区别？最大并行度和这两种 state 的关系？举个例子，当用户停止任务、更新代码逻辑并且改变任务并发度时，两种 state 都是怎样进行恢复的？</a></li><li><a href="https://www.xubatian.cn/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%85%AC%E7%BE%8A%E8%AF%B4%E4%B9%8BFlink%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%E6%94%B6%E5%BD%95/#%E9%9D%A2%E8%AF%95%E9%A2%98%E4%BD%A0%E4%BB%AC%E5%85%AC%E5%8F%B8%E6%98%AF%E9%80%9A%E8%BF%87%E4%BB%80%E4%B9%88%E6%A0%B7%E7%9A%84%E7%9B%91%E6%8E%A7%E5%8F%8A%E4%BF%9D%E9%9A%9C%E6%89%8B%E6%AE%B5%E6%9D%A5%E4%BF%9D%E9%9A%9C%E5%AE%9E%E6%97%B6%E6%8C%87%E6%A0%87%E7%9A%84%E8%B4%A8%E9%87%8F%E6%AF%94%E5%A6%82%E4%BA%8B%E5%89%8D%E4%BA%8B%E4%B8%AD%E4%BA%8B%E5%90%8E%E6%98%AF%E6%80%8E%E4%B9%88%E5%81%9A%E7%9A%84">面试题：你们公司是通过什么样的监控及保障手段来保障实时指标的质量？比如事前事中事后是怎么做的？</a></li><li><a href="https://www.xubatian.cn/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%85%AC%E7%BE%8A%E8%AF%B4%E4%B9%8BFlink%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%E6%94%B6%E5%BD%95/#%E9%9D%A2%E8%AF%95%E9%A2%98%E5%9C%A8%E5%AE%9E%E6%97%B6%E6%95%B0%E4%BB%93%E7%9A%84%E5%88%86%E5%B1%82%E8%AE%BE%E8%AE%A1%E4%B8%AD%E4%BD%A0%E6%98%AF%E6%80%8E%E4%B9%88%E5%85%BC%E9%A1%BE%E6%97%B6%E6%95%88%E6%80%A7%E5%92%8C%E9%80%9A%E7%94%A8%E6%80%A7%E7%9A%84%E5%85%B7%E4%BD%93%E7%9A%84%E5%88%86%E5%B1%82%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%A1%88%E6%98%AF%E6%80%8E%E6%A0%B7%E7%9A%84">面试题：在实时数仓的分层设计中，你是怎么兼顾时效性和通用性的？具体的分层设计方案是怎样的？</a></li><li><a href="https://www.xubatian.cn/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%85%AC%E7%BE%8A%E8%AF%B4%E4%B9%8BFlink%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%E6%94%B6%E5%BD%95/#%E9%9D%A2%E8%AF%95%E9%A2%98%E4%BD%A0%E4%BB%AC%E5%85%AC%E5%8F%B8%E7%9A%84%E5%AE%9E%E6%97%B6%E6%95%B0%E4%BB%93%E7%94%A8%E5%88%B0%E7%9A%84%E7%BB%B4%E8%A1%A8%E9%83%BD%E6%9C%89%E5%93%AA%E4%BA%9B%E7%B1%BB%E5%9E%8B%E5%88%86%E5%88%AB%E6%98%AF%E9%80%9A%E8%BF%87%E4%BB%80%E4%B9%88%E6%A0%B7%E7%9A%84%E6%96%B9%E5%BC%8F%E6%9E%84%E5%BB%BA%E7%9A%84">面试题：你们公司的实时数仓用到的维表都有哪些类型？分别是通过什么样的方式构建的？</a></li><li><a href="https://www.xubatian.cn/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%85%AC%E7%BE%8A%E8%AF%B4%E4%B9%8BFlink%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%E6%94%B6%E5%BD%95/#%E9%9D%A2%E8%AF%95%E9%A2%98%E4%BD%A0%E6%98%AF%E6%80%8E%E4%B9%88%E9%81%BF%E5%85%8D%E6%88%96%E8%80%85%E7%BC%93%E8%A7%A3%E6%95%B0%E6%8D%AE%E5%80%BE%E6%96%9C%E7%9A%84">面试题：你是怎么避免或者缓解数据倾斜的？</a></li><li><a href="https://www.xubatian.cn/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%85%AC%E7%BE%8A%E8%AF%B4%E4%B9%8BFlink%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%E6%94%B6%E5%BD%95/#%E9%9D%A2%E8%AF%95%E9%A2%98%E4%BD%A0%E4%BB%AC%E5%85%AC%E5%8F%B8%E5%9C%A8%E9%81%87%E5%88%B0%E5%A4%A7%E4%BF%83%E6%97%B6%E6%98%AF%E6%80%8E%E4%B9%88%E4%BC%B0%E7%AE%97-flink-%E4%BB%BB%E5%8A%A1%E8%B5%84%E6%BA%90%E7%9A%84%E6%9C%89%E6%B2%A1%E6%9C%89%E6%88%90%E4%BD%93%E7%B3%BB%E7%9A%84%E6%96%B9%E6%A1%88flink%E4%BB%BB%E5%8A%A1%E5%8E%8B%E6%B5%8B%E5%8F%88%E6%98%AF%E6%80%8E%E4%B9%88%E5%81%9A%E7%9A%84%E6%9C%89%E6%B2%A1%E6%9C%89%E5%B7%A5%E5%85%B7%E6%94%AF%E6%8C%81">面试题：你们公司在遇到大促时是怎么估算 flink 任务资源的，有没有成体系的方案？flink任务压测又是怎么做的，有没有工具支持？</a></li><li><a href="https://www.xubatian.cn/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%85%AC%E7%BE%8A%E8%AF%B4%E4%B9%8BFlink%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%E6%94%B6%E5%BD%95/#%E9%9D%A2%E8%AF%95%E9%A2%98flink-%E9%85%8D%E7%BD%AE-state-ttl-%E6%97%B6%E9%83%BD%E6%9C%89%E5%93%AA%E4%BA%9B%E9%85%8D%E7%BD%AE%E9%A1%B9%E6%AF%8F%E7%A7%8D%E9%85%8D%E7%BD%AE%E9%A1%B9%E7%9A%84%E4%BD%9C%E7%94%A8flink-state-ttl-%E6%98%AF%E6%80%8E%E4%B9%88%E5%81%9A%E5%88%B0%E6%95%B0%E6%8D%AE%E8%BF%87%E6%9C%9F%E7%9A%84">面试题：Flink 配置 State TTL 时都有哪些配置项？每种配置项的作用？Flink State TTL 是怎么做到数据过期的？</a></li><li><a href="https://www.xubatian.cn/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%85%AC%E7%BE%8A%E8%AF%B4%E4%B9%8BFlink%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%E6%94%B6%E5%BD%95/#%E9%9D%A2%E8%AF%95%E9%A2%98%E6%88%91%E4%BB%AC%E9%83%BD%E7%9F%A5%E9%81%93-flink-%E4%BB%BB%E5%8A%A1-failover-%E4%B9%8B%E5%90%8E%E5%8F%AF%E8%83%BD%E4%BC%9A%E9%87%8D%E5%A4%8D%E5%86%99%E5%87%BA%E6%95%B0%E6%8D%AE%E5%88%B0-sink-%E4%B8%AD%E4%BD%A0%E4%BB%AC%E5%85%AC%E5%8F%B8%E6%98%AF%E6%80%8E%E4%B9%88%E5%81%9A%E5%88%B0%E7%AB%AF%E5%AF%B9%E7%AB%AF-exactly-once-%E7%9A%84">面试题：我们都知道 flink 任务 failover 之后，可能会重复写出数据到 sink 中，你们公司是怎么做到端对端 exactly-once 的？</a></li></ul><h2><span id="面试题你在生产环境中碰到哪些问题会导致反压">面试题：你在生产环境中碰到哪些问题会导致反压？</span></h2><ul><li>数据倾斜：比如当前算子的每个并发只能处理 1w qps 的数据，而由于数据倾斜，这个算子平均 1s 需要处理 2w 条数据，因此倾斜的算子处理压力大，从而反压</li><li>算子性能问题：比如下游整个整个算子的处理性能差，上游是 1w qps，当前整个算子算下来平均只能处理 1k qps，因此就有反压的情况</li></ul><h2><span id="面试题反压有哪些危害">面试题：反压有哪些危害？</span></h2><ul><li>CK 时间长或者失败。反压导致 barrier 需要花很长时间才能对齐。</li><li>整个任务完全卡住。比如在 TUMBLE 窗口算子的任务中，反压后可能会导致下游算子的 inputpool 和上游算子的 outputpool 满了，这时候如果下游窗口的 watermark 一直对不齐，窗口触发不了的话，下游算子就永远无法触发窗口计算了。整个任务卡住。</li></ul><h2><span id="面试题-状态-状态后端-checkpoint-三者之间的区别及关系">面试题:   状态、状态后端、Checkpoint 三者之间的区别及关系？</span></h2><p><strong>结论：拿五个字做比喻：”铁锅炖大鹅”，铁锅是状态后端，大鹅是状态，Checkpoint 是炖的动作。</strong></p><ul><li><strong>状态</strong>：本质来说就是数据，在 Flink 中，其实就是 Flink 提供给用户的状态编程接口。比如 flink 中的 MapState，ValueState，ListState。</li><li><strong>状态后端</strong>：Flink 提供的用于管理状态的组件，状态后端决定了以什么样数据结构，什么样的存储方式去存储和管理我们的状态。Flink 目前官方提供了 memory、filesystem，rocksdb 三种状态后端来存储我们的状态。</li><li><strong>Checkpoint（状态管理）</strong>：Flink 提供的用于定时将状态后端中存储的状态同步到远程的存储系统的组件或者能力。为了防止 long run 的 Flink 任务挂了导致状态丢失，产生数据质量问题，Flink 提供了状态管理（Checkpoint，Savepoint）的能力把我们使用的状态给管理起来，定时的保存到远程。然后可以在 Flink 任务 failover 时，从远程把状态数据恢复到 Flink 任务中，保障数据质量。</li></ul><h2><span id="面试题-把状态后端从-filesystem-变为-rocksdb-后flink-任务状态存储会发生那些变化">面试题 : 把状态后端从 FileSystem 变为 RocksDB 后，Flink 任务状态存储会发生那些变化？</span></h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">结论：是否使用 RocksDB 只会影响 Flink 任务中 keyed<span class="operator">-</span>state 存储的方式和地方，Flink 任务中的 operator<span class="operator">-</span>state 不会受到影响。</span><br></pre></td></tr></table></figure><p>首先我们来看看，Flink 中的状态只会分为两类：</p><p>keyed-state：键值状态，如其名字，此类状态是以 k-v 的形式存储，状态值和 key 绑定。Flink 中的 keyby 之后紧跟的算子的 state 就是键值状态；</p><p>operator-state：算子状态，非 keyed-state 的 state 都是算子状态，非 k-v 结构，状态值和算子绑定，不和 key 绑定。Flink 中的 kafka source 算子中用于存储 kafka offset 的 state 就是算子状态。</p><p><strong>如下图所示是 3 种状态后端和 2 种 State 的对应存储关系：</strong></p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220301005248.png"></p><p>​    横向（行）来看，即 Flink 的状态分类。分为 Operator state-backend、Keyed state-backend；</p><p>​    纵向（列）来看，即 Flink 的状态后端分类。用户可以配置 memory，filesystem，rocksdb 3 中状态后端，在 Flink 任务中生成 MemoryStateBackend，FsStateBackend，RocksdbStateBackend，其声明了整个任务的状态管理后端类型；</p><p>​    每个格子中的内容就是用户在配置 xx 状态后端（列）时，给用户使用的状态（行）生成的状态后端实例，生成的这个实例就是在 Flink 中实际用于管理用户使用的状态的组件。</p><p><strong>因此对应的结论就是：</strong></p><p>Flink 任务中的 operator-state。无论用户配置哪种状态后端（无论是 memory，filesystem，rocksdb），都是使用 DefaultOperatorStateBackend 来管理的，状态数据都存储在内存中，做 Checkpoint 时同步到远程文件存储中（比如 HDFS）。</p><p>Flink 任务中的 keyed-state。<strong>用户在配置 rocksdb 时，会使用 RocksdbKeyedStateBackend 去管理状态；用户在配置 memory，filesystem 时，会使用 HeapKeyedStateBackend 去管理状态。因此就有了这个问题的结论，配置 rocksdb 只会影响 keyed-state 存储的方式和地方，operator-state 不会受到影响。</strong></p><h2><span id="面试题-什么样的业务场景你会选择-filesystem什么样的业务场景你会选-rocksdb-状态后端">面试题:   什么样的业务场景你会选择 filesystem，什么样的业务场景你会选 rocksdb 状态后端？</span></h2><p>在回答这个问题前，我们先看看每种状态后端的特性：</p><p><strong>MemoryStateBackend</strong></p><ul><li><p>原理：运行时所需的 State 数据全部保存在 TaskManager JVM 堆上内存中，执行 Checkpoint 的时候，会把 State 的快照数据保存到 JobManager 进程 的内存中。执行 Savepoint 时，可以把 State 存储到文件系统中。</p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220301005308.png"></p></li><li><p>适用场景：</p></li><li><ul><li>基于内存的 StateBackend 在生产环境下不建议使用，因为 State 大小超过 JobManager 内存就 OOM 了，<strong>此种状态后端适合在本地开发调试测试，生产环境基本不用。</strong></li><li>State 存储在 JobManager 的内存中。受限于 JobManager 的内存大小。</li><li>每个 State 默认 5MB,可通过 MemoryStateBackend 构造函数调整。d.每个 Stale 不能超过 Akka Frame 大小。</li></ul></li></ul><p><strong>FSStateBackend</strong></p><ul><li><p>原理：运行时所需的 State 数据全部保存在 TaskManager 的内存中，执行 Checkpoint 的时候，会把 State 的快照数据保存到配置的文件系统中。TM 是异步将 State 数据写入外部存储。</p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220301005325.png"></p></li><li><p>适用场景：</p></li><li><ul><li>a.适用于<strong>处理小状态、短窗口、或者小键值状态的有状态处理任务</strong>，<strong>不建议在大状态的任务下使用 FSStateBackend</strong>。比如 ETL 任务，小时间间隔的 TUMBLE 窗口 b.State 大小不能超过 TM 内存。</li></ul></li></ul><p><strong>RocksDBStateBackend</strong></p><ul><li><p>原理：使用嵌入式的本地数据库 RocksDB 将流计算数据状态存储在本地磁盘中。在执行 Checkpoint 的时候，会将整个 RocksDB 中保存的 State 数据全量或者增量持久化到配置的文件系统中。</p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220301005339.png"></p></li><li><p>适用场景：</p></li><li><ul><li>a.最适合用于处理<strong>大状态、长窗口，或大键值状态的有状态处理任务。</strong></li><li>b.RocksDBStateBackend 是目前<strong>唯一支持增量检查点</strong>的后端。</li><li>c.增量检查点非常适用于超大状态的场景。比如计算 DAU 这种大数据量去重，<strong>大状态的任务都建议直接使用 RocksDB 状态后端</strong>。</li></ul></li></ul><p><strong>到生产环境中：</strong></p><p>​    如果状态很大，使用 Rocksdb；如果状态不大，使用 Filesystem。</p><p>​    Rocksdb 使用磁盘存储 State，所以会涉及到访问 State 磁盘序列化、反序列化，性能会收到影响，而 Filesystem 直接访问内存，单纯从访问状态的性能来说 Filesystem 远远好于 Rocksdb。<strong>生产环境中实测，相同任务使用 Filesystem 性能为 Rocksdb 的 n 倍，因此需要根据具体场景评估选择。</strong></p><h2><span id="面试题-flink-sql-api-state-ttl-的过期机制是-oncreateandupdate-还是onreadandwrite">面试题:   Flink SQL API State TTL 的过期机制是 onCreateAndUpdate 还是onReadAndWrite?</span></h2><p><strong>结论：Flink SQL API State TTL 的过期机制目前只支持 onCreateAndUpdate，DataStream API 两个都支持</strong></p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220301005404.png"></p><p>剖析：</p><ul><li>onCreateAndUpdate：是在创建 State 和更新 State 时【更新 State TTL】</li><li>onReadAndWrite：是在访问 State 和写入 State 时【更新 State TTL】</li></ul><p>实际踩坑场景：Flink SQL Deduplicate 写法，row_number partition by user_id order by proctime asc，此 SQL 最后生成的算子只会在第一条数据来的时候更新 state，后续访问不会更新 state TTL，因此 state 会在用户设置的 state TTL 时间之后过期。</p><h2><span id="面试题-watermark-到底是干啥的应用场景">面试题: watermark 到底是干啥的？应用场景？</span></h2><p>大部分同学都只能回答出：watermark 是用于缓解时间时间的乱序问题的。</p><p>没错，这个观点是正确的。但是博主认为这只是 watermark 第二重要的作用，其更重要的作用在于可以标识一个 Flink 任务的事件 <strong>时间进度</strong>。</p><p>怎么理解 <strong>时间进度</strong>？</p><p>我们可以现象一下，一个事件时间窗口的任务，如果没有一个 <strong>东西</strong> 去标识其事件时间的进度，那么这个事件时间的窗口也就是不知道什么时候能够触发了，也就是说这个窗口永远不会触发并且输出结果。</p><p>所以要有一个 <strong>东西</strong> 去标识其事件时间的进度，从而让这个事件时间窗口知道，这个事件时间窗口已经结束了，可以触发计算了。在 Flink 中，这个 <strong>东西</strong> 就是 <strong>watermark</strong>。</p><p>总结一下，博主认为 <strong>watermark</strong> 为 Flink 解决了两个问题：</p><p>​    <strong>标识 Flink 任务的事件时间进度，从而能够推动事件时间窗口的触发、计算。</strong></p><p><strong>解决事件时间窗口的乱序问题。</strong></p><h2><span id="面试题-一个-flink-任务中可以既有事件时间窗口又有处理时间窗口吗">面试题: 一个 Flink 任务中可以既有事件时间窗口，又有处理时间窗口吗？</span></h2><p><strong>结论：一个 Flink 任务可以同时有事件时间窗口，又有处理时间窗口。</strong></p><p>那么有些小伙伴们问了，为什么我们常见的 Flink 任务要么设置为事件时间语义，要么设置为处理时间语义？</p><p>确实，在生产环境中，我们的 Flink 任务一般不会同时拥有两种时间语义的窗口。</p><p>那么怎么解释开头博主所说的结论呢？</p><p>博主这里从两个角度进行说明：</p><p>​    我们其实没有必要把一个 Flink 任务和某种特定的时间语义进行绑定。对于事件时间窗口来说，我们只要给它 watermark，能让 watermark 一直往前推进，让事件时间窗口能够持续触发计算就行。对于处理时间来说更简单，只要窗口算子按照本地时间按照固定的时间间隔进行触发就行。无论哪种时间窗口，主要满足时间窗口的触发条件就行。</p><p>​    Flink 的实现上来说也是支持的。Flink 是使用一个叫做 TimerService 的组件来管理 timer 的，我们可以同时注册事件时间和处理时间的 timer，Flink 会自行判断 timer 是否满足触发条件，如果是，则回调窗口处理函数进行计算。</p><h2><span id="面试题-window-后面跟-aggregate-和-process-的两个窗口计算的区别是什么">面试题: window 后面跟 aggregate 和 process 的两个窗口计算的区别是什么？</span></h2><p>aggregate：是增量聚合，来一条数据计算完了存储在累加器中，不需要等到窗口触发时计算，<strong>性能较好</strong>；</p><p>process：全量函数，缓存全部窗口内的数据，满足窗口触发条件再触发计算，同时还提供定时触发，窗口信息等上下文信息；</p><p>应用场景：aggregate 一个一个处理的聚合结果向后传递一般来说都是有信息损失的，而 <strong>process 则可以更加定制化的处理</strong>。</p><h2><span id="面试题-为什么-flink-datastream-api-在函数入参或者出参有泛型时不能使用-lambda-表达式">面试题: 为什么 Flink DataStream API 在函数入参或者出参有泛型时，不能使用 lambda 表达式？</span></h2><p>Flink 类型信息系统是通过反射获取到 Java class 的方法签名去获取类型信息的。</p><p>以 FlatMap 为例，Flink 在通过反射时会检查及获取 FlatMap collector 的出参类型信息。</p><p>但是 lambda 表达式写的 FlatMap 逻辑，会导致反射方法获取类型信息时【直接获取不到】collector 的出参类型参数，所以才会报错。</p><h2><span id="面试题-flink-为什么强调-function-实现时实例化的变量要实现-serializable-接口">面试题: Flink 为什么强调 function 实现时，实例化的变量要实现 serializable 接口？</span></h2><p><strong>其实这个问题可以延伸成 3 个问题：</strong></p><p>​    为什么 Flink 要用到 Java 序列化机制。和 Flink 类型系统的数据序列化机制的用途有啥区别？</p><p>​    非实例化的变量没有实现 Serializable 为啥就不报错，实例化就报错？</p><p>​    为啥加 transient 就不报错？</p><p><strong>上面 3 个问题的答案如下：</strong></p><p>​    Flink 写的函数式编程代码或者说闭包，需要 Java 序列化从 JobManager 分发到 TaskManager，而 Flink 类型系统的数据序列化机制是为了分发数据，不是分发代码，可以用非Java的序列化机制，比如 Kyro。</p><p>​    编译期不做序列化，所以不实现 Serializable 不会报错，但是运行期会执行序列化动作，没实现 Serializable 接口的就报错了</p><p>​    Flink DataStream API 的 Function 作为闭包在网络传输，必须采用 Java 序列化，所以要通过 Serializable 接口标记，根据 Java 序列化的规定，内部成员变量要么都可序列化，要么通过 transient 关键字跳过序列化，否则 Java 序列化的时候会报错。静态变量不参与序列化，所以不用加 transient。</p><h2><span id="面试题-flink-的并行度可以通过哪几种方式设置优先级关系是什么">面试题: Flink 的并行度可以通过哪几种方式设置，优先级关系是什么？</span></h2><p>​    代码中算子单独设置</p><p>​    代码中Env全局设置</p><p>​    提交参数</p><p>​    默认配置信息</p><p>上面的 Flink 并行度优先级从上往下由大变小。</p><h2><span id="面试题-你是怎么合理的评估-flink-任务的并行度">面试题: 你是怎么合理的评估 Flink 任务的并行度？</span></h2><p>Flink 任务并行度合理行一般根据<strong>峰值流量进行压测评估</strong>，并且根据集群负载情况<strong>留一定量的 buffer 资源</strong>。</p><ol><li>如果数据源已经存在，则可以直接消费进行测试</li><li>如果数据源不存在，需要自行造压测数据进行测试</li></ol><p>对于一个 Flink 任务来说，一般可以按照以下方式进行细粒度设置并行度：</p><ol><li><p>source 并行度配置：以 kafka 为例，source 的并行度一般设置为 kafka 对应的 topic 的分区数</p></li><li><p>transform（比如 flatmap、map、filter 等算子）并行度的配置：这些算子一般不会做太重的操作，并行度可以和 source 保持一致，使得算子之间可以做到 forward 传输数据，不经过网络传输</p></li><li><p>keyby 之后的处理算子：<strong>建议最大并行度为此算子并行度的整数倍</strong>，这样可以使每个算子上的 keyGroup 是相同的，从而使得数据相对均匀 shuffle 到下游算子，如下图为 shuffle 策略</p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220301005428.png"></p></li><li><p>sink 并行度的配置：sink 是数据流向下游的地方，可以根据 sink 的数据量及下游的服务抗压能力进行评估。如果 sink 是 kafka，可以设为 kafka 对应 topic 的分区数。注意 sink 并行度最好和 kafka partition 成倍数关系，否则可能会出现如到 kafka partition 数据不均匀的情况。但是大多数情况下 sink 算子并行度不需要特别设置，只需要和整个任务的并行度相同就行。</p></li></ol><h2><span id="面试题-你是怎么合理评估任务最大并行度">面试题: 你是怎么合理评估任务最大并行度？</span></h2><ol><li> 前提：并行度必须 &lt;= 最大并行度</li><li> 最大并行度的作用：合理设置最大并行度可以缓解数据倾斜的问题</li><li> 根据具体场景的不同，最大并行度大小设置也有不同的方式：</li></ol><ul><li><strong>在 key 非常多的情况下，最大并行度适合设置比较大（几千）</strong>，不容易出现数据倾斜，以 Flink SQL 场景举例：row_number = 1 partition key user_id 的 Deduplicate 场景（user_id 一般都非常多）</li><li><strong>在 key 不是很多的情况下，最大并行度适合设置不是很大</strong>，不然会加重数据倾斜，以 Flink SQL 场景举例：group by dim1,dim2 聚合并且维度值不多的 group agg 场景（dim1，dim2 可以枚举），如果依然有数据倾斜的问题，需要自己先打散数据，缓解数据倾斜</li></ul><ol><li> 最大并行度的使用限制：<strong>最大并行度一旦设置，是不能随意变更的</strong>，否则会导致检查点或保存点失效；最大并行度设置会影响 MapState 状态划分的 KeyGroup 数，并行度修改后再从保存点启动时，KeyGroup 会根据并行度的设定进行重新分布。</li><li> 最大并行度的设置：最大并行度可以自己设置，也可以框架默认生成；默认的算法是取当前算子并行度的 1.5 倍和 2 的 7 次方比较，取两者之间的最大值，然后用上面的结果和 2 的 15 次方比较，取其中的最小值为默认的最大并行度，<strong>非常不建议自动生成，建议用户自己设置</strong>。</li></ol><h2><span id="面试题operator-state-和-keyed-state-两者的区别最大并行度和这两种-state-的关系举个例子当用户停止任务-更新代码逻辑并且改变任务并发度时两种-state-都是怎样进行恢复的">面试题：operator state 和 keyed state 两者的区别？最大并行度和这两种 state 的关系？举个例子，当用户停止任务、更新代码逻辑并且改变任务并发度时，两种 state 都是怎样进行恢复的？</span></h2><p><strong>区分 operator-state 和 keyed-state 的方式</strong><br><strong>a. operator-state：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 状态适用算子：所有算子都可以使用 operator-state，没有限制。</span><br><span class="line"><span class="number">2.</span> 如果需要使用 operator-state，需要实现 CheckpointedFunction 或 ListCheckpointed 接口</span><br><span class="line"><span class="number">3.</span> DataStream API 中，operator-state 提供了 ListState、BroadcastState、UnionListState <span class="number">3</span> 种用户接口</span><br><span class="line"><span class="number">4.</span> 状态的存储粒度：以单算子单并行度粒度访问、更新状态</span><br><span class="line"><span class="number">5.</span> 并行度变化时：</span><br><span class="line">      a. ListState：均匀划分到算子的每个 sub-task 上</span><br><span class="line">      b. BroadcastState：每个 sub-task 的广播状态都一样</span><br><span class="line">      c. UnionListState：将原来所有元素合并，合并后的数据每个算子都有一份全量状态数据</span><br></pre></td></tr></table></figure><p><strong>b. keyed-state：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 状态适用算子：keyed-stream 后的算子使用。注意这里很多同学会犯一个错误，就是大家会认为 keyby 后面跟的所有算子都使用的是 keyed-state，但这是错误的 ❌，比如有 keyby.process.flatmap，其中 flatmap 中使用状态的话是 operator-state</span><br><span class="line"> <span class="number">2.</span> 从 context 接口获取具体的 keyed-state</span><br><span class="line"> <span class="number">3.</span> DataStream API 中，keyed-state 提供了 ValueState、MapState、ListState 等用户接口，其中最常用 ValueState、MapState</span><br><span class="line"> <span class="number">4.</span> 状态的存储粒度：以单 key 粒度访问、更新状态。举例，当我们使用 keyby.process，在 process 中处理逻辑时，其实每一次 process 的处理 context 都会对应到一个 key，所以在 process 中的处理都是以 key 为粒度的。这里很多同学会犯一个错  ❌，比如想在 open 方法中访问、更新 state，这是不行的，因为 open 方法在执行时，还没有到正式的数据处理环节，上下文中是没有 key 的。</span><br><span class="line"> <span class="number">5.</span> 并行度变化时：keyed-state 的重新划分是随着 key-group 进行的。其中 key-group 的个数就是最大并发度的个数。其中一个 key-group 处理一段区间 key 的数据，不同 key-group 处理的 key 是完全不同的。当任务并行度变化时，会将 key-group 重新划分到算子不同的 sub-task 上，任务启动后，任务数据在做 keyby 进行数据 shuffle 时，依然能够按照当前数据的 key 发到下游能够处理这个 key 的 key-group 中进行处理。注意：最大并行度和 key-group 的个数绑定，所以如果想恢复任务 state，最大并行度是不能修改的。大家需要提前预估最大并行度个数。</span><br></pre></td></tr></table></figure><h2><span id="面试题你们公司是通过什么样的监控及保障手段来保障实时指标的质量比如事前事中事后是怎么做的">面试题：你们公司是通过什么样的监控及保障手段来保障实时指标的质量？比如事前事中事后是怎么做的？</span></h2><p>上面的保障方案博主总结一个大多数企业都可以【快速构建的简版】，从【事前、事中、事后】x【任务层面、指标层面】进行监控、保障：</p><ol><li><strong>事前：</strong><br>a. 任务层面：根据峰值流量进行压力测试，并且留一定 buffer，用于事前保障任务在资源层面没有瓶颈<br> b. 指标层面：根据业务要求，上线实时指标前进行相同口径的实时、离线指标的验数</li><li><strong>事中：</strong><br>a. 任务层面：贴源层监控 kafka 堆积延迟等报警检测手段，用于事中及时发现问题。比如的普罗米修斯监控 lag 时长<br> b. 指标层面：根据指标特点进行实时指标同环比对比监控、实时离线指标结果对比监控。这里的监控算法可以是阈值、时序异常算法等。检测到波动过大就报警。比如最简单的方式是可以通过将实时结果导入到离线，然后和离线指标对比；也可以构建异构数据源对比工具进行对比</li><li><strong>事后：</strong><br>a. 任务层面：对于可能发生的故障类型，构建用于故障修复、数据回溯的实时任务备用链路<br> b. 指标层面：构建指标修复预案，根据不同的故障类型，判断是否可以使用实时任务进行修复。如果实时无法修复，构建离线恢复链路，以便使用离线数据进行覆写修复</li></ol><h2><span id="面试题在实时数仓的分层设计中你是怎么兼顾时效性和通用性的具体的分层设计方案是怎样的">面试题：在实时数仓的分层设计中，你是怎么兼顾时效性和通用性的？具体的分层设计方案是怎样的？</span></h2><p>实时数仓相比离线数仓的特点其实就两个字：实时。具体体现在：</p><ol><li>产出速度比离线数仓快，常常为分钟级别产出数据。</li><li>实时数据时间粒度比离线数仓细，dws、ads 聚合粒度通常为分钟级别。</li></ol><p>那么我们再来看看，如果按照离线数仓分层方案去设计实时数仓分层会有什么问题，其实就对应上面两个特点：</p><ol><li>分层太多，产出速度必然减慢。举例：ods-&gt;dwd-&gt;dws（1min 窗口）-&gt;dws（1min 窗口）-&gt;ads（1min 窗口）。这样 ads 层数据产出延迟肯定在 3 min 以上。</li><li>分层太多，实时数据粒度又细，多种粒度的 dws 的数据量基本一样，不如不建。举例：ods-&gt;dwd-&gt;dws1(uid,page,style,1min粒度)-&gt;dws2(uid,page,1min粒度)-&gt;ads(uid 1min粒度)，因为一个用户在 1min 内发生的行为很少，你可能会发现 dws1,dws2,ads 的 qps 都差不多；而离线通常都是 1天的粒度，所以分这几层的数据量是会有骤减的。</li></ol><p>综上所述，实时数仓分层不宜特别多。建议：</p><p>如果数据量不大，建立 ods-&gt;dwd 就足够使用。<br>如果数据量大，可以根据 dws 聚合后，数据量缩减的实际效果来评估是否需要建立 dws。</p><h2><span id="面试题你们公司的实时数仓用到的维表都有哪些类型分别是通过什么样的方式构建的">面试题：你们公司的实时数仓用到的维表都有哪些类型？分别是通过什么样的方式构建的？</span></h2><p>常用的维表一般分为 2 种：</p><ol><li>t-1 维表：<br> a.应用场景：比如画像类维表，一般画像类基本很少发生变化，比如性别、年龄区间等，所以这类在实时数仓中常常是访问 t-1 维表数据的就足够使用<br> b.常用存储介质：redis，hbase，mysql<br> c.维表构建方式：一般原始数据都存储在 hive 中，可以使用同步工具（比如 Apache Seatunnel）定时调度（比如 Apache Dolphinscheduler）将 hive 中的数据导入 redis，hbase，mysql 中</li><li>实时维表：<br> a.应用场景：维度实时发生更新的，这类在实时数仓中需要访问最新的维度数据<br> b.常用存储介质：redis，hbase，mysql<br> c.维表构建方式：这种实时的维度数据一般是存储在原始日志中，比如常见存储在 Kafka 这类消息队列中，可以通过 Flink 消费原始日志，然后实时构建维度数据写入 redis，hbase，mysql 中</li></ol><h2><span id="面试题你是怎么避免或者缓解数据倾斜的">面试题：你是怎么避免或者缓解数据倾斜的？</span></h2><ol><li><p>业务数据本身的特点导致倾斜：<br>场景：拿计算直播间的同时在线观看用户数来说，大 v 直播间的人数会比小直播间的任务多几个量级，因此如果计算一个直播间的数据需要注意这种业务数据倾斜的特点<br> 解决方案：计算这种数据时，我们可以先按照直播间 id 将数据进行打散，如下 sql 案例所示，内层打散，外层合并：<br> select id, sum(bucket_uv) as uv<br> from (select id, count(distinct uid) as bucket_uv from source group by id, mod(uid, 1000))<br> group by id。datastream 也是相同的解决方案</p></li><li><p>数据任务处理时代码处理逻辑导致倾斜：<br>场景：比如有时候虽然用户已经按照 key 进行分桶计算，但是【最大并发度】设置为 150，【并发度】设置为 100，会导致 keygroup 在 sub-task 的划分不均匀（其中 50 个 sub-task 的 keygroup 为 2 个，剩下的 50 个 sub-task 为 1 个）导致数据倾斜。<br> 解决方案：设置合理的【最大并发度】【并发度】，【最大并发度】最好为【并发度】的倍数关系，比如【最大并发度】1024，【并发度】512</p></li><li><p>我已经设置【数据分桶打散】+【最大并发为并发 n 倍】，为啥还出现数据倾斜？<br>场景：你的【数据分桶】和【最大并发数】之间可能是不均匀的。因为 Flink 会将 keyby 的 key 拿到之后计算 hash 值，然后根据 hash 值去决定发送到那个 sub-task 去计算。这是就有可能出现你的【数据分桶】key 经过 hash 计算完成之后，并不能均匀的发到所有的 keygroup 中。比如【最大并发数】4096，【数据分桶】key 只有 1024 个，那么这些数据必然最多只能到 1024 个 keygroup 中，有可能还少于 1024，从而导致剩下的 3072 个 keygroup 没有任何数据<br> 解决方案：其实可以利用【数据分桶】key 和【最大并行度】两个参数，在 keyby 中实现和 Flink key hash 选择 keygroup 的算法一致的算法，在【最大并发数】4096，【数据分桶】为 4096 时，做到分桶值为 1 的数据一定会发送到 keygroup1 中，2 一定会发到 keygroup2 中，从而缓解数据倾斜。</p></li></ol><h2><span id="面试题你们公司在遇到大促时是怎么估算-flink-任务资源的有没有成体系的方案flink任务压测又是怎么做的有没有工具支持">面试题：你们公司在遇到大促时是怎么估算 flink 任务资源的，有没有成体系的方案？flink任务压测又是怎么做的，有没有工具支持？</span></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">这有一个背景：</span><br><span class="line"></span><br><span class="line">1. 大促一般资源都需要提前申请，在任务开发之前基本就要确定大概需要多少了</span><br><span class="line">2. 大促有很多专门针对大促的新任务，而并不只是旧任务</span><br></pre></td></tr></table></figure><p>其实现在很多公司的现状就是：拍脑袋，能多要资源就多要。但是其实如果我们能对资源预估有一个成体系、有数据支撑的方案在要资源时是更有说服力的。</p><p>一般有 3 种思路去成体系预估资源：</p><ol><li><p>目前在线任务的资源占用情况评估：<br> a. 适用场景：目前存量（在线）任务要在大促中使用时的场景。<br> b. 举例：比如历史大促时，流量是 n，资源会用 x，今年预估流量最大是 2n，则资源可以认为也是 2x 就足够。<br> c. 预估的准确率：高</p></li><li><p>按照目前很多云厂商提供的标准评估：<br> a. 适用场景：大促新开发的任务，并且没有之前的经验可以借鉴的场景。<br> b. 举例：比如我们的 dwd 任务（简单业务），一般就 1CU 处理 1w qps 数据，复杂的清洗可能流量会讲到更低；dws，ads 任务（复杂任务）一般就 1CU 处理 5k qps 数据；涉及到访问外部接口时，则要使用访问外部接口的 qps / 接口请求时延评估。<br> c. 预估准确率：中。这些标准都是云厂商经过无数的测试、压测得到的，大家可以参考。</p></li><li><p>新模块、新任务评估：<br> a. 适用场景：大促新开发的任务，之前的经验可以借鉴的场景。<br> b. 举例：比如按照历史大促情况来看，一个模块、一类任务的处理能力。比如分模块来说，历史经验 1 个模块基本需要 n cu（云厂商 1cu = 1core 4GB），当前有 5 个模块，则大致需要 5n cu；又比如分任务类型来说，历史经验 dwd 可以达到 1CU x qps，dws、ads 可以到达 1CU y qps，根据需求来看总共 3 dwd，每个 dwd 2x qps，5 ads，每个 ads 3y qps，则 dwd 总共需要 6CU，ads 总共需要 15CU<br> c. 预估准确率：高。这个一般都是自己公司内部的历史经验，所以可参考性更高。</p></li></ol><h2><span id="面试题flink-配置-state-ttl-时都有哪些配置项每种配置项的作用flink-state-ttl-是怎么做到数据过期的">面试题：Flink 配置 State TTL 时都有哪些配置项？每种配置项的作用？Flink State TTL 是怎么做到数据过期的？</span></h2><p>a.State TTL 时都有哪些配置项？</p><p> 这个问题的答案就如下图所示：</p><p> 其实和 redis 的过期策略类似，举例：</p><ol><li>支持 ttl</li><li>支持 ttl 更新类型</li><li>过期数据的可见性</li><li>过期时间语义：目前只支持处理时间</li><li>具体过期实现：lazy，后台线程</li></ol><p>b.Flink State TTL 是怎么做到数据过期的？</p><p> 首先我们来想想，要做到 TTL 的话，要具备什么条件呢？想想 Redis 的 TTL 设置，如果我们要设置 TTL 则必然需要给一条数据给一个时间戳，只有这样才能判断这条数据是否过期了。</p><p> 在 Flink 中设置 State TTL，就会有这样一个时间戳，具体实现时，Flink 会把时间戳字段和具体数据字段存储作为同级存储到 State 中。举个例子，我要将一个 String 存储到 State 中时，没有设置 State TTL 时，则直接将 String 存储在 State 中；如果设置 State TTL 时，则 Flink 会将 &lt;String, Long&gt; 存储在 State 中，其中 Long 为时间戳。</p><p> 接下来以 FileSystem 状态后端下的 MapState 作为案例来说：<br> 如果没有设置 State TTL，则生产的 MapState 的字段类型如下：<br> 可以看到生成的就是 HeapMapState 实例</p><p> 如果设置了 State TTL，则生成的 MapState 的字段类型如下：<br> 可以看到使用到了装饰器的设计模式生成是 TtlMapState</p><p> 因此这里至少我们可以得到一个结论就是，如果任务设置了 State TTL 和不设置 State TTL 的状态是不兼容的。这里大家在使用时一定要注意。</p><p> 然后我们再来看看 State 过期的几种策略，先总结一下：</p><ol><li>lazy 删除策略：就是在访问 State 的时候根据时间戳判断是否过期，如果过期则主动删除 State 数据</li><li>full snapshot cleanup 删除策略：从状态恢复（checkpoint、savepoint）的时候采取做过期删除，但是不支持 rocksdb 增量 ck。</li><li>incremental cleanup 删除策略：访问 state 的时候，主动去遍历一些 state 数据判断是否过期，如果过期则主动删除 State 数据。<br>a. 如果没有 state 访问，也没有处理数据，则不会清理过期数据。<br>b. 增量清理会增加数据处理的耗时。<br>c. 现在仅 Heap state backend 支持增量清除机制。在 RocksDB state backend 上启用该特性无效。</li><li>rocksdb compaction cleanup 删除策略：rockdb 做 compaction 的时候遍历进行删除。仅仅支持 rocksbd。<br>a. 压缩时调用 TTL 过滤器会降低速度。TTL 过滤器需要解析上次访问的时间戳，并对每个将参与压缩的状态进行是否过期检查。 对于集合型状态类型（比如 list 和 map），会对集合中每个元素进行检查。<br>b. 对于元素序列化后长度不固定的列表状态，TTL 过滤器需要在每次 JNI 调用过程中，额外调用 Flink 的 java 序列化器， 从而确定下一个未过期数据的位置。</li></ol><h2><span id="面试题我们都知道-flink-任务-failover-之后可能会重复写出数据到-sink-中你们公司是怎么做到端对端-exactly-once-的">面试题：我们都知道 flink 任务 failover 之后，可能会重复写出数据到 sink 中，你们公司是怎么做到端对端 exactly-once 的？</span></h2><p>目前有两种常用方法：</p><ol><li>sink 两阶段：由于两阶段提交是随着 checkpoint 进行的，所以会碰到产出数据延迟等问题，目前用的比较少</li><li>sink 支持幂等：举例：sink mysql 按照 key 更新数据，sink druid 选用 longmax，sink redis 按照 key 重复 set</li></ol><p><strong>收录文章地址</strong>:</p><p><a href="https://mp.weixin.qq.com/s/meKL9R0zlkLh-OAWyfLZ1g">https://mp.weixin.qq.com/s/meKL9R0zlkLh-OAWyfLZ1g</a></p>]]></content>
    
    
    <summary type="html">&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;文章收录的是公众号: 大数据公羊说 的 面试题总结.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;注意: 黑猫旁边就是目录&lt;span class=&quot;operator&quot;&gt;~&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;本文目录概览&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.xubatian.cn/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%85%AC%E7%BE%8A%E8%AF%B4%E4%B9%8BFlink%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%E6%94%B6%E5%BD%95/#%E9%9D%A2%E8%AF%95%E9%A2%98%E4%BD%A0%E5%9C%A8%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E4%B8%AD%E7%A2%B0%E5%88%B0%E5%93%AA%E4%BA%9B%E9%97%AE%E9%A2%98%E4%BC%9A%E5%AF%BC%E8%87%B4%E5%8F%8D%E5%8E%8B&quot;&gt;面试题：你在生产环境中碰到哪些问题会导致反压？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.xubatian.cn/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%85%AC%E7%BE%8A%E8%AF%B4%E4%B9%8BFlink%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%E6%94%B6%E5%BD%95/#%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8D%E5%8E%8B%E6%9C%89%E5%93%AA%E4%BA%9B%E5%8D%B1%E5%AE%B3&quot;&gt;面试题：反压有哪些危害？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.xubatian.cn/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%85%AC%E7%BE%8A%E8%AF%B4%E4%B9%8BFlink%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%E6%94%B6%E5%BD%95/#%E9%9D%A2%E8%AF%95%E9%A2%98-%E7%8A%B6%E6%80%81-%E7%8A%B6%E6%80%81%E5%90%8E%E7%AB%AF-checkpoint-%E4%B8%89%E8%80%85%E4%B9%8B%E9%97%B4%E7%9A%84%E5%8C%BA%E5%88%AB%E5%8F%8A%E5%85%B3%E7%B3%BB&quot;&gt;面试题: 状态、状态后端、Checkpoint 三者之间的区别及关系？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.xubatian.cn/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%85%AC%E7%BE%8A%E8%AF%B4%E4%B9%8BFlink%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%E6%94%B6%E5%BD%95/#%E9%9D%A2%E8%AF%95%E9%A2%98-%E6%8A%8A%E7%8A%B6%E6%80%81%E5%90%8E%E7%AB%AF%E4%BB%8E-filesystem-%E5%8F%98%E4%B8%BA-rocksdb-%E5%90%8Eflink-%E4%BB%BB%E5%8A%A1%E7%8A%B6%E6%80%81%E5%AD%98%E5%82%A8%E4%BC%9A%E5%8F%91%E7%94%9F%E9%82%A3%E4%BA%9B%E5%8F%98%E5%8C%96&quot;&gt;面试题 : 把状态后端从 FileSystem 变为 RocksDB 后，Flink 任务状态存储会发生那些变化？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.xubatian.cn/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%85%AC%E7%BE%8A%E8%AF%B4%E4%B9%8BFlink%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%E6%94%B6%E5%BD%95/#%E9%9D%A2%E8%AF%95%E9%A2%98-%E4%BB%80%E4%B9%88%E6%A0%B7%E7%9A%84%E4%B8%9A%E5%8A%A1%E5%9C%BA%E6%99%AF%E4%BD%A0%E4%BC%9A%E9%80%89%E6%8B%A9-filesystem%E4%BB%80%E4%B9%88%E6%A0%B7%E7%9A%84%E4%B8%9A%E5%8A%A1%E5%9C%BA%E6%99%AF%E4%BD%A0%E4%BC%9A%E9%80%89-rocksdb-%E7%8A%B6%E6%80%81%E5%90%8E%E7%AB%AF&quot;&gt;面试题: 什么样的业务场景你会选择 filesystem，什么样的业务场景你会选 rocksdb 状态后端？&lt;/a&gt;</summary>
    
    
    
    <category term="大数据" scheme="http://xubatian.cn/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
    <category term="flink" scheme="http://xubatian.cn/tags/flink/"/>
    
  </entry>
  
  <entry>
    <title>hive常用函数之分区表和分桶表</title>
    <link href="http://xubatian.cn/hive%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0%E4%B9%8B%E5%88%86%E5%8C%BA%E8%A1%A8%E5%92%8C%E5%88%86%E6%A1%B6%E8%A1%A8/"/>
    <id>http://xubatian.cn/hive%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0%E4%B9%8B%E5%88%86%E5%8C%BA%E8%A1%A8%E5%92%8C%E5%88%86%E6%A1%B6%E8%A1%A8/</id>
    <published>2022-02-28T15:19:57.000Z</published>
    <updated>2022-02-28T15:57:34.254Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="分区表">分区表</span></h1><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220228232524.png"></p><p>一般生产当中会有一级分区和二级分区. 如果数据量比较大,会有二级分区. 比如按照每天的每个小时进行分区.    分区的原因就是数据量太大了. 分区指的是reduce里面. 而map里面叫分片.  </p><p><strong>map里面的切片和reduce里面的分区有本质意义上的区别吗?</strong></p><p>没有区别, 你map端分片.其实也是提高并行度. 其实都是将数据分开,然后大家一起去计算.</p><p>hive里面有张表叫做分区表. 表里面放数据. 这张表每天一个分区. 就是每天一个目录. 以后查数据的时候,直接用where筛选目录.即,查询的sql中写上分区信息. 这样我就能够避免全表扫描.</p><span id="more"></span><h3><span id="分区表基本操作"><strong>分区表基本操作</strong></span></h3><h4><span id="1引入分区表需要根据日期对日志进行管理-通过部门信息模拟"><strong>1）引入分区表（需要根据日期对日志进行管理, 通过部门信息模拟）</strong></span></h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dept_20200401.log</span><br><span class="line">dept_20200402.log</span><br><span class="line">dept_20200403.log</span><br></pre></td></tr></table></figure><h4><span id="2创建分区表语法"><strong>2）创建分区表语法</strong></span></h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">hive (<span class="keyword">default</span>)<span class="operator">&gt;</span> <span class="keyword">create</span> <span class="keyword">table</span> dept_partition(</span><br><span class="line">deptno <span class="type">int</span>, </span><br><span class="line">dname string, </span><br><span class="line">loc string</span><br><span class="line">)</span><br><span class="line">partitioned <span class="keyword">by</span> (<span class="keyword">day</span> string)</span><br><span class="line"><span class="type">row</span> format delimited fields terminated <span class="keyword">by</span> <span class="string">&#x27;\t&#x27;</span>;</span><br></pre></td></tr></table></figure><p>注意：分区字段不能是表中已经存在的数据，可以将分区字段看作表的伪列。</p><h4><span id="3加载数据到分区表中"><strong>3）加载数据到分区表中</strong></span></h4><p>（1）数据准备</p><p>dept_20200401.log</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span>ACCOUNTING<span class="number">1700</span></span><br><span class="line"><span class="number">20</span>RESEARCH<span class="number">1800</span></span><br></pre></td></tr></table></figure><p>dept_20200402.log</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">30</span>SALES<span class="number">1900</span></span><br><span class="line"><span class="number">40</span>OPERATIONS<span class="number">1700</span></span><br></pre></td></tr></table></figure><p>dept_20200403.log</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">50</span>TEST<span class="number">2000</span></span><br><span class="line"><span class="number">60</span>DEV<span class="number">1900</span></span><br></pre></td></tr></table></figure><p>（2）加载数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hive (<span class="keyword">default</span>)<span class="operator">&gt;</span> load data <span class="keyword">local</span> inpath <span class="string">&#x27;/opt/module/hive/datas/dept_20200401.log&#x27;</span> <span class="keyword">into</span> <span class="keyword">table</span> dept_partition <span class="keyword">partition</span>(<span class="keyword">day</span><span class="operator">=</span><span class="string">&#x27;20200401&#x27;</span>);</span><br><span class="line">hive (<span class="keyword">default</span>)<span class="operator">&gt;</span> load data <span class="keyword">local</span> inpath <span class="string">&#x27;/opt/module/hive/datas/dept_20200402.log&#x27;</span> <span class="keyword">into</span> <span class="keyword">table</span> dept_partition <span class="keyword">partition</span>(<span class="keyword">day</span><span class="operator">=</span><span class="string">&#x27;20200402&#x27;</span>);</span><br><span class="line">hive (<span class="keyword">default</span>)<span class="operator">&gt;</span> load data <span class="keyword">local</span> inpath <span class="string">&#x27;/opt/module/hive/datas/dept_20200403.log&#x27;</span> <span class="keyword">into</span> <span class="keyword">table</span> dept_partition <span class="keyword">partition</span>(<span class="keyword">day</span><span class="operator">=</span><span class="string">&#x27;20200403&#x27;</span>);</span><br></pre></td></tr></table></figure><p>注意：分区表加载数据时，必须指定分区</p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220228234117.png"></p><h4><span id="4查询分区表中数据"><strong>4）查询分区表中数据</strong></span></h4><p>单分区查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hive (<span class="keyword">default</span>)<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> dept_partition <span class="keyword">where</span> <span class="keyword">day</span><span class="operator">=</span><span class="string">&#x27;20200401&#x27;</span>;</span><br></pre></td></tr></table></figure><p>多分区联合查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">hive (<span class="keyword">default</span>)<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> dept_partition <span class="keyword">where</span> <span class="keyword">day</span><span class="operator">=</span><span class="string">&#x27;20200401&#x27;</span></span><br><span class="line">              <span class="keyword">union</span></span><br><span class="line">              <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> dept_partition <span class="keyword">where</span> <span class="keyword">day</span><span class="operator">=</span><span class="string">&#x27;20200402&#x27;</span></span><br><span class="line">              <span class="keyword">union</span></span><br><span class="line">              <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> dept_partition <span class="keyword">where</span> <span class="keyword">day</span><span class="operator">=</span><span class="string">&#x27;20200403&#x27;</span>;</span><br><span class="line">hive (<span class="keyword">default</span>)<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> dept_partition <span class="keyword">where</span> <span class="keyword">day</span><span class="operator">=</span><span class="string">&#x27;20200401&#x27;</span> <span class="keyword">or</span></span><br><span class="line">                <span class="keyword">day</span><span class="operator">=</span><span class="string">&#x27;20200402&#x27;</span> <span class="keyword">or</span> <span class="keyword">day</span><span class="operator">=</span><span class="string">&#x27;20200403&#x27;</span> ;</span><br></pre></td></tr></table></figure><h4><span id="5增加分区">5）增加分区</span></h4><p>创建单个分区</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hive (<span class="keyword">default</span>)<span class="operator">&gt;</span> <span class="keyword">alter</span> <span class="keyword">table</span> dept_partition <span class="keyword">add</span> <span class="keyword">partition</span>(<span class="keyword">day</span><span class="operator">=</span><span class="string">&#x27;20200404&#x27;</span>) ;</span><br></pre></td></tr></table></figure><p>同时创建多个分区</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hive (<span class="keyword">default</span>)<span class="operator">&gt;</span> <span class="keyword">alter</span> <span class="keyword">table</span> dept_partition <span class="keyword">add</span> <span class="keyword">partition</span>(<span class="keyword">day</span><span class="operator">=</span><span class="string">&#x27;20200405&#x27;</span>) <span class="keyword">partition</span>(<span class="keyword">day</span><span class="operator">=</span><span class="string">&#x27;20200406&#x27;</span>);</span><br></pre></td></tr></table></figure><h4><span id="6删除分区">6）删除分区</span></h4><p>删除单个分区</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hive (<span class="keyword">default</span>)<span class="operator">&gt;</span> <span class="keyword">alter</span> <span class="keyword">table</span> dept_partition <span class="keyword">drop</span> <span class="keyword">partition</span> (<span class="keyword">day</span><span class="operator">=</span><span class="string">&#x27;20200406&#x27;</span>);</span><br></pre></td></tr></table></figure><p>同时删除多个分区</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hive (<span class="keyword">default</span>)<span class="operator">&gt;</span> <span class="keyword">alter</span> <span class="keyword">table</span> dept_partition <span class="keyword">drop</span> <span class="keyword">partition</span> (<span class="keyword">day</span><span class="operator">=</span><span class="string">&#x27;20200404&#x27;</span>), <span class="keyword">partition</span>(<span class="keyword">day</span><span class="operator">=</span><span class="string">&#x27;20200405&#x27;</span>);</span><br></pre></td></tr></table></figure><h4><span id="7-查看分区表有多少分区">7) 查看分区表有多少分区</span></h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hive<span class="operator">&gt;</span> <span class="keyword">show</span> partitions dept_partition;</span><br></pre></td></tr></table></figure><h4><span id="8查看分区表结构">8）查看分区表结构</span></h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hive<span class="operator">&gt;</span> <span class="keyword">desc</span> formatted dept_partition;</span><br><span class="line"></span><br><span class="line"># <span class="keyword">Partition</span> Information          </span><br><span class="line"># col_name              data_type               comment             </span><br><span class="line"><span class="keyword">month</span>                   string    </span><br></pre></td></tr></table></figure><h3><span id="二级分区">二级分区</span></h3><p>思考: 如何一天的日志数据量也很大，如何再将数据拆分?</p><h4><span id="1创建二级分区表">1）创建二级分区表</span></h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hive (<span class="keyword">default</span>)<span class="operator">&gt;</span> <span class="keyword">create</span> <span class="keyword">table</span> dept_partition2(</span><br><span class="line">               deptno <span class="type">int</span>, dname string, loc string</span><br><span class="line">               )</span><br><span class="line">               partitioned <span class="keyword">by</span> (<span class="keyword">day</span> string, <span class="keyword">hour</span> string)</span><br><span class="line">               <span class="type">row</span> format delimited fields terminated <span class="keyword">by</span> <span class="string">&#x27;\t&#x27;</span>;</span><br></pre></td></tr></table></figure><h4><span id="2正常的加载数据">2）正常的加载数据</span></h4><h5><span id="1加载数据到二级分区表中">（1）加载数据到二级分区表中</span></h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hive (<span class="keyword">default</span>)<span class="operator">&gt;</span> load data <span class="keyword">local</span> inpath <span class="string">&#x27;/opt/module/hive/datas/dept_20200401.log&#x27;</span> <span class="keyword">into</span> <span class="keyword">table</span></span><br><span class="line">dept_partition2 <span class="keyword">partition</span>(<span class="keyword">day</span><span class="operator">=</span><span class="string">&#x27;20200401&#x27;</span>, <span class="keyword">hour</span><span class="operator">=</span><span class="string">&#x27;12&#x27;</span>);</span><br></pre></td></tr></table></figure><h5><span id="2查询分区数据">（2）查询分区数据</span></h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hive (<span class="keyword">default</span>)<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> dept_partition2 <span class="keyword">where</span> <span class="keyword">day</span><span class="operator">=</span><span class="string">&#x27;20200401&#x27;</span> <span class="keyword">and</span> <span class="keyword">hour</span><span class="operator">=</span><span class="string">&#x27;12&#x27;</span>;</span><br></pre></td></tr></table></figure><h4><span id="3把数据直接上传到分区目录上让分区表和数据产生关联的三种方式">3）把数据直接上传到分区目录上，让分区表和数据产生关联的三种方式</span></h4><h5><span id="1方式一上传数据后修复">（1）方式一：上传数据后修复</span></h5><p>上传数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hive (<span class="keyword">default</span>)<span class="operator">&gt;</span> dfs <span class="operator">-</span>mkdir <span class="operator">-</span>p</span><br><span class="line"> <span class="operator">/</span><span class="keyword">user</span><span class="operator">/</span>hive<span class="operator">/</span>warehouse<span class="operator">/</span>mydb.db<span class="operator">/</span>dept_partition2<span class="operator">/</span><span class="keyword">day</span><span class="operator">=</span><span class="number">20200401</span><span class="operator">/</span><span class="keyword">hour</span><span class="operator">=</span><span class="number">13</span>;</span><br><span class="line">hive (<span class="keyword">default</span>)<span class="operator">&gt;</span> dfs <span class="operator">-</span>put <span class="operator">/</span>opt<span class="operator">/</span><span class="keyword">module</span><span class="operator">/</span>datas<span class="operator">/</span>dept_20200401.log  <span class="operator">/</span><span class="keyword">user</span><span class="operator">/</span>hive<span class="operator">/</span>warehouse<span class="operator">/</span>mydb.db<span class="operator">/</span>dept_partition2<span class="operator">/</span><span class="keyword">day</span><span class="operator">=</span><span class="number">20200401</span><span class="operator">/</span><span class="keyword">hour</span><span class="operator">=</span><span class="number">13</span>;</span><br></pre></td></tr></table></figure><p>查询数据（查询不到刚上传的数据）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hive (<span class="keyword">default</span>)<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> dept_partition2 <span class="keyword">where</span> <span class="keyword">day</span><span class="operator">=</span><span class="string">&#x27;20200401&#x27;</span> <span class="keyword">and</span> <span class="keyword">hour</span><span class="operator">=</span><span class="string">&#x27;13&#x27;</span>;</span><br></pre></td></tr></table></figure><p>执行修复命令</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hive<span class="operator">&gt;</span> msck repair <span class="keyword">table</span> dept_partition2;</span><br></pre></td></tr></table></figure><p>再次查询数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hive (<span class="keyword">default</span>)<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> dept_partition2 <span class="keyword">where</span> <span class="keyword">day</span><span class="operator">=</span><span class="string">&#x27;20200401&#x27;</span> <span class="keyword">and</span> <span class="keyword">hour</span><span class="operator">=</span><span class="string">&#x27;13&#x27;</span>;</span><br></pre></td></tr></table></figure><h5><span id="2方式二上传数据后添加分区">（2）方式二：上传数据后添加分区</span></h5><p>上传数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hive (<span class="keyword">default</span>)<span class="operator">&gt;</span> dfs <span class="operator">-</span>mkdir <span class="operator">-</span>p</span><br><span class="line"> <span class="operator">/</span><span class="keyword">user</span><span class="operator">/</span>hive<span class="operator">/</span>warehouse<span class="operator">/</span>mydb.db<span class="operator">/</span>dept_partition2<span class="operator">/</span><span class="keyword">day</span><span class="operator">=</span><span class="number">20200401</span><span class="operator">/</span><span class="keyword">hour</span><span class="operator">=</span><span class="number">14</span>;</span><br><span class="line">hive (<span class="keyword">default</span>)<span class="operator">&gt;</span> dfs <span class="operator">-</span>put <span class="operator">/</span>opt<span class="operator">/</span><span class="keyword">module</span><span class="operator">/</span>hive<span class="operator">/</span>datas<span class="operator">/</span>dept_20200401.log  <span class="operator">/</span><span class="keyword">user</span><span class="operator">/</span>hive<span class="operator">/</span>warehouse<span class="operator">/</span>mydb.db<span class="operator">/</span>dept_partition2<span class="operator">/</span><span class="keyword">day</span><span class="operator">=</span><span class="number">20200401</span><span class="operator">/</span><span class="keyword">hour</span><span class="operator">=</span><span class="number">14</span>;</span><br></pre></td></tr></table></figure><p>执行添加分区</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hive (<span class="keyword">default</span>)<span class="operator">&gt;</span> <span class="keyword">alter</span> <span class="keyword">table</span> dept_partition2 <span class="keyword">add</span> <span class="keyword">partition</span>(<span class="keyword">day</span><span class="operator">=</span><span class="string">&#x27;20200401&#x27;</span>,<span class="keyword">hour</span><span class="operator">=</span><span class="string">&#x27;14&#x27;</span>);</span><br></pre></td></tr></table></figure><p>查询数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hive (<span class="keyword">default</span>)<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> dept_partition2 <span class="keyword">where</span> <span class="keyword">day</span><span class="operator">=</span><span class="string">&#x27;20200401&#x27;</span> <span class="keyword">and</span> <span class="keyword">hour</span><span class="operator">=</span><span class="string">&#x27;14&#x27;</span>;</span><br></pre></td></tr></table></figure><h5><span id="3方式三创建文件夹后load数据到分区">（3）方式三：创建文件夹后load数据到分区</span></h5><p>创建目录</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hive (<span class="keyword">default</span>)<span class="operator">&gt;</span> dfs <span class="operator">-</span>mkdir <span class="operator">-</span>p</span><br><span class="line"> <span class="operator">/</span><span class="keyword">user</span><span class="operator">/</span>hive<span class="operator">/</span>warehouse<span class="operator">/</span>mydb.db<span class="operator">/</span>dept_partition2<span class="operator">/</span><span class="keyword">day</span><span class="operator">=</span><span class="number">20200401</span><span class="operator">/</span><span class="keyword">hour</span><span class="operator">=</span><span class="number">15</span>;</span><br></pre></td></tr></table></figure><p>上传数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hive (<span class="keyword">default</span>)<span class="operator">&gt;</span> load data <span class="keyword">local</span> inpath <span class="string">&#x27;/opt/module/hive/datas/dept_20200401.log&#x27;</span> <span class="keyword">into</span> <span class="keyword">table</span></span><br><span class="line"> dept_partition2 <span class="keyword">partition</span>(<span class="keyword">day</span><span class="operator">=</span><span class="string">&#x27;20200401&#x27;</span>,<span class="keyword">hour</span><span class="operator">=</span><span class="string">&#x27;15&#x27;</span>);</span><br></pre></td></tr></table></figure><p>查询数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hive (<span class="keyword">default</span>)<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> dept_partition2 <span class="keyword">where</span> <span class="keyword">day</span><span class="operator">=</span><span class="string">&#x27;20200401&#x27;</span> <span class="keyword">and</span> <span class="keyword">hour</span><span class="operator">=</span><span class="string">&#x27;15&#x27;</span>;</span><br></pre></td></tr></table></figure><h3><span id="动态分区调整">动态分区调整</span></h3><p>​        关系型数据库中，对分区表Insert数据时候，数据库自动会根据分区字段的值，将数据插入到相应的分区中，Hive中也提供了类似的机制，即动态分区(Dynamic Partition)，只不过，使用Hive的动态分区，需要进行相应的配置。</p><h4><span id="1开启动态分区参数设置">1）开启动态分区参数设置</span></h4><h5><span id="1开启动态分区功能默认true开启">（1）开启动态分区功能（默认true，开启）</span></h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hive.exec.dynamic.partition<span class="operator">=</span><span class="literal">true</span></span><br></pre></td></tr></table></figure><h5><span id="2设置为非严格模式动态分区的模式默认strict表示必须指定至少一个分区为静态分区nonstrict模式表示允许所有的分区字段都可以使用动态分区">（2）设置为非严格模式（动态分区的模式，默认strict，表示必须指定至少一个分区为静态分区，nonstrict模式表示允许所有的分区字段都可以使用动态分区。）</span></h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hive.exec.dynamic.partition.mode<span class="operator">=</span>nonstrict</span><br></pre></td></tr></table></figure><h5><span id="3在所有执行mr的节点上最大一共可以创建多少个动态分区-默认1000">（3）在所有执行MR的节点上，最大一共可以创建多少个动态分区。默认1000</span></h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hive.exec.max.dynamic.partitions<span class="operator">=</span><span class="number">1000</span></span><br></pre></td></tr></table></figure><h5><span id="4在每个执行mr的节点上最大可以创建多少个动态分区-该参数需要根据实际的数据来设定-比如源数据中包含了一年的数据即day字段有365个值那么该参数就需要设置成大于365如果使用默认值100则会报错">（4）在每个执行MR的节点上，最大可以创建多少个动态分区。该参数需要根据实际的数据来设定。比如：源数据中包含了一年的数据，即day字段有365个值，那么该参数就需要设置成大于365，如果使用默认值100，则会报错。</span></h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hive.exec.max.dynamic.partitions.pernode<span class="operator">=</span><span class="number">100</span></span><br></pre></td></tr></table></figure><h5><span id="5整个mr-job中最大可以创建多少个hdfs文件-默认100000">（5）整个MR Job中，最大可以创建多少个HDFS文件。默认100000</span></h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hive.exec.max.created.files<span class="operator">=</span><span class="number">100000</span></span><br></pre></td></tr></table></figure><h5><span id="6当有空分区生成时是否抛出异常-一般不需要设置-默认false">（6）当有空分区生成时，是否抛出异常。一般不需要设置。默认false</span></h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hive.error.on.empty.partition<span class="operator">=</span><span class="literal">false</span></span><br></pre></td></tr></table></figure><h4><span id="2案例实操">2）案例实操</span></h4><p>需求：将dept表中的数据按照地区（loc字段），插入到目标表dept_partition的相应分区中。</p><h5><span id="1创建目标分区表">（1）创建目标分区表</span></h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hive (<span class="keyword">default</span>)<span class="operator">&gt;</span> <span class="keyword">create</span> <span class="keyword">table</span> dept_partition_dy(id <span class="type">int</span>, name string) partitioned <span class="keyword">by</span> (loc <span class="type">int</span>) <span class="type">row</span> format delimited fields terminated <span class="keyword">by</span> <span class="string">&#x27;\t&#x27;</span>;</span><br></pre></td></tr></table></figure><h5><span id="2设置动态分区">（2）设置动态分区</span></h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> hive.exec.dynamic.partition.mode <span class="operator">=</span> nonstrict;</span><br><span class="line">hive (<span class="keyword">default</span>)<span class="operator">&gt;</span> <span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">table</span> dept_partition_dy <span class="keyword">partition</span>(loc) <span class="keyword">select</span> deptno, dname, loc <span class="keyword">from</span> dept;</span><br></pre></td></tr></table></figure><h5><span id="3查看目标分区表的分区情况">（3）查看目标分区表的分区情况</span></h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hive (<span class="keyword">default</span>)<span class="operator">&gt;</span> <span class="keyword">show</span> partitions dept_partition;</span><br></pre></td></tr></table></figure><p>思考：目标分区表是如何匹配到分区字段的？</p><h1><span id="分桶表">分桶表</span></h1><p>​        分区提供一个隔离数据和优化查询的便利方式。不过，<strong>并非所有的数据集都可形成合理的分区</strong>。<strong>对于一张表或者分区，Hive 可以进一步组织成桶，也就是更为细粒度的数据范围划分。</strong></p><p>​        <strong>分桶是将数据集分解成更容易管理的若干部分的另一个技术。</strong></p><p>​        <strong>分区针对的是数据的存储路径；分桶针对的是数据文件。</strong></p><h2><span id="1先创建分桶表">1）先创建分桶表</span></h2><h3><span id="1数据准备">（1）数据准备</span></h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1001</span>ss1</span><br><span class="line"><span class="number">1002</span>ss2</span><br><span class="line"><span class="number">1003</span>ss3</span><br><span class="line"><span class="number">1004</span>ss4</span><br><span class="line"><span class="number">1005</span>ss5</span><br><span class="line"><span class="number">1006</span>ss6</span><br><span class="line"><span class="number">1007</span>ss7</span><br><span class="line"><span class="number">1008</span>ss8</span><br><span class="line"><span class="number">1009</span>ss9</span><br><span class="line"><span class="number">1010</span>ss10</span><br><span class="line"><span class="number">1011</span>ss11</span><br><span class="line"><span class="number">1012</span>ss12</span><br><span class="line"><span class="number">1013</span>ss13</span><br><span class="line"><span class="number">1014</span>ss14</span><br><span class="line"><span class="number">1015</span>ss15</span><br><span class="line"><span class="number">1016</span>ss16</span><br></pre></td></tr></table></figure><h3><span id="2创建分桶表">（2）创建分桶表</span></h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> stu_buck(id <span class="type">int</span>, name string)</span><br><span class="line">clustered <span class="keyword">by</span>(id) </span><br><span class="line"><span class="keyword">into</span> <span class="number">4</span> buckets</span><br><span class="line"><span class="type">row</span> format delimited fields terminated <span class="keyword">by</span> <span class="string">&#x27;\t&#x27;</span>;</span><br></pre></td></tr></table></figure><h3><span id="3查看表结构">（3）查看表结构</span></h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hive (<span class="keyword">default</span>)<span class="operator">&gt;</span> <span class="keyword">desc</span> formatted stu_buck;</span><br><span class="line">Num Buckets:            <span class="number">4</span>     </span><br></pre></td></tr></table></figure><h3><span id="4导入数据到分桶表中load的方式">（4）导入数据到分桶表中，load的方式</span></h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hive (<span class="keyword">default</span>)<span class="operator">&gt;</span> load data inpath   <span class="string">&#x27;/student.txt&#x27;</span> <span class="keyword">into</span> <span class="keyword">table</span> stu_buck;</span><br></pre></td></tr></table></figure><h3><span id="5查看创建的分桶表中是否分成4个桶">（5）查看创建的分桶表中是否分成4个桶</span></h3><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220228235253.png"></p><h3><span id="6查询分桶的数据">（6）查询分桶的数据</span></h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hive(<span class="keyword">default</span>)<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> stu_buck;</span><br></pre></td></tr></table></figure><h3><span id="7分桶规则">（7）分桶规则：</span></h3><p>根据结果可知：Hive的分桶采用对分桶字段的值进行哈希，然后除以桶的个数求余的方 式决定该条记录存放在哪个桶当中</p><h2><span id="2分桶表操作需要注意的事项">2）分桶表操作需要注意的事项:</span></h2><p><strong>（1）reduce的个数设置为-1,让Job自行决定需要用多少个reduce或者将reduce的个数设置为大于等于分桶表的桶数</strong><br><strong>（2）从hdfs中load数据到分桶表中，避免本地文件找不到问题</strong><br><strong>（3）不要使用本地模式</strong></p><h2><span id="3insert方式将数据导入分桶表">3）insert方式将数据导入分桶表</span></h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hive(<span class="keyword">default</span>)<span class="operator">&gt;</span><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">table</span> stu_buck <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student_insert ;</span><br></pre></td></tr></table></figure><h2><span id="抽样查询">抽样查询</span></h2><p>​    对于非常大的数据集，有时用户需要使用的是一个具有代表性的查询结果而不是全部结果。Hive可以通过对表进行抽样来满足这个需求。<br>语法: TABLESAMPLE(BUCKET x OUT OF y)<br>查询表stu_buck中的数据。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hive (<span class="keyword">default</span>)<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> stu_buck <span class="keyword">tablesample</span>(bucket <span class="number">1</span> <span class="keyword">out</span> <span class="keyword">of</span> <span class="number">4</span> <span class="keyword">on</span> id);</span><br></pre></td></tr></table></figure><p>注意：x的值必须小于等于y的值，否则</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FAILED: SemanticException [Error <span class="number">10061</span>]: Numerator should <span class="keyword">not</span> be bigger than denominator <span class="keyword">in</span> sample clause <span class="keyword">for</span> <span class="keyword">table</span> stu_buck</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;分区表&quot;&gt;&lt;a href=&quot;#分区表&quot; class=&quot;headerlink&quot; title=&quot;分区表&quot;&gt;&lt;/a&gt;分区表&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220228232524.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;一般生产当中会有一级分区和二级分区. 如果数据量比较大,会有二级分区. 比如按照每天的每个小时进行分区.    分区的原因就是数据量太大了. 分区指的是reduce里面. 而map里面叫分片.  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;map里面的切片和reduce里面的分区有本质意义上的区别吗?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;没有区别, 你map端分片.其实也是提高并行度. 其实都是将数据分开,然后大家一起去计算.&lt;/p&gt;
&lt;p&gt;hive里面有张表叫做分区表. 表里面放数据. 这张表每天一个分区. 就是每天一个目录. 以后查数据的时候,直接用where筛选目录.即,查询的sql中写上分区信息. 这样我就能够避免全表扫描.&lt;/p&gt;</summary>
    
    
    
    <category term="大数据" scheme="http://xubatian.cn/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
    <category term="hive" scheme="http://xubatian.cn/tags/hive/"/>
    
  </entry>
  
  <entry>
    <title>hive常用函数之排序</title>
    <link href="http://xubatian.cn/hive%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0%E4%B9%8B%E6%8E%92%E5%BA%8F/"/>
    <id>http://xubatian.cn/hive%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0%E4%B9%8B%E6%8E%92%E5%BA%8F/</id>
    <published>2022-02-28T14:16:21.000Z</published>
    <updated>2022-02-28T16:04:31.357Z</updated>
    
    <content type="html"><![CDATA[<p>​    hive 里面其实我们可以设置reduce的个数. 类似于在mapreduce里面,最后封装一个Driver一样. 可以最后写我们需要运行多少个reducer.  set mapreduce.job.reduces=3; 设置reducer个数为3. 但是在orderBy 里面,就算你最后设置了属性也不会生效. </p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220228232138.png"></p><span id="more"></span><h1><span id="全局排序order-by">全局排序（Order By）</span></h1><p>Order By：全局排序，会进入到一个Reducer里面,最终会生成一个结果文件</p><p><strong>1．使用 ORDER BY 子句排序</strong><br>        ASC（ascend）: 升序（默认）<br>        DESC（descend）: 降序<br><strong>2．ORDER BY 子句在SELECT语句的结尾</strong></p><p><strong>3．案例实操</strong><br>    （1）查询员工信息按工资升序排列</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hive (<span class="keyword">default</span>)<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> sal;</span><br></pre></td></tr></table></figure><p>​    （2）查询员工信息按工资降序排列</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hive (<span class="keyword">default</span>)<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> sal <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure><h2><span id="按照别名排序"><strong>按照别名排序</strong></span></h2><p><strong>按照员工薪水的2倍排序</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hive (<span class="keyword">default</span>)<span class="operator">&gt;</span> <span class="keyword">select</span> ename, sal<span class="operator">*</span><span class="number">2</span> twosal <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> twosal;</span><br></pre></td></tr></table></figure><h2><span id="多个列排序">多个列排序</span></h2><p><strong>按照部门和工资升序排序</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hive (<span class="keyword">default</span>)<span class="operator">&gt;</span> <span class="keyword">select</span> ename, deptno, sal <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> deptno, sal ;</span><br></pre></td></tr></table></figure><h1><span id="每个mapreduce内部排序sort-by">每个MapReduce内部排序（Sort By）</span></h1><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220228223331.png"></p><p>什么情况下map进入多个reduce呢?  分区.  </p><p>Sort By：对每个Reducer里面的数据进行排序，对全局结果集来说不是排序。<br>Order by : 是对整个数据进行排序</p><p>1．设置reduce个数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hive (<span class="keyword">default</span>)<span class="operator">&gt;</span> <span class="keyword">set</span> mapreduce.job.reduces<span class="operator">=</span><span class="number">3</span>;</span><br></pre></td></tr></table></figure><p>2．查看设置reduce个数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hive (<span class="keyword">default</span>)<span class="operator">&gt;</span> <span class="keyword">set</span> mapreduce.job.reduces;</span><br></pre></td></tr></table></figure><p>3．根据部门编号降序查看员工信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hive (<span class="keyword">default</span>)<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp sort <span class="keyword">by</span> empno <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure><p>4．将查询结果导入到文件中（按照部门编号降序排序）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hive (<span class="keyword">default</span>)<span class="operator">&gt;</span> <span class="keyword">insert</span> overwrite <span class="keyword">local</span> directory <span class="string">&#x27;/opt/module/datas/sortby-result&#x27;</span></span><br><span class="line"> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp sort <span class="keyword">by</span> deptno <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure><p><strong>MapReduce里面是按照hash来进行分区的,所以我们无法指定分区. 所以他是没有规律的. 所以我们使用sort by的话 一般会和后面的字段连用,执行分区规则. 因为当我们不指定分区规则的时候,他就是随机的. 因为他害怕数据倾斜</strong></p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220228223654.png"></p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/aliyun/www.xubatian.cn_287.png" alt="blog: www.xubatian.cn"></p><p><strong>可以看到,这是随机分配的,是没有规律的,我们一般排序肯定会先指定分区然后在排序,分区的话,一般我们会指定按照什么来分区,然而这里没有,说明这种排序方式不提供指定分区,从而出现了随机分配的现象</strong></p><p>hive选择语法:</p><p>官网</p><p><a href="https://cwiki.apache.org/confluence/display/Hive/LanguageManual+Select">https://cwiki.apache.org/confluence/display/Hive/LanguageManual+Select</a></p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220228224310.png"></p><h1><span id="分区排序distribute-by和sort-by-连用因为sort-by没有分区规则">分区排序（Distribute By）和sort by 连用,因为sort by没有分区规则</span></h1><p>先使用distribute by 然后再使用 sort by.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">比如: 我可以按照部门编号进行分区,然后再部门内部做一个按照薪水的排序</span><br><span class="line">这种方式用<span class="keyword">order</span> <span class="keyword">by</span> 全局排序是这么写的:</span><br><span class="line"><span class="keyword">select</span> deptno,ename,sal <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> deptno,sal;</span><br><span class="line">但是 这种我们设置的reduce个数只能是<span class="number">1</span>个.即使我们设置为<span class="number">3</span>个reduce.但是他不生效.</span><br><span class="line">但是用 先分区(distribute <span class="keyword">by</span>) 再 分区内排序(sort <span class="keyword">by</span>)的话是这么写的:</span><br><span class="line"><span class="keyword">set</span> mapreduce.job.reduces<span class="operator">=</span><span class="number">4</span>;</span><br><span class="line"><span class="keyword">select</span> deptno,ename,sal <span class="keyword">from</span> emp distribute <span class="keyword">by</span> deptno sort <span class="keyword">by</span> sal;</span><br><span class="line">但是这样我们也看不出来他的分区,因为他还是按照hash的方式进行分区的. </span><br></pre></td></tr></table></figure><p>所以,如果我们想通过区内排序的规则来达到我们order by的规则的话, 我们就需要自定义分区.就是要把我们不同的部门放到不同的区里面,然后拼接起来就到达了order by的效果. 而不是使用hash的方式分区.    </p><p>这种方式确确实实分区了,分区之后你在哪个区就用sort by了</p><p>Distribute By：类似MR中partition，进行分区,就是先分好区,分好之后在每个partition里面进行sort by一下，结合sort by使用。</p><p>注意，Hive要求DISTRIBUTE BY语句要写在SORT BY语句之前。<br>对于distribute by进行测试，一定要分配多reduce进行处理，否则无法看到distribute by的效果。</p><p>Distribute指定正常的分区字段,指定之后就可以正常的分区操作了</p><h1><span id="cluster-by">Cluster By</span></h1><p><strong>当distribute by和sort by字段相同时，可以使用cluster by方式。</strong><br>cluster by除了具有distribute by的功能外还兼具sort by的功能。但是排序只能是升序排序，不能指定排序规则为ASC或者DESC。<br>Sort by可以指定是升序还是降序,但是用cluster by之后就不能指定了,只能是升序<br>1）以下两种写法等价</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hive (<span class="keyword">default</span>)<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp cluster <span class="keyword">by</span> deptno;</span><br><span class="line">hive (<span class="keyword">default</span>)<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp distribute <span class="keyword">by</span> deptno sort <span class="keyword">by</span> deptno;</span><br></pre></td></tr></table></figure><p>注意：按照部门编号分区，不一定就是固定死的数值，可以是30号和60号部门分到一个分区里面去. 因为他是按照hash规则将hash相同的放到同一个分区里面的.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;​    hive 里面其实我们可以设置reduce的个数. 类似于在mapreduce里面,最后封装一个Driver一样. 可以最后写我们需要运行多少个reducer.  set mapreduce.job.reduces=3; 设置reducer个数为3. 但是在orderBy 里面,就算你最后设置了属性也不会生效. &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220228232138.png&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="大数据" scheme="http://xubatian.cn/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
    <category term="hive" scheme="http://xubatian.cn/tags/hive/"/>
    
  </entry>
  
  <entry>
    <title>Flink 原理与实现: Flink流程小总结</title>
    <link href="http://xubatian.cn/Flink-%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E7%8E%B0-Flink%E6%B5%81%E7%A8%8B%E5%B0%8F%E6%80%BB%E7%BB%93/"/>
    <id>http://xubatian.cn/Flink-%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E7%8E%B0-Flink%E6%B5%81%E7%A8%8B%E5%B0%8F%E6%80%BB%E7%BB%93/</id>
    <published>2022-02-20T15:28:43.000Z</published>
    <updated>2022-02-20T15:38:39.097Z</updated>
    
    <content type="html"><![CDATA[<h1 id="整个Flink-Job运行过程图"><a href="#整个Flink-Job运行过程图" class="headerlink" title="整个Flink Job运行过程图"></a>整个Flink Job运行过程图</h1><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220220144839.png"></p><span id="more"></span><h1 id="Flink-Job提交流程到背压到TaskManager里面的slot-任务链等详情"><a href="#Flink-Job提交流程到背压到TaskManager里面的slot-任务链等详情" class="headerlink" title="Flink Job提交流程到背压到TaskManager里面的slot,任务链等详情"></a>Flink Job提交流程到背压到TaskManager里面的slot,任务链等详情</h1><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220220155717.png"></p><h1 id="Flink-窗口总结"><a href="#Flink-窗口总结" class="headerlink" title="Flink 窗口总结"></a>Flink 窗口总结</h1><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220220181733.png"></p><h1 id="Flink-时间语义及watermark机制小总结"><a href="#Flink-时间语义及watermark机制小总结" class="headerlink" title="Flink 时间语义及watermark机制小总结"></a>Flink 时间语义及watermark机制小总结</h1><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220220195829.png"></p><h1 id="Flink-状态一致性及保证状态的机制-checkpoint检查点算法"><a href="#Flink-状态一致性及保证状态的机制-checkpoint检查点算法" class="headerlink" title="Flink 状态一致性及保证状态的机制(checkpoint检查点算法)"></a>Flink 状态一致性及保证状态的机制(checkpoint检查点算法)</h1><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220220232454.png"></p><h1 id="Flink和kafka是如何实现端到端的exactly-once的呢"><a href="#Flink和kafka是如何实现端到端的exactly-once的呢" class="headerlink" title="Flink和kafka是如何实现端到端的exactly-once的呢?"></a>Flink和kafka是如何实现端到端的exactly-once的呢?</h1><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220214231316.png"></p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220214164852.png"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;整个Flink-Job运行过程图&quot;&gt;&lt;a href=&quot;#整个Flink-Job运行过程图&quot; class=&quot;headerlink&quot; title=&quot;整个Flink Job运行过程图&quot;&gt;&lt;/a&gt;整个Flink Job运行过程图&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220220144839.png&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="大数据" scheme="http://xubatian.cn/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
    <category term="Flink" scheme="http://xubatian.cn/tags/Flink/"/>
    
  </entry>
  
  <entry>
    <title>Flink内存管理: 网络传输中的内存管理</title>
    <link href="http://xubatian.cn/Flink%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86-%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B8%AD%E7%9A%84%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"/>
    <id>http://xubatian.cn/Flink%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86-%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B8%AD%E7%9A%84%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</id>
    <published>2022-02-19T13:31:41.000Z</published>
    <updated>2022-02-20T07:58:38.238Z</updated>
    
    <content type="html"><![CDATA[<h3 id="网络传输中的内存管理"><a href="#网络传输中的内存管理" class="headerlink" title="网络传输中的内存管理"></a>网络传输中的内存管理</h3><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220220135443.png"></p><p>​    网络上传输的数据会写到 Task 的 InputGate（IG） 中，经过 Task 的处理后，再由 Task 写到 ResultPartition（RS） 中。每个 Task 都包括了输入和输入，输入和输出的数据存在 Buffer 中（都是字节数据）。Buffer 是 MemorySegment 的包装类。</p><span id="more"></span><p>​        1）TaskManager（TM）在启动时，会先初始化NetworkEnvironment对象，TM 中所有与网络相关的东西都由该类来管理（如 Netty 连接），其中就包括NetworkBufferPool。根据配置，Flink 会在 NetworkBufferPool 中生成一定数量（默认2048）的内存块 MemorySegment（关于 Flink 的内存管理，后续文章会详细谈到），内存块的总数量就代表了网络传输中所有可用的内存。NetworkEnvironment 和 NetworkBufferPool 是 Task 之间共享的，每个 TM 只会实例化一个。</p><p>​        2）Task 线程启动时，会向 NetworkEnvironment 注册，NetworkEnvironment 会为 Task 的 InputGate（IG）和 ResultPartition（RP） 分别创建一个 LocalBufferPool（缓冲池）并设置可申请的 MemorySegment（内存块）数量。IG 对应的缓冲池初始的内存块数量与 IG 中 InputChannel 数量一致，RP 对应的缓冲池初始的内存块数量与 RP 中的 ResultSubpartition 数量一致。不过，每当创建或销毁缓冲池时，NetworkBufferPool 会计算剩余空闲的内存块数量，并平均分配给已创建的缓冲池。注意，这个过程只是指定了缓冲池所能使用的内存块数量，并没有真正分配内存块，只有当需要时才分配。为什么要动态地为缓冲池扩容呢？因为内存越多，意味着系统可以更轻松地应对瞬时压力（如GC），不会频繁地进入反压状态，所以我们要利用起那部分闲置的内存块。</p><p>​        3）在 Task 线程执行过程中，当 Netty 接收端收到数据时，为了将 Netty 中的数据拷贝到 Task 中，InputChannel（实际是 RemoteInputChannel）会向其对应的缓冲池申请内存块（上图中的①）。如果缓冲池中也没有可用的内存块且已申请的数量还没到池子上限，则会向 NetworkBufferPool 申请内存块（上图中的②）并交给 InputChannel 填上数据（上图中的③和④）。如果缓冲池已申请的数量达到上限了呢？或者 NetworkBufferPool 也没有可用内存块了呢？这时候，Task 的 Netty Channel 会暂停读取，上游的发送端会立即响应停止发送，拓扑会进入反压状态。当 Task 线程写数据到 ResultPartition 时，也会向缓冲池请求内存块，如果没有可用内存块时，会阻塞在请求内存块的地方，达到暂停写入的目的。</p><p>​        4）当一个内存块被消费完成之后（在输入端是指内存块中的字节被反序列化成对象了，在输出端是指内存块中的字节写入到 Netty Channel 了），会调用 Buffer.recycle() 方法，会将内存块还给 LocalBufferPool （上图中的⑤）。如果LocalBufferPool中当前申请的数量超过了池子容量（由于上文提到的动态容量，由于新注册的 Task 导致该池子容量变小），则LocalBufferPool会将该内存块回收给 NetworkBufferPool（上图中的⑥）。如果没超过池子容量，则会继续留在池子中，减少反复申请的开销。</p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220219214650.png"></p><p>​    </p><h3 id="反压的过程"><a href="#反压的过程" class="headerlink" title="反压的过程"></a>反压的过程</h3><p>spark里面也有背压机制.背压机制需要参数明确的开启.Flink是不需要的.</p><p>Flink是如何实现反压的呢?</p><p>​    <img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220219215719.png"></p><p>1）记录“A”进入了 Flink 并且被 Task 1 处理。（这里省略了 Netty 接收、反序列化等过程）</p><p>2）记录被序列化到 buffer 中。</p><p>3）该 buffer 被发送到 Task 2，然后 Task 2 从这个 buffer 中读出记录。</p><p>记录能被 Flink 处理的前提是：必须有空闲可用的 Buffer。</p><p>结合上面两张图看：Task 1 在输出端有一个相关联的 LocalBufferPool（称缓冲池1），Task 2 在输入端也有一个相关联的 LocalBufferPool（称缓冲池2）。如果缓冲池1中有空闲可用的 buffer 来序列化记录 “A”，我们就序列化并发送该 buffer。</p><p>注意两个场景：</p><p>1）本地传输：如果 Task 1 和 Task 2 运行在同一个 worker 节点（TaskManager），该 buffer 可以直接交给下一个 Task。一旦 Task 2 消费了该 buffer，则该 buffer 会被缓冲池1回收。如果 Task 2 的速度比 1 慢，那么 buffer 回收的速度就会赶不上 Task 1 取 buffer 的速度，导致缓冲池1无可用的 buffer，Task 1 等待在可用的 buffer 上。最终形成 Task 1 的降速。</p><p>2）远程传输：如果 Task 1 和 Task 2 运行在不同的 worker 节点上，那么 buffer 会在发送到网络（TCP Channel）后被回收。在接收端，会从 LocalBufferPool 中申请 buffer，然后拷贝网络中的数据到 buffer 中。如果没有可用的 buffer，会停止从 TCP 连接中读取数据。在输出端，通过 Netty 的水位值机制来保证不往网络中写入太多数据（后面会说）。如果网络中的数据（Netty输出缓冲中的字节数）超过了高水位值，我们会等到其降到低水位值以下才继续写入数据。这保证了网络中不会有太多的数据。如果接收端停止消费网络中的数据（由于接收端缓冲池没有可用 buffer），网络中的缓冲数据就会堆积，那么发送端也会暂停发送。另外，这会使得发送端的缓冲池得不到回收，writer 阻塞在向 LocalBufferPool 请求 buffer，阻塞了 writer 往 ResultSubPartition 写数据。</p><p>这种固定大小缓冲池就像阻塞队列一样，保证了 Flink 有一套健壮的反压机制，使得 Task 生产数据的速度不会快于消费的速度。我们上面描述的这个方案可以从两个 Task 之间的数据传输自然地扩展到更复杂的 pipeline 中，保证反压机制可以扩散到整个 pipeline。</p><h3 id="Flink-Job提交流程到背压到TaskManager里面的slot-任务链等详情"><a href="#Flink-Job提交流程到背压到TaskManager里面的slot-任务链等详情" class="headerlink" title="Flink Job提交流程到背压到TaskManager里面的slot,任务链等详情"></a>Flink Job提交流程到背压到TaskManager里面的slot,任务链等详情</h3><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220220155717.png"></p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;网络传输中的内存管理&quot;&gt;&lt;a href=&quot;#网络传输中的内存管理&quot; class=&quot;headerlink&quot; title=&quot;网络传输中的内存管理&quot;&gt;&lt;/a&gt;网络传输中的内存管理&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220220135443.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;​    网络上传输的数据会写到 Task 的 InputGate（IG） 中，经过 Task 的处理后，再由 Task 写到 ResultPartition（RS） 中。每个 Task 都包括了输入和输入，输入和输出的数据存在 Buffer 中（都是字节数据）。Buffer 是 MemorySegment 的包装类。&lt;/p&gt;</summary>
    
    
    
    <category term="大数据" scheme="http://xubatian.cn/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
    <category term="Flink" scheme="http://xubatian.cn/tags/Flink/"/>
    
  </entry>
  
  <entry>
    <title>Flink内存管理: 内存管理器</title>
    <link href="http://xubatian.cn/Flink%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E5%99%A8/"/>
    <id>http://xubatian.cn/Flink%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E5%99%A8/</id>
    <published>2022-02-19T13:04:52.000Z</published>
    <updated>2022-02-19T13:18:49.920Z</updated>
    
    <content type="html"><![CDATA[<h2 id="TaskManager内存模型"><a href="#TaskManager内存模型" class="headerlink" title="TaskManager内存模型"></a>TaskManager内存模型</h2><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220219184944.png"></p><h2 id="内存管理器作用"><a href="#内存管理器作用" class="headerlink" title="内存管理器作用"></a>内存管理器作用</h2><p>​    我们有一块内存叫做管理内存. 内存管理器就是用来管理这块内存的.你设计的这块内存是不是得有人来操作维护的呀? 就是内存管理器维护管理内存的.</p><p>​        <span id="more"></span></p><p>​        Flink 1.10 对TaskManager的内存模型和Flink应用程序的配置选项进行了重大更改，让用户能够更加严格地控制其内存开销。</p><pre><code>    1.10之前版本，负责TaskManager所有内存。    1.10版本开始，管理范围是Slot级别。</code></pre><h3 id="堆外内存资源申请"><a href="#堆外内存资源申请" class="headerlink" title="堆外内存资源申请"></a>堆外内存资源申请</h3><p>MemoryManager.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">allocatePages</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">Object owner,</span></span></span><br><span class="line"><span class="params"><span class="function">Collection&lt;MemorySegment&gt; target,</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="keyword">int</span> numberOfPages)</span> <span class="keyword">throws</span> MemoryAllocationException </span>&#123;</span><br><span class="line">... ...</span><br><span class="line"></span><br><span class="line">allocatedSegments.compute(owner, (o, currentSegmentsForOwner) -&gt; &#123;</span><br><span class="line">Set&lt;MemorySegment&gt; segmentsForOwner = currentSegmentsForOwner == <span class="keyword">null</span> ?</span><br><span class="line"><span class="keyword">new</span> HashSet&lt;&gt;(numberOfPages) : currentSegmentsForOwner;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">long</span> i = numberOfPages; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">MemorySegment segment = allocateOffHeapUnsafeMemory(getPageSize(), owner, pageCleanup);</span><br><span class="line">target.add(segment);</span><br><span class="line">segmentsForOwner.add(segment);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> segmentsForOwner;</span><br><span class="line">&#125;);</span><br><span class="line">... ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MemorySegmentFactory.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MemorySegment <span class="title">allocateOffHeapUnsafeMemory</span><span class="params">(<span class="keyword">int</span> size, Object owner, Runnable customCleanupAction)</span> </span>&#123;</span><br><span class="line"><span class="keyword">long</span> address = MemoryUtils.allocateUnsafe(size);</span><br><span class="line">ByteBuffer offHeapBuffer = MemoryUtils.wrapUnsafeMemoryWithByteBuffer(address, size);</span><br><span class="line">MemoryUtils.createMemoryGcCleaner(offHeapBuffer, address, customCleanupAction);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> HybridMemorySegment(offHeapBuffer, owner);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="RocksDB自己负责内存申请和释放"><a href="#RocksDB自己负责内存申请和释放" class="headerlink" title="RocksDB自己负责内存申请和释放"></a>RocksDB自己负责内存申请和释放</h3><p>RocksDBOperationUtils.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> OpaqueMemoryResource&lt;RocksDBSharedResources&gt; <span class="title">allocateSharedCachesIfConfigured</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">RocksDBMemoryConfiguration memoryConfig,</span></span></span><br><span class="line"><span class="params"><span class="function">MemoryManager memoryManager,</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="keyword">double</span> memoryFraction,</span></span></span><br><span class="line"><span class="params"><span class="function">Logger logger)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">... ...</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (memoryConfig.isUsingFixedMemoryPerSlot()) &#123;</span><br><span class="line"><span class="keyword">assert</span> memoryConfig.getFixedMemoryPerSlot() != <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">logger.info(<span class="string">&quot;Getting fixed-size shared cache for RocksDB.&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> memoryManager.getExternalSharedMemoryResource(</span><br><span class="line">FIXED_SLOT_MEMORY_RESOURCE_ID, allocator, memoryConfig.getFixedMemoryPerSlot().getBytes());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">logger.info(<span class="string">&quot;Getting managed memory shared cache for RocksDB.&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> memoryManager.getSharedMemoryResourceForManagedMemory(MANAGED_MEMORY_RESOURCE_ID, allocator, memoryFraction);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">... ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MemoryManager.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T extends AutoCloseable&gt; <span class="function">OpaqueMemoryResource&lt;T&gt; <span class="title">getExternalSharedMemoryResource</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">String type,</span></span></span><br><span class="line"><span class="params"><span class="function">LongFunctionWithException&lt;T, Exception&gt; initializer,</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="keyword">long</span> numBytes)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// This object identifies the lease in this request. It is used only to identify the release operation.</span></span><br><span class="line"><span class="comment">// Using the object to represent the lease is a bit nicer safer than just using a reference counter.</span></span><br><span class="line"><span class="keyword">final</span> Object leaseHolder = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> SharedResources.ResourceAndSize&lt;T&gt; resource =</span><br><span class="line"><span class="comment">//获取内存资源后,get 或者 分配</span></span><br><span class="line">sharedResources.getOrAllocateSharedResource(type, leaseHolder, initializer, numBytes);</span><br><span class="line"><span class="comment">// 创建资源释放函数  : 这表示管理内存器管理的RocksDB.但是RocksDB内存的申请和释放是由RocksDB自己来的.只不过RocksDB受这个管理器的管理</span></span><br><span class="line"><span class="keyword">final</span> ThrowingRunnable&lt;Exception&gt; disposer = () -&gt; sharedResources.release(type, leaseHolder);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> OpaqueMemoryResource&lt;&gt;(resource.resourceHandle(), resource.size(), disposer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;TaskManager内存模型&quot;&gt;&lt;a href=&quot;#TaskManager内存模型&quot; class=&quot;headerlink&quot; title=&quot;TaskManager内存模型&quot;&gt;&lt;/a&gt;TaskManager内存模型&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220219184944.png&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;内存管理器作用&quot;&gt;&lt;a href=&quot;#内存管理器作用&quot; class=&quot;headerlink&quot; title=&quot;内存管理器作用&quot;&gt;&lt;/a&gt;内存管理器作用&lt;/h2&gt;&lt;p&gt;​    我们有一块内存叫做管理内存. 内存管理器就是用来管理这块内存的.你设计的这块内存是不是得有人来操作维护的呀? 就是内存管理器维护管理内存的.&lt;/p&gt;
&lt;p&gt;​</summary>
    
    
    
    <category term="大数据" scheme="http://xubatian.cn/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
    <category term="Flink" scheme="http://xubatian.cn/tags/Flink/"/>
    
  </entry>
  
  <entry>
    <title>Flink内存管理: 内存数据结构</title>
    <link href="http://xubatian.cn/Flink%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86-%E5%86%85%E5%AD%98%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <id>http://xubatian.cn/Flink%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86-%E5%86%85%E5%AD%98%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</id>
    <published>2022-02-19T11:45:46.000Z</published>
    <updated>2022-02-19T13:17:21.490Z</updated>
    
    <content type="html"><![CDATA[<h3 id="内存段"><a href="#内存段" class="headerlink" title="内存段"></a>内存段</h3><p>​        <strong>内存段在 Flink 内部叫 MemorySegment，是 Flink 中最小的内存分配单元，默认大小32KB。Flink内存是区分堆内和堆外的,但是MemorySegment是最小单元,不区分堆内核堆外的</strong>.它即可以是堆上内存（Java的byte数组），也可以是堆外内存（基于Netty的DirectByteBuffer），同时提供了对二进制数据进行读取和写入的方法。</p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220219194503.png"></p><p><strong>HeapMemorySegment：用来分配堆上内存</strong><br><strong>HybridMemorySegment：用来分配堆外内存和堆上内存，2017年以后的版本实际上只使用了HybridMemo`rySegment。</strong></p><span id="more"></span><p>他有什么有点? 他为什么要设置这个抽象?</p><p>假设我们有一个Tuple3&lt;Integer,Double,Person&gt; 的数据.</p><p>如下图展示一个内嵌型的Tuple3&lt;Integer,Double,Person&gt; 对象的序列化过程：</p><p>Tuple3&lt;Integer,Double,Person&gt; 对象如果用java的JVM自己来管理就会出现密度不紧凑,散列的等情况.而Flink的内存段MemorySegment 他不是散列的,他是紧密连在一起的.</p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220219195326.png"></p><p>​        可以看出这种序列化方式存储密度是相当紧凑的。其中 int 占4字节，double 占8字节，POJO多个一个字节的header，PojoSerializer只负责将header序列化进去，并委托每个字段对应的serializer对字段进行序列化.</p><h3 id="内存页"><a href="#内存页" class="headerlink" title="内存页"></a>内存页</h3><p>​        内存页是内存段更高一层的封装.</p><p>​        内存页是MemorySegment之上的数据访问视图，数据<strong>读取</strong>抽象为DataInputView，数据<strong>写入</strong>抽象为DataOutputView。使用时就无需关心MemorySegment的细节，会自动处理跨MemorySegment的读取和写入。</p><p>​        有了内存页之后,我们就不需要关注,这一段是第几段了.只需要关注是第几页就ok了.</p><h3 id="Buffer"><a href="#Buffer" class="headerlink" title="Buffer"></a>Buffer</h3><p>​        <strong>一个Buffer对应一个内存段(MemorySegment)</strong></p><p>​        Buffer是网络缓冲内存.是数据传输的时候会用到的.</p><p>​        Task算子之间在网络层面上传输数据，使用的是Buffer，申请和释放由Flink<strong>自行管理</strong>,并不是由我们代码指定，实现类为NetworkBuffer。<strong>1个NetworkBuffer包装了1个MemorySegment</strong>。同时继承了AbstractReferenceCountedByteBuf，是Netty中的抽象类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NetworkBuffer</span> <span class="keyword">extends</span> <span class="title">AbstractReferenceCountedByteBuf</span> <span class="keyword">implements</span> <span class="title">Buffer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** The backing &#123;<span class="doctag">@link</span> MemorySegment&#125; instance. */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> MemorySegment memorySegment;</span><br><span class="line"></span><br><span class="line">... ...</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Buffer资源池"><a href="#Buffer资源池" class="headerlink" title="Buffer资源池"></a>Buffer资源池</h3><p>​        Buffer资源池类似我们的连接池,比如说我们连接mysql.创建一次连接是一个连接对象,一个线程.但是我们通常会用一个链接池来管理.Buffer资源池和连接池其实是一样的.</p><p>​        BufferPool 用来管理Buffer，包含Buffer的申请、释放、销毁、可用Buffer通知等，实现类是LocalBufferPool，<strong>每个Task拥有自己的LocalBufferPool</strong>。</p><p>​        Buffer资源池是如何创建的呢?</p><p>​        他用了一个工厂. 设计模式的工厂模式创建的.</p><p>​        BufferPoolFactory 用来提供 BufferPool 的创建和销毁，唯一的实现类是NetworkBufferPool，每个TaskManager只有一个NetworkBufferPool。同一个TaskManager上的Task共享NetworkBufferPool，在TaskManager启动的时候创建并分配内存。</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;内存段&quot;&gt;&lt;a href=&quot;#内存段&quot; class=&quot;headerlink&quot; title=&quot;内存段&quot;&gt;&lt;/a&gt;内存段&lt;/h3&gt;&lt;p&gt;​        &lt;strong&gt;内存段在 Flink 内部叫 MemorySegment，是 Flink 中最小的内存分配单元，默认大小32KB。Flink内存是区分堆内和堆外的,但是MemorySegment是最小单元,不区分堆内核堆外的&lt;/strong&gt;.它即可以是堆上内存（Java的byte数组），也可以是堆外内存（基于Netty的DirectByteBuffer），同时提供了对二进制数据进行读取和写入的方法。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220219194503.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;HeapMemorySegment：用来分配堆上内存&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;HybridMemorySegment：用来分配堆外内存和堆上内存，2017年以后的版本实际上只使用了HybridMemo`rySegment。&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="大数据" scheme="http://xubatian.cn/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
    <category term="Flink" scheme="http://xubatian.cn/tags/Flink/"/>
    
  </entry>
  
  <entry>
    <title>Flink内存管理: 内存模型</title>
    <link href="http://xubatian.cn/Flink%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86-%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/"/>
    <id>http://xubatian.cn/Flink%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86-%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/</id>
    <published>2022-02-19T10:42:16.000Z</published>
    <updated>2022-02-19T13:31:03.981Z</updated>
    
    <content type="html"><![CDATA[<p>​        目前，大数据计算引擎主要用 Java 或是基于 JVM 的编程语言实现的，例如 Apache Hadoop、Apache Spark、Apache Drill、Apache Flink等。Java语言的好处在于程序员不需要太关注底层内存资源的管理，但同样会面临一个问题，就是如何在内存中存储大量的数据（包括缓存和高效处理）。Flink使用自主的内存管理，来避免这个问题。</p><p><strong>JVM内存管理的不足:</strong></p><p>​            1）<strong>Java 对象存储密度低</strong>。Java的对象在内存中存储包含3个主要部分：对象头、实例数据、对齐填充部分。例如，一个只包含 boolean 属性的对象占16byte：对象头占8byte，boolean 属性占1byte，为了对齐达到8的倍数额外占7byte。而实际上只需要一个bit（1/8字节）就够了。</p><span id="more"></span><p>​            2）<strong>Full GC 会极大地影响性能</strong>。尤其是为了处理更大数据而开了很大内存空间的JVM来说，GC 会达到秒级甚至分钟级。</p><p>​            3）<strong>OOM 问题影响稳定性</strong>。OutOfMemoryError是分布式计算框架经常会遇到的问题，当JVM中所有对象大小超过分配给JVM的内存大小时，就会发生OutOfMemoryError错误，导致JVM崩溃，分布式框架的健壮性和性能都会受到影响。</p><p>​            4）<strong>缓存未命中问题</strong>。CPU进行计算的时候，是从CPU缓存中获取数据。现代体系的CPU会有多级缓存，而加载的时候是以Cache Line为单位加载。如果能够将对象连续存储，这样就会大大降低Cache Miss。使得CPU集中处理业务，而不是空转。（Java对象在堆上存储的时候并不是连续的，所以从内存中读取Java对象时，缓存的邻近的内存区域的数据往往不是CPU下一步计算所需要的，这就是缓存未命中。此时CPU需要空转等待从内存中重新读取数据。）</p><p>​            Flink 并不是将大量对象存在堆内存上，而是将对象都序列化到一个预分配的内存块上，这个内存块叫做 MemorySegment，它代表了一段固定长度的内存（默认大小为 32KB），也是 Flink 中最小的内存分配单元，并且提供了非常高效的读写方法，很多运算可以直接操作二进制数据，不需要反序列化即可执行。每条记录都会以序列化的形式存储在一个或多个MemorySegment中。如果需要处理的数据多于可以保存在内存中的数据，Flink 的运算符会将部分数据溢出到磁盘。</p><!--more--><h1 id="内存模型"><a href="#内存模型" class="headerlink" title="内存模型"></a>内存模型</h1><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220219184452.png"></p><h2 id="JobManager内存模型"><a href="#JobManager内存模型" class="headerlink" title="JobManager内存模型"></a>JobManager内存模型</h2><p><strong>JobManagerFlinkMemory.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Licensed to the Apache Software Foundation (ASF) under one</span></span><br><span class="line"><span class="comment"> * or more contributor license agreements.  See the NOTICE file</span></span><br><span class="line"><span class="comment"> * distributed with this work for additional information</span></span><br><span class="line"><span class="comment"> * regarding copyright ownership.  The ASF licenses this file</span></span><br><span class="line"><span class="comment"> * to you under the Apache License, Version 2.0 (the</span></span><br><span class="line"><span class="comment"> * &quot;License&quot;); you may not use this file except in compliance</span></span><br><span class="line"><span class="comment"> * with the License.  You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment"> * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><br><span class="line"><span class="comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment"> * See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment"> * limitations under the License.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> org.apache.flink.runtime.util.config.memory.jobmanager;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.annotation.VisibleForTesting;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.configuration.MemorySize;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.runtime.util.config.memory.FlinkMemory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.apache.flink.util.Preconditions.checkNotNull;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Flink internal memory components of Job Manager.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;A Job Manager&#x27;s internal Flink memory consists of the following components.</span></span><br><span class="line"><span class="comment"> * &lt;ul&gt;</span></span><br><span class="line"><span class="comment"> *     &lt;li&gt;JVM Heap Memory&lt;/li&gt;</span></span><br><span class="line"><span class="comment"> *     &lt;li&gt;Off-Heap Memory (also JVM Direct Memory)&lt;/li&gt;</span></span><br><span class="line"><span class="comment"> * &lt;/ul&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;The relationships of Job Manager Flink memory components are shown below.</span></span><br><span class="line"><span class="comment"> * &lt;pre&gt;</span></span><br><span class="line"><span class="comment"> *               ┌ ─ ─  Total Flink Memory - ─ ─ ┐</span></span><br><span class="line"><span class="comment"> *                 ┌───────────────────────────┐</span></span><br><span class="line"><span class="comment"> *               | │       JVM Heap Memory     │ |   TODO JVM 堆内存</span></span><br><span class="line"><span class="comment"> *                 └───────────────────────────┘</span></span><br><span class="line"><span class="comment"> *               │ ┌───────────────────────────┐ │</span></span><br><span class="line"><span class="comment"> *                 |    Off-heap Heap Memory   │   -─ JVM Direct Memory  TODO JVM 堆外内存</span></span><br><span class="line"><span class="comment"> *               │ └───────────────────────────┘ │</span></span><br><span class="line"><span class="comment"> *               └ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┘</span></span><br><span class="line"><span class="comment"> * &lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JobManagerFlinkMemory</span> <span class="keyword">implements</span> <span class="title">FlinkMemory</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> MemorySize jvmHeap;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> MemorySize offHeapMemory;</span><br><span class="line"></span><br><span class="line"><span class="meta">@VisibleForTesting</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">JobManagerFlinkMemory</span><span class="params">(MemorySize jvmHeap, MemorySize offHeapMemory)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.jvmHeap = checkNotNull(jvmHeap);</span><br><span class="line"><span class="keyword">this</span>.offHeapMemory = checkNotNull(offHeapMemory);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> MemorySize <span class="title">getJvmHeapMemorySize</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> jvmHeap;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> MemorySize <span class="title">getJvmDirectMemorySize</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> offHeapMemory;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> MemorySize <span class="title">getTotalFlinkMemorySize</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> jvmHeap.add(offHeapMemory);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (obj == <span class="keyword">this</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> JobManagerFlinkMemory) &#123;</span><br><span class="line">JobManagerFlinkMemory that = (JobManagerFlinkMemory) obj;</span><br><span class="line"><span class="keyword">return</span> Objects.equals(<span class="keyword">this</span>.jvmHeap, that.jvmHeap) &amp;&amp;</span><br><span class="line">Objects.equals(<span class="keyword">this</span>.offHeapMemory, that.offHeapMemory);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> Objects.hash(</span><br><span class="line">jvmHeap,</span><br><span class="line">offHeapMemory);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220219184654.png"></p><p>​        在1.10中，Flink 统一了 TM 端的内存管理和配置，相应的在1.11中，Flink 进一步对JM 端的内存配置进行了修改，使它的选项和配置方式与TM 端的配置方式保持一致。</p><p><strong>1.10版本</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># The heap size <span class="keyword">for</span> the JobManager JVM</span><br><span class="line"></span><br><span class="line">jobmanager.heap.size: 1024m</span><br></pre></td></tr></table></figure><p><strong>1.11版本及以后</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># The total process memory size <span class="keyword">for</span> the JobManager.</span><br><span class="line">#</span><br><span class="line"># Note <span class="keyword">this</span> accounts <span class="keyword">for</span> all memory usage within the JobManager process, including JVM metaspace and other overhead.</span><br><span class="line"></span><br><span class="line">jobmanager.memory.process.size: 1600m</span><br></pre></td></tr></table></figure><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220219191433.png"></p><h2 id="TaskManager内存模型"><a href="#TaskManager内存模型" class="headerlink" title="TaskManager内存模型"></a>TaskManager内存模型</h2><p>​        Flink 1.10 对TaskManager的内存模型和Flink应用程序的配置选项进行了重大更改，让用户能够更加严格地控制其内存开销。</p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220219184944.png"></p><p><strong>TaskExecutorFlinkMemory.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Licensed to the Apache Software Foundation (ASF) under one</span></span><br><span class="line"><span class="comment"> * or more contributor license agreements.  See the NOTICE file</span></span><br><span class="line"><span class="comment"> * distributed with this work for additional information</span></span><br><span class="line"><span class="comment"> * regarding copyright ownership.  The ASF licenses this file</span></span><br><span class="line"><span class="comment"> * to you under the Apache License, Version 2.0 (the</span></span><br><span class="line"><span class="comment"> * &quot;License&quot;); you may not use this file except in compliance</span></span><br><span class="line"><span class="comment"> * with the License.  You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment"> * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><br><span class="line"><span class="comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment"> * See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment"> * limitations under the License.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> org.apache.flink.runtime.util.config.memory.taskmanager;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.configuration.MemorySize;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.runtime.util.config.memory.FlinkMemory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.apache.flink.util.Preconditions.checkNotNull;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Flink internal memory components of Task Executor.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;A TaskExecutor&#x27;s internal Flink memory consists of the following components.</span></span><br><span class="line"><span class="comment"> * &lt;ul&gt;</span></span><br><span class="line"><span class="comment"> *     &lt;li&gt;Framework Heap Memory&lt;/li&gt;</span></span><br><span class="line"><span class="comment"> *     &lt;li&gt;Framework Off-Heap Memory&lt;/li&gt;</span></span><br><span class="line"><span class="comment"> *     &lt;li&gt;Task Heap Memory&lt;/li&gt;</span></span><br><span class="line"><span class="comment"> *     &lt;li&gt;Task Off-Heap Memory&lt;/li&gt;</span></span><br><span class="line"><span class="comment"> *     &lt;li&gt;Network Memory&lt;/li&gt;</span></span><br><span class="line"><span class="comment"> *     &lt;li&gt;Managed Memory&lt;/li&gt;</span></span><br><span class="line"><span class="comment"> * &lt;/ul&gt;</span></span><br><span class="line"><span class="comment"> *  TODO 这是Flink内存 不包含JVM本身的开销的</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;The relationships of TaskExecutor Flink memory components are shown below.</span></span><br><span class="line"><span class="comment"> * &lt;pre&gt;</span></span><br><span class="line"><span class="comment"> *               ┌ ─ ─  Total Flink Memory - ─ ─ ┐</span></span><br><span class="line"><span class="comment"> *               |┌ ─ ─ - - - On-Heap - - - ─ ─ ┐|</span></span><br><span class="line"><span class="comment"> *                 ┌───────────────────────────┐</span></span><br><span class="line"><span class="comment"> *               |││   Framework Heap Memory   ││|</span></span><br><span class="line"><span class="comment"> *                 └───────────────────────────┘</span></span><br><span class="line"><span class="comment"> *               │ ┌───────────────────────────┐ │</span></span><br><span class="line"><span class="comment"> *                ||      Task Heap Memory     ││</span></span><br><span class="line"><span class="comment"> *               │ └───────────────────────────┘ │</span></span><br><span class="line"><span class="comment"> *                └ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┘</span></span><br><span class="line"><span class="comment"> *               |┌ ─ ─ - - - Off-Heap  - - ─ ─ ┐|</span></span><br><span class="line"><span class="comment"> *                │┌───────────────────────────┐│</span></span><br><span class="line"><span class="comment"> *               │ │ Framework Off-Heap Memory │ │ ─┐</span></span><br><span class="line"><span class="comment"> *                │└───────────────────────────┘│   │</span></span><br><span class="line"><span class="comment"> *               │ ┌───────────────────────────┐ │  │</span></span><br><span class="line"><span class="comment"> *                ││   Task Off-Heap Memory    ││   ┼─ JVM Direct Memory</span></span><br><span class="line"><span class="comment"> *               │ └───────────────────────────┘ │  │</span></span><br><span class="line"><span class="comment"> *                │┌───────────────────────────┐│   │</span></span><br><span class="line"><span class="comment"> *               │ │      Network Memory       │ │ ─┘</span></span><br><span class="line"><span class="comment"> *                │└───────────────────────────┘│</span></span><br><span class="line"><span class="comment"> *               │ ┌───────────────────────────┐ │</span></span><br><span class="line"><span class="comment"> *                |│      Managed Memory       │|</span></span><br><span class="line"><span class="comment"> *               │ └───────────────────────────┘ │</span></span><br><span class="line"><span class="comment"> *                └ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┘</span></span><br><span class="line"><span class="comment"> *               └ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┘</span></span><br><span class="line"><span class="comment"> * &lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TaskExecutorFlinkMemory</span> <span class="keyword">implements</span> <span class="title">FlinkMemory</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> MemorySize frameworkHeap;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> MemorySize frameworkOffHeap;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> MemorySize taskHeap;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> MemorySize taskOffHeap;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> MemorySize network;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> MemorySize managed;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">TaskExecutorFlinkMemory</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="keyword">final</span> MemorySize frameworkHeap,</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="keyword">final</span> MemorySize frameworkOffHeap,</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="keyword">final</span> MemorySize taskHeap,</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="keyword">final</span> MemorySize taskOffHeap,</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="keyword">final</span> MemorySize network,</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="keyword">final</span> MemorySize managed)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.frameworkHeap = checkNotNull(frameworkHeap);</span><br><span class="line"><span class="keyword">this</span>.frameworkOffHeap = checkNotNull(frameworkOffHeap);</span><br><span class="line"><span class="keyword">this</span>.taskHeap = checkNotNull(taskHeap);</span><br><span class="line"><span class="keyword">this</span>.taskOffHeap = checkNotNull(taskOffHeap);</span><br><span class="line"><span class="keyword">this</span>.network = checkNotNull(network);</span><br><span class="line"><span class="keyword">this</span>.managed = checkNotNull(managed);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> MemorySize <span class="title">getFrameworkHeap</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> frameworkHeap;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> MemorySize <span class="title">getFrameworkOffHeap</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> frameworkOffHeap;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> MemorySize <span class="title">getTaskHeap</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> taskHeap;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> MemorySize <span class="title">getTaskOffHeap</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> taskOffHeap;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> MemorySize <span class="title">getNetwork</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> network;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> MemorySize <span class="title">getManaged</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> managed;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> MemorySize <span class="title">getJvmHeapMemorySize</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> frameworkHeap.add(taskHeap);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> MemorySize <span class="title">getJvmDirectMemorySize</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> frameworkOffHeap.add(taskOffHeap).add(network);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> MemorySize <span class="title">getTotalFlinkMemorySize</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> frameworkHeap.add(frameworkOffHeap).add(taskHeap).add(taskOffHeap).add(network).add(managed);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (obj == <span class="keyword">this</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> TaskExecutorFlinkMemory) &#123;</span><br><span class="line">TaskExecutorFlinkMemory that = (TaskExecutorFlinkMemory) obj;</span><br><span class="line"><span class="keyword">return</span> Objects.equals(<span class="keyword">this</span>.frameworkHeap, that.frameworkHeap) &amp;&amp;</span><br><span class="line">Objects.equals(<span class="keyword">this</span>.frameworkOffHeap, that.frameworkOffHeap) &amp;&amp;</span><br><span class="line">Objects.equals(<span class="keyword">this</span>.taskHeap, that.taskHeap) &amp;&amp;</span><br><span class="line">Objects.equals(<span class="keyword">this</span>.taskOffHeap, that.taskOffHeap) &amp;&amp;</span><br><span class="line">Objects.equals(<span class="keyword">this</span>.network, that.network) &amp;&amp;</span><br><span class="line">Objects.equals(<span class="keyword">this</span>.managed, that.managed);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> Objects.hash(</span><br><span class="line">frameworkHeap,</span><br><span class="line">frameworkOffHeap,</span><br><span class="line">taskHeap,</span><br><span class="line">taskOffHeap,</span><br><span class="line">network,</span><br><span class="line">managed);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220219185043.png"></p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220219185113.png"></p><h3 id="JVM-Heap：JVM堆上内存"><a href="#JVM-Heap：JVM堆上内存" class="headerlink" title="JVM Heap：JVM堆上内存"></a>JVM Heap：JVM堆上内存</h3><p>​        1、Framework Heap Memory：Flink框架本身使用的内存，即TaskManager本身所占用的堆上内存，不计入Slot的资源中。</p><p>配置参数：taskmanager.memory.framework.heap.size=128MB,默认128MB</p><p>​        2、Task Heap Memory：Task执行用户代码时所使用的堆上内存。</p><p>配置参数：taskmanager.memory.task.heap.size</p><h3 id="Off-Heap-Mempry：JVM堆外内存"><a href="#Off-Heap-Mempry：JVM堆外内存" class="headerlink" title="Off-Heap Mempry：JVM堆外内存"></a>Off-Heap Mempry：JVM堆外内存</h3><p>​        1、DirectMemory：JVM直接内存</p><p>​                1） Framework Off-Heap Memory：Flink框架本身所使用的内存，即TaskManager本身所占用的对外内存，不计入Slot资源。</p><p>​                        配置参数：taskmanager.memory.framework.off-heap.size=128MB,默认128MB</p><p>​                2）Task Off-Heap Memory：Task执行用户代码所使用的对外内存。</p><p>​                        配置参数：taskmanager.memory.task.off-heap.size=0,默认0</p><p>​                3）Network Memory：网络数据交换所使用的堆外内存大小，如网络数据交换缓冲区</p><p>​                        配置参数：</p><p>​                            taskmanager.memory.network.fraction: 0.1</p><p>​                            taskmanager.memory.network.min: 64mb</p><p>​                            taskmanager.memory.network.max: 1gb</p><p>​        2、Managed Memory：Flink管理的堆外内存，用于排序、哈希表、缓存中间结果及 RocksDB State Backend 的本地内存。</p><p>​              RocksDB就是存储RocksDB类型的状态后端的.状态后端关注两件事情①本地状态存在哪里. ②checkpoint存在哪里. 本地内存是存在RocksDB里面.RocksDB又用到了内存加磁盘.那RocksDB用到的内存就是这个Managed Memory.</p><p>​                        配置参数：</p><p>​                            taskmanager.memory.managed.fraction=0.4</p><p>​                            taskmanager.memory.managed.size</p><h3 id="JVM-specific-memory：JVM本身使用的内存"><a href="#JVM-specific-memory：JVM本身使用的内存" class="headerlink" title="JVM specific memory：JVM本身使用的内存"></a>JVM specific memory：JVM本身使用的内存</h3><p>​        1、JVM metaspace：JVM元空间</p><p>​        2、JVM over-head执行开销：JVM执行时自身所需要的内容，包括线程堆栈、IO、编译缓存等所使用的内存。</p><p>​                配置参数：</p><p>​                    taskmanager.memory.jvm-overhead.min=192mb</p><p>​                    taskmanager.memory.jvm-overhead.max=1gb</p><p>​                    taskmanager.memory.jvm-overhead.fraction=0.1</p><h3 id="总体内存"><a href="#总体内存" class="headerlink" title="总体内存"></a>总体内存</h3><p>​            1、总进程内存：Flink Java应用程序（包括用户代码）和JVM运行整个进程所消耗的总内存。</p><p>​                        <strong>总进程内存 = Flink使用内存 + JVM元空间 + JVM执行开销</strong></p><p>​                 配置项：taskmanager.memory.process.size: 1728m</p><p>​            2、Flink总内存：仅Flink Java应用程序消耗的内存，包括用户代码，但不包括JVM为其运行而分配的内存</p><p>​                        <strong>Flink使用内存：框架堆内外 + task堆内外 + network + manage</strong></p><p>​                    配置项：taskmanager.memory.flink.size: 1280m</p><p>​    <strong>说明：</strong>配置项详细信息查看如下链接</p><p><a href="https://ci.apache.org/projects/flink/flink-docs-release-1.14/deployment/config.html#memory-configuration">https://ci.apache.org/projects/flink/flink-docs-release-1.14/deployment/config.html#memory-configuration</a></p><h2 id="内存分配"><a href="#内存分配" class="headerlink" title="内存分配"></a>内存分配</h2><p>内存在配置文件内配置之后,在代码里面 是如何加载的呢?如何加载到配置项里面的.</p><h3 id="JobManager内存分配"><a href="#JobManager内存分配" class="headerlink" title="JobManager内存分配"></a>JobManager内存分配</h3><p><strong>YarnClusterDescriptor.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> ApplicationReport <span class="title">startAppMaster</span><span class="params">( 集群描述器启动Applicationmaster.启动的时候封装了一些配置项.就是在这里做的.</span></span></span><br><span class="line"><span class="params"><span class="function">Configuration configuration,</span></span></span><br><span class="line"><span class="params"><span class="function">String applicationName,</span></span></span><br><span class="line"><span class="params"><span class="function">String yarnClusterEntrypoint,</span></span></span><br><span class="line"><span class="params"><span class="function">JobGraph jobGraph,</span></span></span><br><span class="line"><span class="params"><span class="function">YarnClient yarnClient,</span></span></span><br><span class="line"><span class="params"><span class="function">YarnClientApplication yarnApplication,</span></span></span><br><span class="line"><span class="params"><span class="function">ClusterSpecification clusterSpecification)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">... ...</span><br><span class="line"><span class="keyword">final</span> JobManagerProcessSpec processSpec = JobManagerProcessUtils.processSpecFromConfigWithNewOptionToInterpretLegacyHeap(</span><br><span class="line">flinkConfiguration,</span><br><span class="line">JobManagerOptions.TOTAL_PROCESS_MEMORY);</span><br><span class="line"><span class="keyword">final</span> ContainerLaunchContext amContainer = setupApplicationMasterContainer(</span><br><span class="line">yarnClusterEntrypoint,</span><br><span class="line">hasKrb5,</span><br><span class="line">processSpec);</span><br><span class="line">... ...</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220219190826.png"></p><p><strong>JobManagerProcessUtils.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> JobManagerProcessSpec <span class="title">processSpecFromConfigWithNewOptionToInterpretLegacyHeap</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">Configuration config,</span></span></span><br><span class="line"><span class="params"><span class="function">ConfigOption&lt;MemorySize&gt; newOptionToInterpretLegacyHeap)</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">return</span> processSpecFromConfig(</span><br><span class="line">getConfigurationWithLegacyHeapSizeMappedToNewConfigOption(</span><br><span class="line">config,</span><br><span class="line">newOptionToInterpretLegacyHeap));</span><br><span class="line">&#125; <span class="keyword">catch</span> (IllegalConfigurationException e) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalConfigurationException(<span class="string">&quot;JobManager memory configuration failed: &quot;</span> + e.getMessage(), e);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> JobManagerProcessSpec <span class="title">processSpecFromConfig</span><span class="params">(Configuration config)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> createMemoryProcessSpec(PROCESS_MEMORY_UTILS.memoryProcessSpecFromConfig(config));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>ProcessMemoryUtils.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> CommonProcessMemorySpec&lt;FM&gt; <span class="title">memoryProcessSpecFromConfig</span><span class="params">(Configuration config)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (options.getRequiredFineGrainedOptions().stream().allMatch(config::contains)) &#123;</span><br><span class="line"><span class="comment">// all internal memory options are configured, use these to derive total Flink and process memory</span></span><br><span class="line"><span class="keyword">return</span> deriveProcessSpecWithExplicitInternalMemory(config);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (config.contains(options.getTotalFlinkMemoryOption())) &#123;</span><br><span class="line"><span class="comment">// internal memory options are not configured, total Flink memory is configured,</span></span><br><span class="line"><span class="comment">// derive from total flink memory</span></span><br><span class="line"><span class="comment">// 如果只配置了JM的Flink总内存，调用下面方法</span></span><br><span class="line"><span class="keyword">return</span> deriveProcessSpecWithTotalFlinkMemory(config);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (config.contains(options.getTotalProcessMemoryOption())) &#123;</span><br><span class="line"><span class="comment">// total Flink memory is not configured, total process memory is configured,</span></span><br><span class="line"><span class="comment">// derive from total process memory</span></span><br><span class="line"><span class="keyword">return</span> deriveProcessSpecWithTotalProcessMemory(config);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> failBecauseRequiredOptionsNotConfigured();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> CommonProcessMemorySpec&lt;FM&gt; <span class="title">deriveProcessSpecWithTotalFlinkMemory</span><span class="params">(Configuration config)</span> </span>&#123;</span><br><span class="line">MemorySize totalFlinkMemorySize = getMemorySizeFromConfig(config, options.getTotalFlinkMemoryOption());</span><br><span class="line"><span class="comment">// 获取JM的Flink总内存</span></span><br><span class="line">FM flinkInternalMemory = flinkMemoryUtils.deriveFromTotalFlinkMemory(config, totalFlinkMemorySize);</span><br><span class="line"><span class="comment">// 获取JM的JVM元空间和执行开销</span></span><br><span class="line">JvmMetaspaceAndOverhead jvmMetaspaceAndOverhead = deriveJvmMetaspaceAndOverheadFromTotalFlinkMemory(config, totalFlinkMemorySize);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> CommonProcessMemorySpec&lt;&gt;(flinkInternalMemory, jvmMetaspaceAndOverhead);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>JobManagerFlinkMemoryUtils.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> JobManagerFlinkMemory <span class="title">deriveFromTotalFlinkMemory</span><span class="params">(Configuration config, MemorySize totalFlinkMemorySize)</span> </span>&#123;</span><br><span class="line">MemorySize offHeapMemorySize = ProcessMemoryUtils.getMemorySizeFromConfig(config, JobManagerOptions.OFF_HEAP_MEMORY);</span><br><span class="line"><span class="keyword">if</span> (totalFlinkMemorySize.compareTo(offHeapMemorySize) &lt; <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalConfigurationException(</span><br><span class="line"><span class="string">&quot;The configured Total Flink Memory (%s) is less than the configured Off-heap Memory (%s).&quot;</span>,</span><br><span class="line">totalFlinkMemorySize.toHumanReadableString(),</span><br><span class="line">offHeapMemorySize.toHumanReadableString());</span><br><span class="line">&#125;</span><br><span class="line">MemorySize derivedJvmHeapMemorySize = totalFlinkMemorySize.subtract(offHeapMemorySize);</span><br><span class="line"><span class="keyword">return</span> createJobManagerFlinkMemory(derivedJvmHeapMemorySize, offHeapMemorySize);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> JobManagerFlinkMemory <span class="title">createJobManagerFlinkMemory</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">MemorySize jvmHeap,</span></span></span><br><span class="line"><span class="params"><span class="function">MemorySize offHeapMemory)</span> </span>&#123;</span><br><span class="line">verifyJvmHeapSize(jvmHeap);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> JobManagerFlinkMemory(jvmHeap, offHeapMemory);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="TaskManager内存分配"><a href="#TaskManager内存分配" class="headerlink" title="TaskManager内存分配"></a>TaskManager内存分配</h3><p><strong>ActiveResourceManager.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">requestNewWorker</span><span class="params">(WorkerResourceSpec workerResourceSpec)</span> </span>&#123;</span><br><span class="line"><span class="keyword">final</span> TaskExecutorProcessSpec taskExecutorProcessSpec =</span><br><span class="line">TaskExecutorProcessUtils.processSpecFromWorkerResourceSpec(flinkConfig, workerResourceSpec);</span><br><span class="line">... ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>TaskExecutorProcessUtils.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> TaskExecutorProcessSpec <span class="title">processSpecFromWorkerResourceSpec</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="keyword">final</span> Configuration config, <span class="keyword">final</span> WorkerResourceSpec workerResourceSpec)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> MemorySize frameworkHeapMemorySize = TaskExecutorFlinkMemoryUtils.getFrameworkHeapMemorySize(config);</span><br><span class="line"><span class="keyword">final</span> MemorySize frameworkOffHeapMemorySize = TaskExecutorFlinkMemoryUtils.getFrameworkOffHeapMemorySize(config);</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> TaskExecutorFlinkMemory flinkMemory = <span class="keyword">new</span> TaskExecutorFlinkMemory(</span><br><span class="line">frameworkHeapMemorySize,</span><br><span class="line">frameworkOffHeapMemorySize,</span><br><span class="line">workerResourceSpec.getTaskHeapSize(),</span><br><span class="line">workerResourceSpec.getTaskOffHeapSize(),</span><br><span class="line">workerResourceSpec.getNetworkMemSize(),</span><br><span class="line">workerResourceSpec.getManagedMemSize());</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> JvmMetaspaceAndOverhead jvmMetaspaceAndOverhead =</span><br><span class="line">PROCESS_MEMORY_UTILS.deriveJvmMetaspaceAndOverheadFromTotalFlinkMemory(</span><br><span class="line">config, flinkMemory.getTotalFlinkMemorySize());</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> TaskExecutorProcessSpec(workerResourceSpec.getCpuCores(), flinkMemory, jvmMetaspaceAndOverhead);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;​        目前，大数据计算引擎主要用 Java 或是基于 JVM 的编程语言实现的，例如 Apache Hadoop、Apache Spark、Apache Drill、Apache Flink等。Java语言的好处在于程序员不需要太关注底层内存资源的管理，但同样会面临一个问题，就是如何在内存中存储大量的数据（包括缓存和高效处理）。Flink使用自主的内存管理，来避免这个问题。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;JVM内存管理的不足:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​            1）&lt;strong&gt;Java 对象存储密度低&lt;/strong&gt;。Java的对象在内存中存储包含3个主要部分：对象头、实例数据、对齐填充部分。例如，一个只包含 boolean 属性的对象占16byte：对象头占8byte，boolean 属性占1byte，为了对齐达到8的倍数额外占7byte。而实际上只需要一个bit（1/8字节）就够了。&lt;/p&gt;</summary>
    
    
    
    <category term="大数据" scheme="http://xubatian.cn/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
    <category term="Flink" scheme="http://xubatian.cn/tags/Flink/"/>
    
  </entry>
  
  <entry>
    <title>Flink源码分析: Flink on yarn 的 per-job-cluster模式及提交流程</title>
    <link href="http://xubatian.cn/Flink%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-Flink-on-yarn-%E7%9A%84-per-job-cluster%E6%A8%A1%E5%BC%8F%E5%8F%8A%E6%8F%90%E4%BA%A4%E6%B5%81%E7%A8%8B/"/>
    <id>http://xubatian.cn/Flink%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-Flink-on-yarn-%E7%9A%84-per-job-cluster%E6%A8%A1%E5%BC%8F%E5%8F%8A%E6%8F%90%E4%BA%A4%E6%B5%81%E7%A8%8B/</id>
    <published>2022-02-19T06:57:08.000Z</published>
    <updated>2022-02-19T07:36:46.363Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Flink-on-Yarn"><a href="#Flink-on-Yarn" class="headerlink" title="Flink on Yarn"></a>Flink on Yarn</h3><p>​        Flink提供了两种在yarn上运行的模式，分别为<strong>Session-Cluster和Per-Job-Cluster模式</strong>.</p><p>​        Application就是我们的JobManager.</p><p>什么是Session-Cluster呢?</p><p>​        就是多个job或者多个application共享一份集群资源,共享一份yarn session的进程或者共用一个进程中的资源,那个进程叫yarn session<br>什么是Per-Job-Cluster呢?<br>每一个job对应一个yarn session</p><span id="more"></span><p><strong>如图:</strong></p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220219150143.png"></p><h4 id="Session-cluster-模式：（一个作业是失败很可能影响下一个作业的提交）"><a href="#Session-cluster-模式：（一个作业是失败很可能影响下一个作业的提交）" class="headerlink" title="Session-cluster 模式：（一个作业是失败很可能影响下一个作业的提交）"></a>Session-cluster 模式：（一个作业是失败很可能影响下一个作业的提交）</h4><p>yarn session模式<br>一个作业的失败很可能会影响下一个作业的正常提交，因为他一个作业的失败很可能他把所有的资源都占完了，占完了而且你一直都没有停止，没有停止那么其他的作业就无法提交了<br><strong>如图所示:</strong><br>五个Flink Job都是跑在一个Flink的yarn session当中的,这个Flink yarn session可以理解为就是一份资源,这个资源从哪里生成来的呢?是从我们的yarn的ResourceManager中生成来的,生成过来之后他启动一个进程,这个进程我们把它称之为叫yarn session的进程,这个yarn session中包含了一些资源,这些资源允许我们的多个flink job共享这个里面的资源去运行;但是有这种情况,什么情况呢?<br>假设我提交两个flink job提交给这一个yarn session之后,发现我yarn session中的共享资源被占完了,就是满了.什么叫满了呢?就是没有空余的slot(因为我们flink的任务是运行在slot上面的),如图所示:</p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220219150251.png"></p><p>所以,如果我当前yarn session中运行了两个job之后已经没有剩余的slot了,请问后面五个flink job还能提交上去吗?不能,他们会在等待,等待有人释放了slot,然后他们在去抢这些资源======&gt;这就是Session-cluster 模式</p><h4 id="Per-Job-Cluster模式-（一个作业的失败不会影响下一个作业的提交）"><a href="#Per-Job-Cluster模式-（一个作业的失败不会影响下一个作业的提交）" class="headerlink" title="Per-Job-Cluster模式:（一个作业的失败不会影响下一个作业的提交）"></a>Per-Job-Cluster模式:（一个作业的失败不会影响下一个作业的提交）</h4><p>​        这种模式是每一个job会对应一个yarn session集群,所以这个job所对应的yarn session集群他不会和其他的job共享的,他是相互独立的,只要你这台集群总的资源是够大的,那么你就可以源源不断的一直提交新的job,所以两种模式,这一种用的最多,也是最方便的,如图所示:</p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220219150435.png"></p><p><strong>为什么说Per-Job-Cluster模式最方便呢?</strong><br>        因为session-cluster模式在flink job没提交之前我得先把yarn session集群准备好,(多个flink共享一个yarn session集群)所以我在flink job集群提交之前就得把yarn session集群准备好,或者说他早就存在已经有了,我再提交    ;所以一般来说session-cluster这种模式我首先得启动yarn session这个集群<br>   <strong>什么是yarn session集群呢?</strong><br>        Yarn session集群就是由yarn管理的一个flink的包含了JobManager,TaskManager的这么一个集群,如图所示:</p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220219150527.png"></p><p>我独立模式下,一个JobManager里面包含了三个TaskManager,那为什么是三个TaskManager呢?</p><p>因为我的每台机器上都只有一个TaskManager呀!<br>请问这些TaskManager跟Hadoop的yarn有关系吗?<br>没有关系.他被yarn管理吗?<br>不会.他的资源来自于yarn吗?<br>不是,是直接来自于操作系统<br>所以什么叫yarn session的集群?<br><strong>yarn session集群就是由yarn来管理的一个在hadoop内部的一个小的Flink的运行集群,包含了JobManager和多个TaskManager</strong></p><h3 id="简要记录源码阅读过程"><a href="#简要记录源码阅读过程" class="headerlink" title="简要记录源码阅读过程"></a>简要记录源码阅读过程</h3><div style="position: relative; padding: 30% 45%;"><iframe style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;" src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/2022-02-19_15-25-23.mp4" frameborder="no" scrolling="no"></iframe></div> <h3 id="总结per-job-cluster模式及提交流程"><a href="#总结per-job-cluster模式及提交流程" class="headerlink" title="总结per-job-cluster模式及提交流程"></a>总结per-job-cluster模式及提交流程</h3><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220219150738.png"></p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220219150939.png"></p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;Flink-on-Yarn&quot;&gt;&lt;a href=&quot;#Flink-on-Yarn&quot; class=&quot;headerlink&quot; title=&quot;Flink on Yarn&quot;&gt;&lt;/a&gt;Flink on Yarn&lt;/h3&gt;&lt;p&gt;​        Flink提供了两种在yarn上运行的模式，分别为&lt;strong&gt;Session-Cluster和Per-Job-Cluster模式&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;​        Application就是我们的JobManager.&lt;/p&gt;
&lt;p&gt;什么是Session-Cluster呢?&lt;/p&gt;
&lt;p&gt;​        就是多个job或者多个application共享一份集群资源,共享一份yarn session的进程或者共用一个进程中的资源,那个进程叫yarn session&lt;br&gt;什么是Per-Job-Cluster呢?&lt;br&gt;每一个job对应一个yarn session&lt;/p&gt;</summary>
    
    
    
    <category term="大数据" scheme="http://xubatian.cn/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
    <category term="Flink" scheme="http://xubatian.cn/tags/Flink/"/>
    
  </entry>
  
  <entry>
    <title>Flink SQL 案例代码: 使用连接器的方式读取Kafka的数据</title>
    <link href="http://xubatian.cn/Flink-SQL-%E6%A1%88%E4%BE%8B%E4%BB%A3%E7%A0%81-%E4%BD%BF%E7%94%A8%E8%BF%9E%E6%8E%A5%E5%99%A8%E7%9A%84%E6%96%B9%E5%BC%8F%E8%AF%BB%E5%8F%96Kafka%E7%9A%84%E6%95%B0%E6%8D%AE/"/>
    <id>http://xubatian.cn/Flink-SQL-%E6%A1%88%E4%BE%8B%E4%BB%A3%E7%A0%81-%E4%BD%BF%E7%94%A8%E8%BF%9E%E6%8E%A5%E5%99%A8%E7%9A%84%E6%96%B9%E5%BC%8F%E8%AF%BB%E5%8F%96Kafka%E7%9A%84%E6%95%B0%E6%8D%AE/</id>
    <published>2022-02-17T10:31:22.000Z</published>
    <updated>2022-02-19T13:19:16.455Z</updated>
    
    <content type="html"><![CDATA[<p>注意: 在将动态表转换为 DataStream 时，只支持 append 流和 retract 流。<br>         只有当我们对接Hbase,ES等这些外部系统的时候才会有upsert模式.</p><span id="more"></span><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.shangbaishuyao.demo.FlinkDemo10;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.table.api.DataTypes;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.table.api.Table;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.table.api.bridge.java.StreamTableEnvironment;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.table.descriptors.Json;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.table.descriptors.Kafka;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.table.descriptors.Schema;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.types.Row;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.consumer.ConsumerConfig;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.apache.flink.table.api.Expressions.$;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 表到流的转换:</span></span><br><span class="line"><span class="comment"> * Append-only 流（追加流）</span></span><br><span class="line"><span class="comment"> * Retract 流（撤回流，使用聚合操作，count，sum等）</span></span><br><span class="line"><span class="comment"> * Upsert 流(更新流,直接更新)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 注意: 在将动态表转换为 DataStream 时，只支持 append 流和 retract 流。</span></span><br><span class="line"><span class="comment"> * 只有当我们对接Hbase,ES等这些外部系统的时候才会有upsert模式.</span></span><br><span class="line"><span class="comment"> * Author: shangbaishuyao</span></span><br><span class="line"><span class="comment"> * Date: 13:29 2021/4/23</span></span><br><span class="line"><span class="comment"> * Desc:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlinkSQL04_Source_Kafka</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//1.获取执行环境</span></span><br><span class="line">        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">        env.setParallelism(<span class="number">1</span>);</span><br><span class="line">        StreamTableEnvironment tableEnv = StreamTableEnvironment.create(env);</span><br><span class="line">        <span class="comment">//2.使用连接器的方式读取Kafka的数据</span></span><br><span class="line">        tableEnv.connect(<span class="keyword">new</span> Kafka()</span><br><span class="line">                .version(<span class="string">&quot;universal&quot;</span>)</span><br><span class="line">                .topic(<span class="string">&quot;test&quot;</span>)</span><br><span class="line">                .startFromLatest()</span><br><span class="line">                .property(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, <span class="string">&quot;hadoop102:9092&quot;</span>)</span><br><span class="line">                .property(ConsumerConfig.GROUP_ID_CONFIG, <span class="string">&quot;shangbaishuyao&quot;</span>))</span><br><span class="line">                .withSchema(<span class="keyword">new</span> Schema()</span><br><span class="line">                        .field(<span class="string">&quot;id&quot;</span>, DataTypes.STRING())</span><br><span class="line">                        .field(<span class="string">&quot;ts&quot;</span>, DataTypes.BIGINT())</span><br><span class="line">                        .field(<span class="string">&quot;vc&quot;</span>, DataTypes.INT()))</span><br><span class="line">                .withFormat(<span class="keyword">new</span> Json())</span><br><span class="line"><span class="comment">//                .withFormat(new Csv())</span></span><br><span class="line">                .createTemporaryTable(<span class="string">&quot;sensor&quot;</span>);</span><br><span class="line">        <span class="comment">//3.使用连接器创建表</span></span><br><span class="line">        Table sensor = tableEnv.from(<span class="string">&quot;sensor&quot;</span>);</span><br><span class="line">        <span class="comment">//4.查询数据</span></span><br><span class="line">        Table resultTable = sensor.groupBy($(<span class="string">&quot;id&quot;</span>))</span><br><span class="line">                .select($(<span class="string">&quot;id&quot;</span>), $(<span class="string">&quot;id&quot;</span>).count());</span><br><span class="line">        <span class="comment">//6.将表转换为流进行输出</span></span><br><span class="line">        tableEnv.toRetractStream(resultTable, Row.class).print();</span><br><span class="line">        <span class="comment">//7.执行任务</span></span><br><span class="line">        env.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;注意: 在将动态表转换为 DataStream 时，只支持 append 流和 retract 流。&lt;br&gt;         只有当我们对接Hbase,ES等这些外部系统的时候才会有upsert模式.&lt;/p&gt;</summary>
    
    
    
    <category term="大数据" scheme="http://xubatian.cn/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
    <category term="Flink" scheme="http://xubatian.cn/tags/Flink/"/>
    
  </entry>
  
  <entry>
    <title>Flink SQL 案例代码: 使用Connect方式读取文本数据</title>
    <link href="http://xubatian.cn/Flink-SQL-%E6%A1%88%E4%BE%8B%E4%BB%A3%E7%A0%81-%E4%BD%BF%E7%94%A8Connect%E6%96%B9%E5%BC%8F%E8%AF%BB%E5%8F%96%E6%96%87%E6%9C%AC%E6%95%B0%E6%8D%AE/"/>
    <id>http://xubatian.cn/Flink-SQL-%E6%A1%88%E4%BE%8B%E4%BB%A3%E7%A0%81-%E4%BD%BF%E7%94%A8Connect%E6%96%B9%E5%BC%8F%E8%AF%BB%E5%8F%96%E6%96%87%E6%9C%AC%E6%95%B0%E6%8D%AE/</id>
    <published>2022-02-17T10:29:50.000Z</published>
    <updated>2022-02-19T13:19:01.448Z</updated>
    
    <content type="html"><![CDATA[<p>注意: 在将动态表转换为 DataStream 时，只支持 append 流和 retract 流。<br>     只有当我们对接Hbase,ES等这些外部系统的时候才会有upsert模式.</p><span id="more"></span><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.shangbaishuyao.demo.FlinkDemo10;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.java.tuple.Tuple2;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.DataStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.table.api.DataTypes;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.table.api.Table;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.table.api.bridge.java.StreamTableEnvironment;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.table.descriptors.Csv;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.table.descriptors.FileSystem;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.table.descriptors.Schema;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.types.Row;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.apache.flink.table.api.Expressions.$;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 表到流的转换:</span></span><br><span class="line"><span class="comment"> * Append-only 流（追加流）</span></span><br><span class="line"><span class="comment"> * Retract 流（撤回流，使用聚合操作，count，sum等）</span></span><br><span class="line"><span class="comment"> * Upsert 流(更新流,直接更新)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 注意: 在将动态表转换为 DataStream 时，只支持 append 流和 retract 流。</span></span><br><span class="line"><span class="comment"> * 只有当我们对接Hbase,ES等这些外部系统的时候才会有upsert模式.</span></span><br><span class="line"><span class="comment"> * Author: shangbaishuyao</span></span><br><span class="line"><span class="comment"> * Date: 13:28 2021/4/23</span></span><br><span class="line"><span class="comment"> * Desc:  使用Connect方式读取文本数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlinkSQL03_Source_File</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//1.获取执行环境</span></span><br><span class="line">        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">        env.setParallelism(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//1.创建表的执行环境</span></span><br><span class="line">        StreamTableEnvironment tableEnv = StreamTableEnvironment.create(env);</span><br><span class="line">        <span class="comment">//2.使用Connect方式读取文本数据</span></span><br><span class="line">        tableEnv.connect(<span class="keyword">new</span> FileSystem().path(<span class="string">&quot;/Users/shangbaishuyao/warehouse/IDEA_WorkSpace/Flink_WorkSpace/flink-learning-from-zhisheng/flink-1.12.0-Demo/input/sensor.txt&quot;</span>))</span><br><span class="line">                .withSchema(<span class="keyword">new</span> Schema()</span><br><span class="line">                        .field(<span class="string">&quot;id&quot;</span>, DataTypes.STRING())</span><br><span class="line">                        .field(<span class="string">&quot;ts&quot;</span>, DataTypes.BIGINT())</span><br><span class="line">                        .field(<span class="string">&quot;vc&quot;</span>, DataTypes.INT()))</span><br><span class="line">                .withFormat(<span class="keyword">new</span> Csv().fieldDelimiter(<span class="string">&#x27;,&#x27;</span>).lineDelimiter(<span class="string">&quot;\n&quot;</span>))</span><br><span class="line">                .createTemporaryTable(<span class="string">&quot;sensor&quot;</span>);</span><br><span class="line">        <span class="comment">//3.将连接器应用,转换为表</span></span><br><span class="line">        Table sensor = tableEnv.from(<span class="string">&quot;sensor&quot;</span>);</span><br><span class="line">        <span class="comment">//4.查询</span></span><br><span class="line">        Table resultTable = sensor.groupBy($(<span class="string">&quot;id&quot;</span>))</span><br><span class="line">                .select($(<span class="string">&quot;id&quot;</span>), $(<span class="string">&quot;id&quot;</span>).count().as(<span class="string">&quot;ct&quot;</span>));</span><br><span class="line">        <span class="comment">//5.转换为流进行输出</span></span><br><span class="line">        DataStream&lt;Tuple2&lt;Boolean, Row&gt;&gt; tuple2DataStream = tableEnv.toRetractStream(resultTable, Row.class);</span><br><span class="line">        <span class="comment">//6.打印数据</span></span><br><span class="line">        tuple2DataStream.print();</span><br><span class="line">        <span class="comment">//7.执行任务</span></span><br><span class="line">        env.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;注意: 在将动态表转换为 DataStream 时，只支持 append 流和 retract 流。&lt;br&gt;     只有当我们对接Hbase,ES等这些外部系统的时候才会有upsert模式.&lt;/p&gt;</summary>
    
    
    
    <category term="大数据" scheme="http://xubatian.cn/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
    <category term="Flink" scheme="http://xubatian.cn/tags/Flink/"/>
    
  </entry>
  
  <entry>
    <title>Flink SQL 案例代码: 将Stream流转化成Table聚合操作, 求总和,某个count或者sum将转为Stream打印</title>
    <link href="http://xubatian.cn/Flink-SQL-%E6%A1%88%E4%BE%8B%E4%BB%A3%E7%A0%81-%E5%B0%86Stream%E6%B5%81%E8%BD%AC%E5%8C%96%E6%88%90Table%E8%81%9A%E5%90%88%E6%93%8D%E4%BD%9C-%E6%B1%82%E6%80%BB%E5%92%8C-%E6%9F%90%E4%B8%AAcount%E6%88%96%E8%80%85sum%E5%B0%86%E8%BD%AC%E4%B8%BAStream%E6%89%93%E5%8D%B0/"/>
    <id>http://xubatian.cn/Flink-SQL-%E6%A1%88%E4%BE%8B%E4%BB%A3%E7%A0%81-%E5%B0%86Stream%E6%B5%81%E8%BD%AC%E5%8C%96%E6%88%90Table%E8%81%9A%E5%90%88%E6%93%8D%E4%BD%9C-%E6%B1%82%E6%80%BB%E5%92%8C-%E6%9F%90%E4%B8%AAcount%E6%88%96%E8%80%85sum%E5%B0%86%E8%BD%AC%E4%B8%BAStream%E6%89%93%E5%8D%B0/</id>
    <published>2022-02-17T10:24:06.000Z</published>
    <updated>2022-02-19T13:21:53.445Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">表到流的转换:</span><br><span class="line"> Append-only 流（追加流）</span><br><span class="line"> Retract 流（撤回流，使用聚合操作，count，sum等）</span><br><span class="line"> Upsert 流(更新流,直接更新)</span><br><span class="line">注意: 在将动态表转换为 DataStream 时，只支持 append 流和 retract 流。</span><br><span class="line">  只有当我们对接Hbase,ES等这些外部系统的时候才会有upsert模式.</span><br><span class="line">  注意: 聚合操作需要使用撤回流,不能使用追加流</span><br></pre></td></tr></table></figure><span id="more"></span><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.shangbaishuyao.demo.FlinkDemo10;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.shangbaishuyao.demo.bean.WaterSensor;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.java.tuple.Tuple2;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.DataStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.SingleOutputStreamOperator;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.table.api.Table;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.table.api.bridge.java.StreamTableEnvironment;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.types.Row;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 表到流的转换:</span></span><br><span class="line"><span class="comment"> * Append-only 流（追加流）</span></span><br><span class="line"><span class="comment"> * Retract 流（撤回流，使用聚合操作，count，sum等）</span></span><br><span class="line"><span class="comment"> * Upsert 流(更新流,直接更新)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 注意: 在将动态表转换为 DataStream 时，只支持 append 流和 retract 流。</span></span><br><span class="line"><span class="comment"> * 只有当我们对接Hbase,ES等这些外部系统的时候才会有upsert模式.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Author: shangbaishuyao</span></span><br><span class="line"><span class="comment"> * Date: 13:28 2021/4/23</span></span><br><span class="line"><span class="comment"> * Desc: 聚合操作, 求总和,某个count或者sum</span></span><br><span class="line"><span class="comment"> * 注意: 聚合操作需要使用撤回流,不能使用追加流</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlinkSQL02_StreamToTable_Agg</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//1.获取流执行环境</span></span><br><span class="line">        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">        env.setParallelism(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//2.读取端口数据创建流并装换为JavaBean</span></span><br><span class="line">        SingleOutputStreamOperator&lt;WaterSensor&gt; waterSensorDS = env.socketTextStream(<span class="string">&quot;hadoop102&quot;</span>, <span class="number">9999</span>)</span><br><span class="line">                .map(data -&gt; &#123;</span><br><span class="line">                    String[] split = data.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> WaterSensor(split[<span class="number">0</span>],</span><br><span class="line">                            Long.parseLong(split[<span class="number">1</span>]),</span><br><span class="line">                            Integer.parseInt(split[<span class="number">2</span>]));</span><br><span class="line">                &#125;);</span><br><span class="line">        <span class="comment">//3.创建表执行环境</span></span><br><span class="line">        StreamTableEnvironment tableEnv = StreamTableEnvironment.create(env);</span><br><span class="line">        <span class="comment">//4.将流转换为动态表</span></span><br><span class="line">        Table sensorTable = tableEnv.fromDataStream(waterSensorDS);</span><br><span class="line">        <span class="comment">//5.使用TableAPI 实现 : select id,sum(vc) from sensor where vc&gt;=20 group by id;</span></span><br><span class="line">        <span class="comment">//TODO Flink V1.12.0新版本的写法</span></span><br><span class="line"><span class="comment">//        Table selectTable = sensorTable</span></span><br><span class="line"><span class="comment">//                .where($(&quot;vc&quot;).isGreaterOrEqual(20)) //水位线大于等于20的</span></span><br><span class="line"><span class="comment">//                .groupBy($(&quot;id&quot;))                    //做聚合操作肯定是要分组</span></span><br><span class="line"><span class="comment">//                .aggregate($(&quot;vc&quot;).sum().as(&quot;sum_vc&quot;)) //聚合vc 按照sum聚合,区别名sum_vc</span></span><br><span class="line"><span class="comment">//                .select($(&quot;id&quot;), $(&quot;sum_vc&quot;));       //查询数据, id可以查,但是ts不能查询,因为我并没有按照ts进行聚合</span></span><br><span class="line">        <span class="comment">//TODO 老版本的写法</span></span><br><span class="line">        Table selectTable = sensorTable</span><br><span class="line">                .groupBy(<span class="string">&quot;id&quot;</span>)</span><br><span class="line">                .select(<span class="string">&quot;id,id.sum&quot;</span>);</span><br><span class="line">        <span class="comment">//6.将selectTable转换为流进行输出</span></span><br><span class="line">        <span class="comment">// toAppendStream: 追加. 来一条数据往动态表里面去追加,来一条追加一条. 但是涉及到一个问题, 第一条数据20则输出20,第二条数据20,应该输出40,但是以前的20怎么办呢?</span></span><br><span class="line">        <span class="comment">// 会报错. toAppendStream 追加流. 聚合操作本来是20, 但是追加后是40, 这个40能聚合进去吗?不能,不然我同一个id出现了多次.</span></span><br><span class="line">        <span class="comment">// 所以我们使用toRetractStream 撤回流. 这个Boolean是干什么用的呢? 是问你要不要撤回.</span></span><br><span class="line">        DataStream&lt;Tuple2&lt;Boolean, Row&gt;&gt; rowDataStream = tableEnv.toRetractStream(selectTable, Row.class);</span><br><span class="line">        rowDataStream.print();</span><br><span class="line">        <span class="comment">//7.执行任务</span></span><br><span class="line">        env.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>源码地址: <a href="https://github.com/ShangBaiShuYao/flink-learning-from-zhisheng/blob/main/flink-1.12.0-Demo/src/main/java/com/shangbaishuyao/demo/FlinkDemo10/FlinkSQL02_StreamToTable_Agg.java">https://github.com/ShangBaiShuYao/flink-learning-from-zhisheng/blob/main/flink-1.12.0-Demo/src/main/java/com/shangbaishuyao/demo/FlinkDemo10/FlinkSQL02_StreamToTable_Agg.java</a></p>]]></content>
    
    
    <summary type="html">&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;表到流的转换:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; Append-only 流（追加流）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; Retract 流（撤回流，使用聚合操作，count，sum等）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; Upsert 流(更新流,直接更新)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;注意: 在将动态表转换为 DataStream 时，只支持 append 流和 retract 流。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 		 只有当我们对接Hbase,ES等这些外部系统的时候才会有upsert模式.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 		 注意: 聚合操作需要使用撤回流,不能使用追加流&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="大数据" scheme="http://xubatian.cn/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
    <category term="Flink" scheme="http://xubatian.cn/tags/Flink/"/>
    
  </entry>
  
  <entry>
    <title>Flink SQL 案例代码: 将Stream流转化成Table</title>
    <link href="http://xubatian.cn/Flink-SQL-%E6%A1%88%E4%BE%8B%E4%BB%A3%E7%A0%81-%E5%B0%86Stream%E6%B5%81%E8%BD%AC%E5%8C%96%E6%88%90Table/"/>
    <id>http://xubatian.cn/Flink-SQL-%E6%A1%88%E4%BE%8B%E4%BB%A3%E7%A0%81-%E5%B0%86Stream%E6%B5%81%E8%BD%AC%E5%8C%96%E6%88%90Table/</id>
    <published>2022-02-17T10:13:46.000Z</published>
    <updated>2022-02-19T13:22:02.459Z</updated>
    
    <content type="html"><![CDATA[<p>将流转换成表,再将表转换成流打印</p><span id="more"></span><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.shangbaishuyao.demo.FlinkDemo10;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.shangbaishuyao.demo.bean.WaterSensor;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.java.tuple.Tuple2;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.DataStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.SingleOutputStreamOperator;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.table.api.Table;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.table.api.bridge.java.StreamTableEnvironment;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.types.Row;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.apache.flink.table.api.Expressions.$;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Author: shangbaishuyao</span></span><br><span class="line"><span class="comment"> * Date: 21:53 2021/4/23</span></span><br><span class="line"><span class="comment"> * Desc: 测试Flink SQL: 由Stream流转化成Table</span></span><br><span class="line"><span class="comment"> * 将流转换成表,再将表转换成流打印</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlinkSQL01_StreamToTable_Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//1.获取流执行环境</span></span><br><span class="line">        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">        <span class="comment">//设置并行度</span></span><br><span class="line">        env.setParallelism(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//2.读取端口数据创建流并装换为JavaBean</span></span><br><span class="line">        SingleOutputStreamOperator&lt;WaterSensor&gt; waterSensorDS = env.socketTextStream(<span class="string">&quot;hadoop102&quot;</span>, <span class="number">9999</span>)</span><br><span class="line">                .map(data -&gt; &#123;</span><br><span class="line">                    String[] split = data.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> WaterSensor(split[<span class="number">0</span>],</span><br><span class="line">                            Long.parseLong(split[<span class="number">1</span>]),</span><br><span class="line">                            Integer.parseInt(split[<span class="number">2</span>]));</span><br><span class="line">                &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.创建表执行环境</span></span><br><span class="line"><span class="comment">//        StreamTableEnvironment tableEnv = StreamTableEnvironment.create(env);</span></span><br><span class="line">        StreamTableEnvironment tableEnv = StreamTableEnvironment.create(env);</span><br><span class="line"><span class="comment">//        tableEnv.sqlQuery();</span></span><br><span class="line">        <span class="comment">//4.将流转换为动态表</span></span><br><span class="line"><span class="comment">//        Table sensorTable = tableEnv.fromDataStream(waterSensorDS);</span></span><br><span class="line">        Table sensorTable = tableEnv.fromDataStream(waterSensorDS);</span><br><span class="line">        <span class="comment">//5.使用TableAPI过滤出&quot;ws_001&quot;的数据,其他字段都保留</span></span><br><span class="line">        <span class="comment">//TODO Flink V1.12.0写法</span></span><br><span class="line">        Table selectTable = sensorTable</span><br><span class="line">                .where($(<span class="string">&quot;id&quot;</span>).isEqual(<span class="string">&quot;ws_001&quot;</span>)) <span class="comment">//过滤</span></span><br><span class="line">                .select($(<span class="string">&quot;id&quot;</span>), $(<span class="string">&quot;ts&quot;</span>), $(<span class="string">&quot;vc&quot;</span>)); <span class="comment">//过滤完后你要查什么东西</span></span><br><span class="line">        <span class="comment">//TODO 老版本写法.</span></span><br><span class="line"><span class="comment">//        Table selectTable = sensorTable</span></span><br><span class="line"><span class="comment">//                .where(&quot;id =&#x27;ws_001&#x27;&quot;)</span></span><br><span class="line"><span class="comment">//                .select(&quot;id,ts,vc&quot;);</span></span><br><span class="line">        <span class="comment">//6.将selectTable转换为流进行输出</span></span><br><span class="line"><span class="comment">//        DataStream&lt;Row&gt; rowDataStream = tableEnv.toAppendStream(selectTable, Row.class);</span></span><br><span class="line">        DataStream&lt;Tuple2&lt;Boolean, Row&gt;&gt; rowDataStream = tableEnv.toRetractStream(selectTable, Row.class);<span class="comment">//Row.class这是通用的类</span></span><br><span class="line">        rowDataStream.print();</span><br><span class="line">        <span class="comment">//7.执行任务</span></span><br><span class="line">        env.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>代码地址: <a href="https://github.com/ShangBaiShuYao/flink-learning-from-zhisheng/blob/main/flink-1.12.0-Demo/src/main/java/com/shangbaishuyao/demo/FlinkDemo10/FlinkSQL01_StreamToTable_Test.java">https://github.com/ShangBaiShuYao/flink-learning-from-zhisheng/blob/main/flink-1.12.0-Demo/src/main/java/com/shangbaishuyao/demo/FlinkDemo10/FlinkSQL01_StreamToTable_Test.java</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;将流转换成表,再将表转换成流打印&lt;/p&gt;</summary>
    
    
    
    <category term="大数据" scheme="http://xubatian.cn/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
    <category term="Flink" scheme="http://xubatian.cn/tags/Flink/"/>
    
  </entry>
  
  <entry>
    <title>kafka3.0.0之kafka概述</title>
    <link href="http://xubatian.cn/kafka3-0-0%E4%B9%8Bkafka%E6%A6%82%E8%BF%B0/"/>
    <id>http://xubatian.cn/kafka3-0-0%E4%B9%8Bkafka%E6%A6%82%E8%BF%B0/</id>
    <published>2022-02-17T04:53:43.000Z</published>
    <updated>2022-02-17T06:43:43.999Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220217124445.png"></p><span id="more"></span><h2 id="Kafka-概述"><a href="#Kafka-概述" class="headerlink" title="Kafka 概述"></a><strong>Kafka</strong> <strong>概述</strong></h2><h3 id="kafka定义"><a href="#kafka定义" class="headerlink" title="kafka定义"></a>kafka定义</h3><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220217125929.png"></p><h3 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h3><p>​            目 前企 业中比 较常 见的 消息 队列产 品主 要有 Kafka、ActiveMQ 、RabbitMQ 、RocketMQ 等。<br>​            在大数据场景主要采用 Kafka 作为消息队列。在 JavaEE 开发中主要采用 ActiveMQ、RabbitMQ、RocketMQ。</p><h3 id="传统消息队列的应用场景"><a href="#传统消息队列的应用场景" class="headerlink" title="传统消息队列的应用场景"></a>传统消息队列的应用场景</h3><p>​        传统的消息队列的主要应用场景包括：缓存/消峰、解耦和异步通信。</p><h4 id="消息队列的应用场景——缓冲-消峰"><a href="#消息队列的应用场景——缓冲-消峰" class="headerlink" title="消息队列的应用场景——缓冲/消峰"></a>消息队列的应用场景——缓冲/消峰</h4><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220217130109.png"></p><h4 id="消息队列的应用场景——解耦"><a href="#消息队列的应用场景——解耦" class="headerlink" title="消息队列的应用场景——解耦"></a>消息队列的应用场景——解耦</h4><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220217130150.png"></p><h4 id="消息队列的应用场景——异步通信"><a href="#消息队列的应用场景——异步通信" class="headerlink" title="消息队列的应用场景——异步通信"></a>消息队列的应用场景——异步通信</h4><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220217130231.png"></p><h3 id="消息队列的两种模式-Rabbit-MQ-Active-MQ-kafka"><a href="#消息队列的两种模式-Rabbit-MQ-Active-MQ-kafka" class="headerlink" title="消息队列的两种模式(Rabbit MQ,Active MQ,kafka)"></a>消息队列的两种模式(Rabbit MQ,Active MQ,kafka)</h3><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220217130446.png"></p><h3 id="Kafka-基础架构"><a href="#Kafka-基础架构" class="headerlink" title="Kafka 基础架构"></a>Kafka 基础架构</h3><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220217130607.png"></p><p>100T的数据存储到一台服务器上,一台服务器一般是8-90T. 所以不能存下. 所以,遇到海量数据分而治之. 把100T数据切分成几块来处理.</p><p>​    kafka也是采用这种思想. 把100T的数据切割成几块来处理. 就是把一个主题的数据分割成多个partition分区. 100T的数据存到一个主题里面,但是因为数据太大. 我们把这个主题又分为多个分区. 即,100T的数据发往topicA主题当中, 但是我每一台服务器都无法同时存储下这100T数据. 所以我们把这100T数据切割成n份分区.每一个服务器只存储30多T的数据.(broker0,broker1,broker2代表hadoop101,102,103对应的主题名称,即三台服务器)</p><p>​    既然生产切分了,消费要并行消费才会很快. 所以就有消费者组的概念, 消费者组里面有n个消费者,每一个人负责对应的分区. 消费者组就消费你这个topic主题.这样消费就很快. <strong>一个分区的数据只能由一个消费者来消费.</strong></p><h4 id="如果一个分区挂了怎么办呢"><a href="#如果一个分区挂了怎么办呢" class="headerlink" title="如果一个分区挂了怎么办呢?"></a>如果一个分区挂了怎么办呢?</h4><p>​        考虑到可靠性,kafka可以增加副本. hadoop里面的副本是一样的.但是kafka里面的副本分为 leader和 follower.</p><p>无论是生产者和消费者,生产消费的时候只针对leader这个副本进行生产和消费. follower的作用就是,当你的leader挂掉之后,follower有条件成为新的leader.</p><h4 id="zookeeper上存了kafka的那些信息"><a href="#zookeeper上存了kafka的那些信息" class="headerlink" title="zookeeper上存了kafka的那些信息?"></a>zookeeper上存了kafka的那些信息?</h4><p>​      kafka有一部分信息存在zookeeper里面的.他帮kafka来存储整个集群中那些服务器上线了.也就是记录服务器运行的节点状态.zookeeper还会帮你记录每一个分区谁是leader. 这样后续生产和消费的时候直接找leader. Kafka2.8.0之前,kafka必须要有zookeeper进行配合使用.2.8.0之后就不是必须的了.他是可选的.</p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220217130719.png"></p><p>​    </p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220217124445.png&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="大数据" scheme="http://xubatian.cn/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
    <category term="Kafka" scheme="http://xubatian.cn/tags/Kafka/"/>
    
  </entry>
  
</feed>
