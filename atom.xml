<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>我的梦想是星辰大海</title>
  
  <subtitle>知识源于积累,登峰造极源于自律</subtitle>
  <link href="http://xubatian.cn/atom.xml" rel="self"/>
  
  <link href="http://xubatian.cn/"/>
  <updated>2022-02-15T16:10:09.797Z</updated>
  <id>http://xubatian.cn/</id>
  
  <author>
    <name>xubatian</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>央视直播</title>
    <link href="http://xubatian.cn/%E5%A4%AE%E8%A7%86%E7%9B%B4%E6%92%AD/"/>
    <id>http://xubatian.cn/%E5%A4%AE%E8%A7%86%E7%9B%B4%E6%92%AD/</id>
    <published>2022-02-15T16:06:42.000Z</published>
    <updated>2022-02-15T16:10:09.797Z</updated>
    
    <content type="html"><![CDATA[<h2 id="关注央视网-关注国家最新动态"><a href="#关注央视网-关注国家最新动态" class="headerlink" title="关注央视网,关注国家最新动态"></a><a href="https://2022.cctv.com/live/cctv1/index.shtml?spm=C73465.PnE5ZJN2e0Bi.EHVA0D7NetYz.39">关注央视网,关注国家最新动态</a></h2><span id="more"></span><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220216000755.png"></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;关注央视网-关注国家最新动态&quot;&gt;&lt;a href=&quot;#关注央视网-关注国家最新动态&quot; class=&quot;headerlink&quot; title=&quot;关注央视网,关注国家最新动态&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://2022.cctv.com/live/cctv1/index.shtml?spm=C73465.PnE5ZJN2e0Bi.EHVA0D7NetYz.39&quot;&gt;关注央视网,关注国家最新动态&lt;/a&gt;&lt;/h2&gt;</summary>
    
    
    
    <category term="轻松一刻" scheme="http://xubatian.cn/categories/%E8%BD%BB%E6%9D%BE%E4%B8%80%E5%88%BB/"/>
    
    
    <category term="轻松一刻" scheme="http://xubatian.cn/tags/%E8%BD%BB%E6%9D%BE%E4%B8%80%E5%88%BB/"/>
    
  </entry>
  
  <entry>
    <title>Spark原理与实现: Spark SQL编程</title>
    <link href="http://xubatian.cn/Spark%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E7%8E%B0-Spark-SQL%E7%BC%96%E7%A8%8B/"/>
    <id>http://xubatian.cn/Spark%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E7%8E%B0-Spark-SQL%E7%BC%96%E7%A8%8B/</id>
    <published>2022-02-15T15:27:25.000Z</published>
    <updated>2022-02-15T15:44:49.053Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spark-SQL编程"><a href="#Spark-SQL编程" class="headerlink" title="Spark SQL编程"></a>Spark SQL编程</h1><p>注意: 建表一定是数据集,对数据集进行建表即用df. 而执行SQL是spark.sql()</p><h1 id="SparkSession新的起始点"><a href="#SparkSession新的起始点" class="headerlink" title="SparkSession新的起始点"></a>SparkSession新的起始点</h1><p>​        在老的版本中，SparkSQL提供两种SQL查询起始点：一个叫SQLContext，用于Spark自己提供的SQL查询；一个叫HiveContext，用于连接Hive的查询。<br>​        现在是使用的是SparkSession了.实际上就是将两个结合了.所以你很方便的去查寻一个json文件,也可以查询一个hive数据.统一的数据入口<br>​        SparkSession是Spark最新的SQL查询起始点，实质上是SQLContext和HiveContext的组合，所以在SQLContex和HiveContext上可用的API在SparkSession上同样是可以使用的。SparkSession内部封装了sparkContext，所以计算实际上是由sparkContext完成的。<br>在Spark SQL中SparkSession是创建DataFrame和执行SQL的入口</p><span id="more"></span><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220215232827.png"></p><p>DataFrame和dataset可以相互转换. DataFrame是Dataset里面的一种特殊形式</p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220215232850.png"></p><p>ResultSet():这个方法很恶心,就是编译期不做类型校验,但是你一运行就会报类型转换异常</p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220215232913.png"></p><h1 id="DataFrame"><a href="#DataFrame" class="headerlink" title="DataFrame"></a>DataFrame</h1><h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">在Spark SQL中SparkSession是创建DataFrame和执行SQL的入口，所以DataFrame的创建是来自于sparkSession.从sparkSession中去找.而sparkSession是依赖于sparkContext来构建的.它里面放了一个sparkcontext对象,你可以拿出来. 你也可以直接通过SparkConf来创建一个SparkSession.但是这种方式它里面也是在构建sparkSession之前构建了SparkContext. 因为SparkContext是用于跟Spark集群连接的.</span><br><span class="line"></span><br><span class="line">创建DataFrame有三种方式：</span><br><span class="line">1.通过Spark的数据源进行创建；</span><br><span class="line">2.从一个存在的RDD进行转换；</span><br><span class="line">3.还可以从Hive Table进行查询返回。</span><br></pre></td></tr></table></figure><p>1）从Spark数据源进行创建<br>（1）查看Spark数据源进行创建的文件格式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; spark.read.</span><br><span class="line">csv   format   jdbc   json   load   option   options   orc   parquet   schema   table   text   textFile</span><br></pre></td></tr></table></figure><p>（2）读取json文件创建DataFrame</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; val df = spark.read.json(&quot;/opt/module/spark/examples/src/main/resources/people.json&quot;)</span><br><span class="line">df: org.apache.spark.sql.DataFrame = [age: bigint, name: string]</span><br></pre></td></tr></table></figure><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220215233030.png"></p><p>（3）展示结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; df.show   这里面用的比较多的行动算子,我们之前写sparkCore是用collect的这种方式展现的是有结构信息的</span><br><span class="line">+----+-------+</span><br><span class="line">| age|   name|</span><br><span class="line">+----+-------+</span><br><span class="line">|null|Michael|</span><br><span class="line">|  30|   Andy|</span><br><span class="line">|  19| Justin|</span><br><span class="line">+----+-------+</span><br></pre></td></tr></table></figure><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220215233059.png"></p><p>2）从RDD进行转换<br>      后面讨论<br>3）从Hive Table进行查询返回<br>     后面讨论</p><h2 id="SQL风格语法-主要"><a href="#SQL风格语法-主要" class="headerlink" title="SQL风格语法(主要)"></a>SQL风格语法(主要)</h2><p>1）创建一个DataFrame(注意在DataSet里面定义的一些函数,我DataFrame也是可以用的)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; val df = spark.read.json(&quot;/opt/module/spark/examples/src/main/resources/people.json&quot;)</span><br><span class="line">df: org.apache.spark.sql.DataFrame = [age: bigint, name: string]</span><br></pre></td></tr></table></figure><p>2）对DataFrame创建一个临时表<br>View(视图),视图和table(表)有什么区别呢?视图使用来查的, 而表是用来增删改查的.因为当前的分布式数据集RDD具有不可变性.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; df.createOrReplaceTempView(&quot;people&quot;)  //参数是视图名</span><br></pre></td></tr></table></figure><p>3）通过SQL语句实现查询全表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; val sqlDF = spark.sql(&quot;SELECT * FROM people&quot;)</span><br><span class="line">sqlDF: org.apache.spark.sql.DataFrame = [age: bigint, name: string]</span><br></pre></td></tr></table></figure><p>4）结果展示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; sqlDF.show</span><br><span class="line">+----+-------+</span><br><span class="line">| age|   name|</span><br><span class="line">+----+-------+</span><br><span class="line">|null|Michael|</span><br><span class="line">|  30|   Andy|</span><br><span class="line">|  19| Justin|</span><br><span class="line">+----+-------+</span><br></pre></td></tr></table></figure><p>注意：普通临时表是Session范围内的，如果想应用范围内有效，可以使用全局临时表。使用全局临时表时需要全路径访问，如：global_temp.people</p><p>5）对于DataFrame创建一个全局表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; spark.sql(&quot;SELECT * FROM global_temp.people&quot;).show()</span><br><span class="line">+----+-------+</span><br><span class="line">| age|   name|</span><br><span class="line">+----+-------+</span><br><span class="line">|null|Michael|</span><br><span class="line">|  30|   Andy|</span><br><span class="line">|  19| Justin|</span><br><span class="line"></span><br><span class="line">scala&gt; spark.newSession().sql(&quot;SELECT * FROM global_temp.people&quot;).show()</span><br><span class="line">+----+-------+</span><br><span class="line">| age|   name|</span><br><span class="line">+----+-------+</span><br><span class="line">|null|Michael|</span><br><span class="line">|  30|   Andy|</span><br><span class="line">|  19| Justin|</span><br><span class="line">+----+-------+</span><br></pre></td></tr></table></figure><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220215233353.png"></p><h2 id="DSL风格语法-次要-DSL风格叫领域特定语言"><a href="#DSL风格语法-次要-DSL风格叫领域特定语言" class="headerlink" title="DSL风格语法(次要) (DSL风格叫领域特定语言)"></a>DSL风格语法(次要) (DSL风格叫领域特定语言)</h2><p>DSL风格叫领域特定语言,就是说,他只能在sparkSQL当中能用,换一个地方就不能用了.很恶心.<br>DSL语言风格就是使用select,filter,map等这些函数.</p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220215233442.png"></p><p>1）创建一个DataFrame</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; val df = spark.read.json(&quot;/opt/module/spark/examples/src/main/resources/people.json&quot;)</span><br><span class="line">df: org.apache.spark.sql.DataFrame = [age: bigint, name: string]</span><br></pre></td></tr></table></figure><p>2）查看DataFrame的Schema信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; df.printSchema</span><br><span class="line">root</span><br><span class="line"> |-- age: long (nullable = true)</span><br><span class="line"> |-- name: string (nullable = true)</span><br></pre></td></tr></table></figure><p>3）只查看”name”列数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; df.select(&quot;name&quot;).show()</span><br><span class="line">+-------+</span><br><span class="line">|   name|</span><br><span class="line">+-------+</span><br><span class="line">|Michael|</span><br><span class="line">|   Andy|</span><br><span class="line">| Justin|</span><br><span class="line">+-------+</span><br></pre></td></tr></table></figure><p>4）查看”name”列数据以及”age+1”数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; df.select($&quot;name&quot;, $&quot;age&quot; + 1).show()</span><br><span class="line">+-------+---------+</span><br><span class="line">|   name|(age + 1)|</span><br><span class="line">+-------+---------+</span><br><span class="line">|Michael|     null|</span><br><span class="line">|   Andy|       31|</span><br><span class="line">| Justin|       20|</span><br><span class="line">+-------+---------+</span><br></pre></td></tr></table></figure><p>5）查看”age”大于”21”的数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; df.filter($&quot;age&quot; &gt; 21).show()</span><br><span class="line">+---+----+</span><br><span class="line">|age|name|</span><br><span class="line">+---+----+</span><br><span class="line">| 30|Andy|</span><br><span class="line">+---+----+</span><br></pre></td></tr></table></figure><p>6）按照”age”分组，查看数据条数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; df.groupBy(&quot;age&quot;).count().show()</span><br><span class="line">+----+-----+</span><br><span class="line">| age|count|</span><br><span class="line">+----+-----+</span><br><span class="line">|  19|     1|</span><br><span class="line">|null|     1|</span><br><span class="line">|  30|     1|</span><br><span class="line">+----+-----+</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>创建DataFrame有三种方式：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">4.通过Spark的数据源进行创建；</span><br><span class="line">5.从一个存在的RDD进行转换；</span><br><span class="line">6.还可以从Hive Table进行查询返回。</span><br></pre></td></tr></table></figure><h2 id="RDD转换为DataFrame"><a href="#RDD转换为DataFrame" class="headerlink" title="RDD转换为DataFrame"></a>RDD转换为DataFrame</h2><p>注意：如果需要RDD与DF(DataFrame)或者DS(DataSet)之间操作，那么都需要引入 import spark.implicits._  （spark不是包名，而是sparkSession对象的名称）</p><p>前置条件：导入隐式转换并创建一个RDD</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; import spark.implicits._</span><br><span class="line">import spark.implicits._</span><br><span class="line"></span><br><span class="line">scala&gt; val peopleRDD = sc.textFile(&quot;examples/src/main/resources/people.txt&quot;)</span><br><span class="line">peopleRDD: org.apache.spark.rdd.RDD[String] = examples/src/main/resources/people.txt MapPartitionsRDD[3] at textFile at &lt;console&gt;:27</span><br></pre></td></tr></table></figure><p>1）通过手动确定转换</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; peopleRDD.map&#123;x=&gt;val para = x.split(&quot;,&quot;);(para(0),para(1).trim.toInt)&#125;.toDF(&quot;name&quot;,&quot;age&quot;)</span><br><span class="line">res1: org.apache.spark.sql.DataFrame = [name: string, age: int]</span><br></pre></td></tr></table></figure><p>2）通过反射确定（需要用到样例类）<br>（1）创建一个样例类,样例类其实就是和Java中的类一样</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; case class People(name:String, age:Int)</span><br></pre></td></tr></table></figure><p>（2）根据样例类将RDD转换为DataFrame</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; peopleRDD.map&#123; x =&gt; val para = x.split(&quot;,&quot;);People(para(0),para(1).trim.toInt)&#125;.toDF</span><br><span class="line">res2: org.apache.spark.sql.DataFrame = [name: string, age: int]</span><br></pre></td></tr></table></figure><p>3）通过编程的方式（了解）<br>（1）导入所需的类型</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; import org.apache.spark.sql.types._</span><br><span class="line">import org.apache.spark.sql.types._</span><br></pre></td></tr></table></figure><p>（2）创建Schema</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; val structType: StructType = StructType(StructField(&quot;name&quot;, StringType) :: StructField(&quot;age&quot;, IntegerType) :: Nil)</span><br><span class="line">structType: org.apache.spark.sql.types.StructType = StructType(StructField(name,StringType,true), StructField(age,IntegerType,true))</span><br></pre></td></tr></table></figure><p>（3）导入所需的类型</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; import org.apache.spark.sql.Row</span><br><span class="line">import org.apache.spark.sql.Row</span><br></pre></td></tr></table></figure><p>（4）根据给定的类型创建二元组RDD</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; val data = peopleRDD.map&#123; x =&gt; val para = x.split(&quot;,&quot;);Row(para(0),para(1).trim.toInt)&#125;</span><br><span class="line">data: org.apache.spark.rdd.RDD[org.apache.spark.sql.Row] = MapPartitionsRDD[6] at map at &lt;console&gt;:33</span><br></pre></td></tr></table></figure><p>（5）根据数据及给定的schema创建DataFrame</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; val dataFrame = spark.createDataFrame(data, structType)</span><br><span class="line">dataFrame: org.apache.spark.sql.DataFrame = [name: string, age: int]</span><br></pre></td></tr></table></figure><h2 id="DataFrame转换为RDD"><a href="#DataFrame转换为RDD" class="headerlink" title="DataFrame转换为RDD"></a>DataFrame转换为RDD</h2><p>直接调用rdd即可<br>1）创建一个DataFrame</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; val df = spark.read.json(&quot;/opt/module/spark/examples/src/main/resources/people.json&quot;)</span><br><span class="line">df: org.apache.spark.sql.DataFrame = [age: bigint, name: string]</span><br></pre></td></tr></table></figure><p>2）将DataFrame转换为RDD</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; val dfToRDD = df.rdd</span><br><span class="line">dfToRDD: org.apache.spark.rdd.RDD[org.apache.spark.sql.Row] = MapPartitionsRDD[19] at rdd at &lt;console&gt;:29</span><br></pre></td></tr></table></figure><p>3）打印RDD</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; dfToRDD.collect</span><br><span class="line">res13: Array[org.apache.spark.sql.Row] = Array([Michael, 29], [Andy, 30], [Justin, 19])</span><br></pre></td></tr></table></figure><h1 id="DataSet"><a href="#DataSet" class="headerlink" title="DataSet"></a>DataSet</h1><p>DataSet是具有强类型的数据集合，需要提供对应的类型信息。</p><h2 id="创建-1"><a href="#创建-1" class="headerlink" title="创建"></a>创建</h2><p>1）创建一个样例类</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; case class Person(name: String, age: Long)</span><br><span class="line">defined class Person</span><br></pre></td></tr></table></figure><p>2）创建DataSet</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; val caseClassDS = Seq(Person(&quot;Andy&quot;, 32)).toDS()</span><br><span class="line">caseClassDS: org.apache.spark.sql.Dataset[Person] = [name: string, age: bigint]</span><br></pre></td></tr></table></figure><h2 id="RDD转换为DataSet"><a href="#RDD转换为DataSet" class="headerlink" title="RDD转换为DataSet"></a>RDD转换为DataSet</h2><p>SparkSQL能够自动将包含有case类的RDD转换成DataFrame，case类定义了table的结构，case类属性通过反射变成了表的列名。Case类可以包含诸如Seqs或者Array等复杂的结构。<br>1）创建一个RDD</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; val peopleRDD = sc.textFile(&quot;examples/src/main/resources/people.txt&quot;)</span><br><span class="line">peopleRDD: org.apache.spark.rdd.RDD[String] = examples/src/main/resources/people.txt MapPartitionsRDD[3] at textFile at &lt;console&gt;:27</span><br></pre></td></tr></table></figure><p>2）创建一个样例类</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; case class Person(name: String, age: Long)</span><br><span class="line">defined class Person</span><br></pre></td></tr></table></figure><p>3）将RDD转化为DataSet</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; peopleRDD.map(line =&gt; &#123;val para = line.split(&quot;,&quot;);Person(para(0),para(1).trim.toInt)&#125;).toDS</span><br><span class="line">res8: org.apache.spark.sql.Dataset[Person] = [name: string, age: bigint]</span><br></pre></td></tr></table></figure><h2 id="DataSet转换为RDD"><a href="#DataSet转换为RDD" class="headerlink" title="DataSet转换为RDD"></a>DataSet转换为RDD</h2><p>调用rdd方法即可。<br>1）创建一个DataSet</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; val DS = Seq(Person(&quot;Andy&quot;, 32)).toDS()</span><br><span class="line">DS: org.apache.spark.sql.Dataset[Person] = [name: string, age: bigint]</span><br></pre></td></tr></table></figure><p>2）将DataSet转换为RDD</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; DS.rdd</span><br><span class="line">res11: org.apache.spark.rdd.RDD[Person] = MapPartitionsRDD[15] at rdd at &lt;console&gt;:28</span><br></pre></td></tr></table></figure><h2 id="DataFrame与DataSet的互操作"><a href="#DataFrame与DataSet的互操作" class="headerlink" title="DataFrame与DataSet的互操作"></a>DataFrame与DataSet的互操作</h2><h3 id="DataFrame转DataSet"><a href="#DataFrame转DataSet" class="headerlink" title="DataFrame转DataSet"></a>DataFrame转DataSet</h3><p>1）创建一个DateFrame</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; val df = spark.read.json(&quot;examples/src/main/resources/people.json&quot;)</span><br><span class="line">df: org.apache.spark.sql.DataFrame = [age: bigint, name: string]</span><br></pre></td></tr></table></figure><p>2）创建一个样例类</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; case class Person(name: String, age: Long)</span><br><span class="line">defined class Person</span><br></pre></td></tr></table></figure><p>3）将DataFrame转化为DataSet</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; df.as[Person]</span><br><span class="line">res14: org.apache.spark.sql.Dataset[Person] = [age: bigint, name: string]</span><br></pre></td></tr></table></figure><h3 id="Dataset转DataFrame"><a href="#Dataset转DataFrame" class="headerlink" title="Dataset转DataFrame"></a>Dataset转DataFrame</h3><p>1）创建一个样例类</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; case class Person(name: String, age: Long)</span><br><span class="line">defined class Person</span><br></pre></td></tr></table></figure><p>2）创建DataSet</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; val ds = Seq(Person(&quot;Andy&quot;, 32)).toDS()</span><br><span class="line">ds: org.apache.spark.sql.Dataset[Person] = [name: string, age: bigint]</span><br></pre></td></tr></table></figure><p>3）将DataSet转化为DataFrame</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; val df = ds.toDF</span><br><span class="line">df: org.apache.spark.sql.DataFrame = [name: string, age: bigint]</span><br></pre></td></tr></table></figure><p>4）展示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; df.show</span><br><span class="line">+----+---+</span><br><span class="line">|name|age|</span><br><span class="line">+----+---+</span><br><span class="line">|Andy| 32|</span><br><span class="line">+----+---+</span><br></pre></td></tr></table></figure><p>这种方法就是在给出每一列的类型后，使用as方法，转成Dataset，这在数据类型是DataFrame又需要针对各个字段处理时极为方便。在使用一些特殊的操作时，一定要加上 import spark.implicits._ 不然toDF、toDS无法使用。</p><h2 id="RDD、DataFrame和DataSet"><a href="#RDD、DataFrame和DataSet" class="headerlink" title="RDD、DataFrame和DataSet"></a>RDD、DataFrame和DataSet</h2><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220215234017.png"></p><p>在SparkSQL中Spark为我们提供了两个新的抽象，分别是DataFrame和DataSet。他们和RDD有什么区别呢？首先从版本的产生上来看:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">RDD (Spark1.0) —&gt; Dataframe(Spark1.3) —&gt; Dataset(Spark1.6)</span><br><span class="line">如果同样的数据都给到这三个数据结构，他们分别计算之后，都会给出相同的结果。不同是的他们的执行效率和执行方式。在后期的Spark版本中，DataSet有可能会逐步取代RDD和DataFrame成为唯一的API接口。</span><br></pre></td></tr></table></figure><h3 id="三者的共性"><a href="#三者的共性" class="headerlink" title="三者的共性"></a>三者的共性</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">（1）RDD、DataFrame、DataSet全都是spark平台下的分布式弹性数据集，为处理超大型数据提供便利;</span><br><span class="line">（2）三者都有惰性机制，在进行创建、转换，如map方法时，不会立即执行，只有在遇到Action如foreach时，三者才会开始遍历运算;</span><br><span class="line">（3）三者有许多共同的函数，如filter，排序等;</span><br><span class="line">（4）在对DataFrame和Dataset进行操作许多操作都需要这个包:import spark.implicits._（在创建好SparkSession对象后尽量直接导入）,DataFrame和DataSet特别是和RDD进行操作的时候,则需要引入一个隐式转换.   因为这个spark session对象是由我们启动的spark-shell来给我们创建的,这个spark-shell窗口在启动的时候就已经将隐式转换导入进来了. 那就算把RDD在代码里面转成了样例类对象了,你调用.toDS调用不出来. 因为你没有加隐式转换.  而且这个隐式转换mport spark.implicits._  这个spark看起来像包,但是他不是, 这个spark是sparkSession的对象的对象 </span><br></pre></td></tr></table></figure><h3 id="三者的互相转化"><a href="#三者的互相转化" class="headerlink" title="三者的互相转化"></a>三者的互相转化</h3><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220215234137.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">RDD到DataFrame或者到dataSet,以及DataFrame到DataSet,这个过程我们认为是由简单到复杂,需要加东西的过程. 这一套过程都需要用到一个样例类. </span><br><span class="line">RDD到DataFrame用的是.toDF</span><br><span class="line">RDD到DataSet用的是.toDS</span><br><span class="line">DataFrame到DataSet用的是.as[样例类]</span><br><span class="line"></span><br><span class="line">DataFrame和dataSet到RDD或者Dataset到DataFrame 这是简的过程</span><br><span class="line">DataFrame和DataSet到RDD直接使用.rdd 即可</span><br><span class="line">DataSet到DataFrame使用.toDF</span><br></pre></td></tr></table></figure><h3 id="IDEA创建SparkSQL程序"><a href="#IDEA创建SparkSQL程序" class="headerlink" title="IDEA创建SparkSQL程序"></a>IDEA创建SparkSQL程序</h3><p>1）添加依赖</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.apache.spark&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spark-sql_2.11&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;2.1.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>2）代码实现</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">import org.apache.spark.sql.SparkSession</span><br><span class="line">import org.apache.spark.&#123;SparkConf, SparkContext&#125;</span><br><span class="line"></span><br><span class="line">object HelloWorld &#123;</span><br><span class="line"></span><br><span class="line">  def main(args: Array[String]) &#123;</span><br><span class="line"></span><br><span class="line">    //创建SparkConf()并设置App名称</span><br><span class="line">    val spark = SparkSession</span><br><span class="line">      .builder()</span><br><span class="line"></span><br><span class="line">.master(&quot;local[*]&quot;)</span><br><span class="line">      .appName(&quot;HelloWorld&quot;)</span><br><span class="line">      //.config(&quot;spark.some.config.option&quot;, &quot;some-value&quot;)</span><br><span class="line">      .getOrCreate()</span><br><span class="line"></span><br><span class="line">//导入隐式转换</span><br><span class="line">import spark.implicits._</span><br><span class="line"></span><br><span class="line">//读取本地文件，创建DataFrame</span><br><span class="line">val df = spark.read.json(&quot;examples/src/main/resources/people.json&quot;)</span><br><span class="line"></span><br><span class="line">//打印</span><br><span class="line">df.show()</span><br><span class="line"></span><br><span class="line">//DSL风格：查询年龄在21岁以上的</span><br><span class="line">df.filter($&quot;age&quot; &gt; 21).show()</span><br><span class="line"></span><br><span class="line">//创建临时表</span><br><span class="line">df.createOrReplaceTempView(&quot;persons&quot;)</span><br><span class="line"></span><br><span class="line">//SQL风格：查询年龄在21岁以上的</span><br><span class="line">spark.sql(&quot;SELECT * FROM persons where age &gt; 21&quot;).show()</span><br><span class="line"></span><br><span class="line">//关闭连接</span><br><span class="line">spark.stop()</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="用户自定义函数"><a href="#用户自定义函数" class="headerlink" title="用户自定义函数"></a>用户自定义函数</h2><p>在Shell窗口中可以通过spark.udf功能用户可以自定义函数。</p><h3 id="UDF"><a href="#UDF" class="headerlink" title="UDF"></a>UDF</h3><p>1）创建DataFrame</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; val df = spark.read.json(&quot;examples/src/main/resources/people.json&quot;)</span><br><span class="line">df: org.apache.spark.sql.DataFrame = [age: bigint, name: string]</span><br></pre></td></tr></table></figure><p>2）打印数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; df.show()</span><br><span class="line">+----+-------+</span><br><span class="line">| age|   name|</span><br><span class="line">+----+-------+</span><br><span class="line">|null|Michael|</span><br><span class="line">|  30|   Andy|</span><br><span class="line">|  19| Justin|</span><br><span class="line">+----+-------+</span><br></pre></td></tr></table></figure><p>3）注册UDF，功能为在数据前添加字符串<br>因为自定义函数,最终是在SQL里面去用,所以你得有函数名addName,  后面要有函数如何添加? 相当于你在hive当中自定义的函数. </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; spark.udf.register(&quot;addName&quot;, (x:String)=&gt; &quot;Name:&quot;+x)</span><br><span class="line">res5: org.apache.spark.sql.expressions.UserDefinedFunction = UserDefinedFunction(&lt;function1&gt;,StringType,Some(List(StringType)))</span><br></pre></td></tr></table></figure><p>4）创建临时表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; df.createOrReplaceTempView(&quot;people&quot;)</span><br></pre></td></tr></table></figure><p>5）应用UDF</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; spark.sql(&quot;Select addName(name), age from people&quot;).show()</span><br><span class="line">+-----------------+----+</span><br><span class="line">|UDF:addName(name)| age|</span><br><span class="line">+-----------------+----+</span><br><span class="line">|     Name:Michael|null|</span><br><span class="line">|        Name:Andy|  30|</span><br><span class="line">|      Name:Justin|  19|</span><br><span class="line">+-----------------+----+</span><br></pre></td></tr></table></figure><h3 id="UDAF"><a href="#UDAF" class="headerlink" title="UDAF"></a>UDAF</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">自定义UDAF函数,多进一出,聚合函数.</span><br><span class="line">多进:关心进来的数据是什么样子的</span><br><span class="line">出:出去看你做什么事情</span><br><span class="line">对于Spark程序和MR程序,他是一行一行读取的.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">强类型的Dataset和弱类型的DataFrame都提供了相关的聚合函数， 如 count()，countDistinct()，avg()，max()，min()。除此之外，用户可以设定自己的自定义聚合函数。通过继承UserDefinedAggregateFunction来实现用户自定义聚合函数。</span><br></pre></td></tr></table></figure><p>1）需求：实现求平均工资的自定义聚合函数。<br>2）代码实现</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">import org.apache.spark.sql.expressions.MutableAggregationBuffer</span><br><span class="line">import org.apache.spark.sql.expressions.UserDefinedAggregateFunction</span><br><span class="line">import org.apache.spark.sql.types._</span><br><span class="line">import org.apache.spark.sql.Row</span><br><span class="line">import org.apache.spark.sql.SparkSession</span><br><span class="line"></span><br><span class="line">object MyAverage extends UserDefinedAggregateFunction &#123;</span><br><span class="line"></span><br><span class="line">// 聚合函数输入参数的数据类型</span><br><span class="line">def inputSchema: StructType = StructType(StructField(&quot;inputColumn&quot;, LongType) :: Nil)</span><br><span class="line"></span><br><span class="line">// 聚合缓冲区中值得数据类型</span><br><span class="line">def bufferSchema: StructType = &#123;</span><br><span class="line">StructType(StructField(&quot;sum&quot;, LongType) :: StructField(&quot;count&quot;, LongType) :: Nil)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 返回值的数据类型</span><br><span class="line">def dataType: DataType = DoubleType</span><br><span class="line"></span><br><span class="line">// 对于相同的输入是否一直返回相同的输出。</span><br><span class="line">def deterministic: Boolean = true</span><br><span class="line"></span><br><span class="line">// 初始化</span><br><span class="line">def initialize(buffer: MutableAggregationBuffer): Unit = &#123;</span><br><span class="line"></span><br><span class="line">// 存工资的总额</span><br><span class="line">buffer(0) = 0L</span><br><span class="line"></span><br><span class="line">// 存工资的个数</span><br><span class="line">buffer(1) = 0L</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 同一个分区数据合并</span><br><span class="line">def update(buffer: MutableAggregationBuffer, input: Row): Unit = &#123;</span><br><span class="line">if (!input.isNullAt(0)) &#123;</span><br><span class="line">buffer(0) = buffer.getLong(0) + input.getLong(0)</span><br><span class="line">buffer(1) = buffer.getLong(1) + 1</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 不同分区间数据合并</span><br><span class="line">def merge(buffer1: MutableAggregationBuffer, buffer2: Row): Unit = &#123;</span><br><span class="line">buffer1(0) = buffer1.getLong(0) + buffer2.getLong(0)</span><br><span class="line">buffer1(1) = buffer1.getLong(1) + buffer2.getLong(1)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 计算最终结果</span><br><span class="line">def evaluate(buffer: Row): Double = buffer.getLong(0).toDouble / buffer.getLong(1)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3）函数使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">// 注册函数</span><br><span class="line">spark.udf.register(&quot;myAverage&quot;, MyAverage)</span><br><span class="line"></span><br><span class="line">val df = spark.read.json(&quot;examples/src/main/resources/employees.json&quot;)</span><br><span class="line">df.createOrReplaceTempView(&quot;employees&quot;)</span><br><span class="line">df.show()</span><br><span class="line">// +-------+------+</span><br><span class="line">// |   name|salary|</span><br><span class="line">/ +-------+------+</span><br><span class="line">// |Michael|  3000|</span><br><span class="line">// |   Andy|  4500|</span><br><span class="line">// | Justin|  3500|</span><br><span class="line">// |  Berta|  4000|</span><br><span class="line">// +-------+------+</span><br><span class="line"></span><br><span class="line">val result = spark.sql(&quot;SELECT myAverage(salary) as average_salary FROM employees&quot;)</span><br><span class="line">result.show()</span><br><span class="line">// +--------------+</span><br><span class="line">// |average_salary|</span><br><span class="line">// +--------------+</span><br><span class="line">// |        3750.0 |</span><br><span class="line">// +--------------+</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Spark-SQL编程&quot;&gt;&lt;a href=&quot;#Spark-SQL编程&quot; class=&quot;headerlink&quot; title=&quot;Spark SQL编程&quot;&gt;&lt;/a&gt;Spark SQL编程&lt;/h1&gt;&lt;p&gt;注意: 建表一定是数据集,对数据集进行建表即用df. 而执行SQL是spark.sql()&lt;/p&gt;
&lt;h1 id=&quot;SparkSession新的起始点&quot;&gt;&lt;a href=&quot;#SparkSession新的起始点&quot; class=&quot;headerlink&quot; title=&quot;SparkSession新的起始点&quot;&gt;&lt;/a&gt;SparkSession新的起始点&lt;/h1&gt;&lt;p&gt;​        在老的版本中，SparkSQL提供两种SQL查询起始点：一个叫SQLContext，用于Spark自己提供的SQL查询；一个叫HiveContext，用于连接Hive的查询。&lt;br&gt;​        现在是使用的是SparkSession了.实际上就是将两个结合了.所以你很方便的去查寻一个json文件,也可以查询一个hive数据.统一的数据入口&lt;br&gt;​        SparkSession是Spark最新的SQL查询起始点，实质上是SQLContext和HiveContext的组合，所以在SQLContex和HiveContext上可用的API在SparkSession上同样是可以使用的。SparkSession内部封装了sparkContext，所以计算实际上是由sparkContext完成的。&lt;br&gt;在Spark SQL中SparkSession是创建DataFrame和执行SQL的入口&lt;/p&gt;</summary>
    
    
    
    <category term="大数据" scheme="http://xubatian.cn/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
    <category term="spark" scheme="http://xubatian.cn/tags/spark/"/>
    
    <category term="spark SQL" scheme="http://xubatian.cn/tags/spark-SQL/"/>
    
  </entry>
  
  <entry>
    <title>Spark原理与实现: SparkSQL的概述</title>
    <link href="http://xubatian.cn/Spark%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E7%8E%B0-SparkSQL%E7%9A%84%E6%A6%82%E8%BF%B0/"/>
    <id>http://xubatian.cn/Spark%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E7%8E%B0-SparkSQL%E7%9A%84%E6%A6%82%E8%BF%B0/</id>
    <published>2022-02-15T15:13:48.000Z</published>
    <updated>2022-02-15T15:22:27.156Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是Spark-SQL"><a href="#什么是Spark-SQL" class="headerlink" title="什么是Spark SQL"></a>什么是Spark SQL</h1><p>​        Spark SQL是Spark用来处理结构化数据的一个模块，它提供了2个编程抽象：DataFrame和DataSet，并且作为分布式SQL查询引擎的作用。</p><p>​        我们已经学习了Hive，它是将Hive SQL转换成MapReduce然后提交到集群上执行，大大简化了编写MapReduc的程序的复杂性，由于MapReduce这种计算模型执行效率比较慢。所有Spark SQL的应运而生，它是将Spark SQL转换成SparkCore来运行，然后提交到集群执行，执行效率非常快！</p><p>​        Spark SQL其实和hive替代MapReduce一样的. </p><span id="more"></span><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220215231509.png"></p><h1 id="Spark-SQL的特点"><a href="#Spark-SQL的特点" class="headerlink" title="Spark SQL的特点"></a>Spark SQL的特点</h1><p><strong>1）易整合</strong></p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220215231741.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">集成</span><br><span class="line">SQL查询与Spark程序无缝结合。</span><br><span class="line">Spark SQL允许您使用SQL或familliar DataFrame API在Spark程序中查询结构化数据。适用于Java、Scala、Python和R</span><br></pre></td></tr></table></figure><p><strong>2）统一的数据访问方式</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">以前我们读hive,读JDBC,读Json都是要创建对象的,现在我们统一有一个对象 </span><br><span class="line">直接用Spark session这个对象来读这个数据就可以了</span><br></pre></td></tr></table></figure><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220215231819.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">统一的数据访问</span><br><span class="line">以同样的方式连接到任何数据源。</span><br><span class="line">DataFrames和SQL提供了一种通用的方法来访问各种数据源，包括Hive、Avro、Parquet、ORC、JSON和JDBC。您甚至可以跨这些源联接数据。</span><br><span class="line"></span><br><span class="line">查询和连接不同的数据源。</span><br></pre></td></tr></table></figure><p><strong>3）兼容Hive</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">spark内置hive的数据库是der, 所以我们换成外部的hive,用外部的hive也比较简单,我不需要告诉他计算引擎MR在哪,只需要告诉他元数据信息就可以了,你能让spark通过元数据找到实际数据所在地就行了,元数据在hive当中存在哪呢?在mysql当中,hive不是天生就存在mysql当中的,是有一个配置文件告诉他的,如果说你的spark sql想用之前hive里面的数据很简单,你把配置文件hive-site.xml配置给他移到spark.conf里面就够了,然后你一打开他就完成了之前和你hive数据的对接了</span><br><span class="line"></span><br><span class="line">Spark当中有一个内置的hive,你不用外部hive的元数据,spark内部hive自己管理是可以的但是默认的数据库是der. </span><br></pre></td></tr></table></figure><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220215231853.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">具有和Hive的兼容性</span><br><span class="line"> 运行未修改的Hive查询现有数据</span><br><span class="line"> Spark SQL重用Hive前端和substore，使您与现有的Hive数据、查询和UDF完全兼容。 简单地安装在Hive旁边</span><br><span class="line"></span><br><span class="line">Spark SQL可以使用现有的Hive metastore，SerDes和UDFs</span><br></pre></td></tr></table></figure><p><strong>4）标准的数据连接</strong></p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220215231918.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">标准的连接</span><br><span class="line">通过JDBC或ODBC连接。服务器模式为商业智能工具提供了行业标准的JDBC和ODBC连接</span><br><span class="line"></span><br><span class="line">使用现有的BI工具查询大数据</span><br></pre></td></tr></table></figure><h1 id="什么是DataFrame-数据框"><a href="#什么是DataFrame-数据框" class="headerlink" title="什么是DataFrame(数据框)"></a>什么是DataFrame(数据框)</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">在Spark中，DataFrame是一种以RDD为基础的分布式数据集，类似于传统数据库中的二维表格。</span><br><span class="line">DataFrame与RDD的主要区别在于:</span><br><span class="line">DataFrame带有schema元信息，即DataFrame所表示的二维表数据集的每一列都带有名称和类型。这使得Spark SQL得以洞察更多的结构信息，从而对藏于DataFrame背后的数据源以及作用于DataFrame之上的变换进行了针对性的优化，最终达到大幅提升运行时效率的目标。反观RDD，由于无从得知所存数据元素的具体内部结构，Spark Core只能在stage层面进行简单、通用的流水线优化。</span><br></pre></td></tr></table></figure><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220215232009.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ataFrame也是懒执行的，但性能上比RDD要高，主要原因：高在哪呢?主要就是他有优化器</span><br><span class="line">优化的执行计划，即查询计划通过Spark catalyst optimiser进行优化。比如下面一个例子:</span><br></pre></td></tr></table></figure><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220215232035.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ResultSet():这个方法很恶心,就是编译期不做类型校验,但是你一运行就会报类型转换异常</span><br><span class="line"></span><br><span class="line">上图这个例子在做什么事情呢? </span><br><span class="line">RDD.join(...)filter(....).   对于RDD里面的操作,因为当前的数据集,我是单独的对Event进行过滤的,不是对join出来的,我累加一个和进行过滤的. 如果说你是两个表join. 一个表的某一列加另外一个表的某一列,在这个结果集进行过滤. 那你只能先join再过滤. 但是现在是对表当中的原始数据进行过滤. 其实他在优化的时候做到了一个东西叫谓词下推技术.</span><br><span class="line">谓词下推的基本思想即：</span><br><span class="line">将过滤表达式尽可能移动至靠近数据源的位置，以使真正执行时能直接跳过无关的数据。</span><br><span class="line">就是说在SQL的整个优化过程当中,他将能够提前过滤的数据先自己放在前面去执行. 他自己就能做这个事情.这就叫优化器. 那你SQL写出来之后呢,人家就把你数据先给你过滤出来.先去执行.</span><br></pre></td></tr></table></figure><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220215232054.png"></p><h1 id="什么是DataSet"><a href="#什么是DataSet" class="headerlink" title="什么是DataSet"></a>什么是DataSet</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">DataSet是分布式数据集合。DataSet是Spark 1.6中添加的一个新抽象，是DataFrame的一个扩展。它提供了RDD的优势（强类型，使用强大的lambda函数的能力）以及Spark SQL优化执行引擎的优点。而对于SparkSQl的Setframe来说,我们可以说DataFrame是弱类型的.因为他在编译期间不做类型检查.这就给用户带来很不舒服. 而dataSet是可以放一个泛型为具体的样例类.痛过样例类来获取他的一个属性.那这个类型在编译期间是一定能够检查的.</span><br><span class="line">DataFrame虽然有结构信息,但是他在编译器的时候不用,而dataSet他也是有结构信息,但是他在编译期间的时候就给他用上了.这就是DataFrame和dataSet的主要区别. DataFrame只是dataSet的一个特殊形式.</span><br><span class="line">DataSet也可以使用功能性的转换（操作map，flatMap，filter等等）。</span><br><span class="line">1）是DataFrame API的一个扩展，是SparkSQL最新的数据抽象；</span><br><span class="line">2）用户友好的API风格，既具有类型安全检查也具有DataFrame的查询优化特性；</span><br><span class="line">3）用样例类来对DataSet中定义数据的结构信息，样例类中每个属性的名称直接映射到DataSet中的字段名称；</span><br><span class="line">4）DataSet是强类型的。比如可以有DataSet[Car]，DataSet[Person]里面必须放具体的类。</span><br></pre></td></tr></table></figure><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220215232124.png"></p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220215232144.png"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;什么是Spark-SQL&quot;&gt;&lt;a href=&quot;#什么是Spark-SQL&quot; class=&quot;headerlink&quot; title=&quot;什么是Spark SQL&quot;&gt;&lt;/a&gt;什么是Spark SQL&lt;/h1&gt;&lt;p&gt;​        Spark SQL是Spark用来处理结构化数据的一个模块，它提供了2个编程抽象：DataFrame和DataSet，并且作为分布式SQL查询引擎的作用。&lt;/p&gt;
&lt;p&gt;​        我们已经学习了Hive，它是将Hive SQL转换成MapReduce然后提交到集群上执行，大大简化了编写MapReduc的程序的复杂性，由于MapReduce这种计算模型执行效率比较慢。所有Spark SQL的应运而生，它是将Spark SQL转换成SparkCore来运行，然后提交到集群执行，执行效率非常快！&lt;/p&gt;
&lt;p&gt;​        Spark SQL其实和hive替代MapReduce一样的. &lt;/p&gt;</summary>
    
    
    
    <category term="大数据" scheme="http://xubatian.cn/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
    <category term="spark" scheme="http://xubatian.cn/tags/spark/"/>
    
    <category term="spark SQL" scheme="http://xubatian.cn/tags/spark-SQL/"/>
    
  </entry>
  
  <entry>
    <title>Kafka API</title>
    <link href="http://xubatian.cn/Kafka-API/"/>
    <id>http://xubatian.cn/Kafka-API/</id>
    <published>2022-02-15T14:24:06.000Z</published>
    <updated>2022-02-15T14:41:21.164Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Producer-API"><a href="#Producer-API" class="headerlink" title="Producer API"></a>Producer API</h1><h2 id="消息发送流程"><a href="#消息发送流程" class="headerlink" title="消息发送流程"></a>消息发送流程</h2><p>​        Kafka的Producer发送消息采用的是<strong>异步发送</strong>的方式。在消息发送的过程中，涉及到了<strong>两个线程——main线程和Sender线程</strong>，以及<strong>一个线程共享变量——RecordAccumulator</strong>。main线程将消息发送给RecordAccumulator，Sender线程不断从RecordAccumulator中拉取消息发送到Kafka broker。</p><span id="more"></span><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220215222621.png"></p><p><strong>相关参数：</strong><br>batch.size：只有数据积累到batch.size之后，sender才会发送数据。<br>linger.ms：如果数据迟迟未达到batch.size，sender等待linger.time之后就会发送数据。</p><h2 id="异步发送API"><a href="#异步发送API" class="headerlink" title="异步发送API"></a>异步发送API</h2><p>1）导入依赖</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.apache.kafka&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;kafka-clients&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;0.11.0.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>2）编写代码<br>需要用到的类：<br>KafkaProducer：需要创建一个生产者对象，用来发送数据<br>ProducerConfig：获取所需的一系列配置参数<br>ProducerRecord：每条数据都要封装成一个ProducerRecord对象</p><h3 id="1-不带回调函数的API"><a href="#1-不带回调函数的API" class="headerlink" title="1.不带回调函数的API"></a><strong>1.不带回调函数的API</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">import org.apache.kafka.clients.producer.*;</span><br><span class="line"></span><br><span class="line">import java.util.Properties;</span><br><span class="line">import java.util.concurrent.ExecutionException;</span><br><span class="line"></span><br><span class="line">public class CustomProducer &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws ExecutionException, InterruptedException &#123;</span><br><span class="line">        Properties props = new Properties();</span><br><span class="line"></span><br><span class="line">        //kafka集群，broker-list</span><br><span class="line">        props.put(&quot;bootstrap.servers&quot;, &quot;hadoop102:9092&quot;);</span><br><span class="line"></span><br><span class="line">        props.put(&quot;acks&quot;, &quot;all&quot;);</span><br><span class="line"></span><br><span class="line">        //重试次数</span><br><span class="line">        props.put(&quot;retries&quot;, 1); </span><br><span class="line"></span><br><span class="line">        //批次大小</span><br><span class="line">        props.put(&quot;batch.size&quot;, 16384); </span><br><span class="line"></span><br><span class="line">        //等待时间</span><br><span class="line">        props.put(&quot;linger.ms&quot;, 1); </span><br><span class="line"></span><br><span class="line">        //RecordAccumulator缓冲区大小</span><br><span class="line">        props.put(&quot;buffer.memory&quot;, 33554432);</span><br><span class="line"></span><br><span class="line">        props.put(&quot;key.serializer&quot;, &quot;org.apache.kafka.common.serialization.StringSerializer&quot;);</span><br><span class="line">        props.put(&quot;value.serializer&quot;, &quot;org.apache.kafka.common.serialization.StringSerializer&quot;);</span><br><span class="line"></span><br><span class="line">        Producer&lt;String, String&gt; producer = new KafkaProducer&lt;&gt;(props);</span><br><span class="line"></span><br><span class="line">        for (int i = 0; i &lt; 100; i++) &#123;</span><br><span class="line">            producer.send(new ProducerRecord&lt;String, String&gt;(&quot;first&quot;, Integer.toString(i), Integer.toString(i)));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        producer.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-带回调函数的API"><a href="#2-带回调函数的API" class="headerlink" title="2.带回调函数的API"></a><strong>2.带回调函数的API</strong></h3><p>​    回调函数会在producer收到ack时调用，为异步调用，该方法有两个参数，分别是RecordMetadata和Exception，如果Exception为null，说明消息发送成功，如果Exception不为null，说明消息发送失败。</p><p>注意：消息发送失败会自动重试，不需要我们在回调函数中手动重试。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">import org.apache.kafka.clients.producer.*;</span><br><span class="line"></span><br><span class="line">import java.util.Properties;</span><br><span class="line">import java.util.concurrent.ExecutionException;</span><br><span class="line"></span><br><span class="line">public class CustomProducer &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) throws ExecutionException, InterruptedException &#123;</span><br><span class="line"></span><br><span class="line">        Properties props = new Properties();</span><br><span class="line"></span><br><span class="line">        props.put(&quot;bootstrap.servers&quot;, &quot;hadoop102:9092&quot;);//kafka集群，broker-list</span><br><span class="line"></span><br><span class="line">        props.put(&quot;acks&quot;, &quot;all&quot;);</span><br><span class="line"></span><br><span class="line">        props.put(&quot;retries&quot;, 1);//重试次数</span><br><span class="line"></span><br><span class="line">        props.put(&quot;batch.size&quot;, 16384);//批次大小</span><br><span class="line"></span><br><span class="line">        props.put(&quot;linger.ms&quot;, 1);//等待时间</span><br><span class="line"></span><br><span class="line">        props.put(&quot;buffer.memory&quot;, 33554432);//RecordAccumulator缓冲区大小</span><br><span class="line"></span><br><span class="line">        props.put(&quot;key.serializer&quot;, &quot;org.apache.kafka.common.serialization.StringSerializer&quot;);</span><br><span class="line">        props.put(&quot;value.serializer&quot;, &quot;org.apache.kafka.common.serialization.StringSerializer&quot;);</span><br><span class="line"></span><br><span class="line">        Producer&lt;String, String&gt; producer = new KafkaProducer&lt;&gt;(props);</span><br><span class="line"></span><br><span class="line">        for (int i = 0; i &lt; 100; i++) &#123;</span><br><span class="line">            producer.send(new ProducerRecord&lt;String, String&gt;(&quot;first&quot;, Integer.toString(i), Integer.toString(i)), new Callback() &#123;</span><br><span class="line"></span><br><span class="line">                //回调函数，该方法会在Producer收到ack时调用，为异步调用</span><br><span class="line">                @Override</span><br><span class="line">                public void onCompletion(RecordMetadata metadata, Exception exception) &#123;</span><br><span class="line">                    if (exception == null) &#123;</span><br><span class="line">                        System.out.println(&quot;success-&gt;&quot; + metadata.offset());</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        exception.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        producer.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="同步发送API"><a href="#同步发送API" class="headerlink" title="同步发送API"></a>同步发送API</h2><p>​    同步发送的意思就是，一条消息发送之后，会阻塞当前线程，直至返回ack。<br>由于send方法返回的是一个Future对象，根据Futrue对象的特点，我们也可以实现同步发送的效果，只需在调用Future对象的get方发即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">import org.apache.kafka.clients.producer.KafkaProducer;</span><br><span class="line">import org.apache.kafka.clients.producer.Producer;</span><br><span class="line">import org.apache.kafka.clients.producer.ProducerRecord;</span><br><span class="line"></span><br><span class="line">import java.util.Properties;</span><br><span class="line">import java.util.concurrent.ExecutionException;</span><br><span class="line"></span><br><span class="line">public class CustomProducer &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) throws ExecutionException, InterruptedException &#123;</span><br><span class="line"></span><br><span class="line">        Properties props = new Properties();</span><br><span class="line"></span><br><span class="line">        props.put(&quot;bootstrap.servers&quot;, &quot;hadoop102:9092&quot;);//kafka集群，broker-list</span><br><span class="line"></span><br><span class="line">        props.put(&quot;acks&quot;, &quot;all&quot;);</span><br><span class="line"></span><br><span class="line">        props.put(&quot;retries&quot;, 1);//重试次数</span><br><span class="line"></span><br><span class="line">        props.put(&quot;batch.size&quot;, 16384);//批次大小</span><br><span class="line"></span><br><span class="line">        props.put(&quot;linger.ms&quot;, 1);//等待时间</span><br><span class="line"></span><br><span class="line">        props.put(&quot;buffer.memory&quot;, 33554432);//RecordAccumulator缓冲区大小</span><br><span class="line"></span><br><span class="line">        props.put(&quot;key.serializer&quot;, &quot;org.apache.kafka.common.serialization.StringSerializer&quot;);</span><br><span class="line">        props.put(&quot;value.serializer&quot;, &quot;org.apache.kafka.common.serialization.StringSerializer&quot;);</span><br><span class="line"></span><br><span class="line">        Producer&lt;String, String&gt; producer = new KafkaProducer&lt;&gt;(props);</span><br><span class="line">        for (int i = 0; i &lt; 100; i++) &#123;</span><br><span class="line">            producer.send(new ProducerRecord&lt;String, String&gt;(&quot;first&quot;, Integer.toString(i), Integer.toString(i))).get();</span><br><span class="line">        &#125;</span><br><span class="line">        producer.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Consumer-API"><a href="#Consumer-API" class="headerlink" title="Consumer API"></a>Consumer API</h1><p>​        Consumer消费数据时的可靠性是很容易保证的，因为数据在Kafka中是持久化的，故不用担心数据丢失问题。<br>​        由于consumer在消费过程中可能会出现断电宕机等故障，consumer恢复后，需要从故障前的位置的继续消费，所以consumer需要实时记录自己消费到了哪个offset，以便故障恢复后继续消费。<br>​        <strong>所以offset的维护是Consumer消费数据是必须考虑的问题。</strong></p><h3 id="自动提交offset"><a href="#自动提交offset" class="headerlink" title="自动提交offset"></a>自动提交offset</h3><p>1）导入依赖</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.apache.kafka&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;kafka-clients&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;0.11.0.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>2）编写代码<br>需要用到的类：<br>KafkaConsumer：需要创建一个消费者对象，用来消费数据<br>ConsumerConfig：获取所需的一系列配置参数<br>ConsuemrRecord：每条数据都要封装成一个ConsumerRecord对象<br>为了使我们能够专注于自己的业务逻辑，Kafka提供了自动提交offset的功能。 </p><p><strong>自动提交offset的相关参数</strong></p><p>enable.auto.commit：是否开启自动提交offset功能<br>auto.commit.interval.ms：自动提交offset的时间间隔</p><p><strong>以下为自动提交offset的代码</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">import org.apache.kafka.clients.consumer.ConsumerRecord;</span><br><span class="line">import org.apache.kafka.clients.consumer.ConsumerRecords;</span><br><span class="line">import org.apache.kafka.clients.consumer.KafkaConsumer;</span><br><span class="line"></span><br><span class="line">import java.util.Arrays;</span><br><span class="line">import java.util.Properties;</span><br><span class="line"></span><br><span class="line">public class CustomConsumer &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">        Properties props = new Properties();</span><br><span class="line"></span><br><span class="line">        props.put(&quot;bootstrap.servers&quot;, &quot;hadoop102:9092&quot;);</span><br><span class="line"></span><br><span class="line">        props.put(&quot;group.id&quot;, &quot;test&quot;);</span><br><span class="line"></span><br><span class="line">        props.put(&quot;enable.auto.commit&quot;, &quot;true&quot;);</span><br><span class="line"></span><br><span class="line">        props.put(&quot;auto.commit.interval.ms&quot;, &quot;1000&quot;);</span><br><span class="line"></span><br><span class="line">        props.put(&quot;key.deserializer&quot;, &quot;org.apache.kafka.common.serialization.StringDeserializer&quot;);</span><br><span class="line">        props.put(&quot;value.deserializer&quot;, &quot;org.apache.kafka.common.serialization.StringDeserializer&quot;);</span><br><span class="line"></span><br><span class="line">        KafkaConsumer&lt;String, String&gt; consumer = new KafkaConsumer&lt;&gt;(props);</span><br><span class="line"></span><br><span class="line">        consumer.subscribe(Arrays.asList(&quot;first&quot;));</span><br><span class="line"></span><br><span class="line">        while (true) &#123;</span><br><span class="line"></span><br><span class="line">            ConsumerRecords&lt;String, String&gt; records = consumer.poll(100);</span><br><span class="line"></span><br><span class="line">            for (ConsumerRecord&lt;String, String&gt; record : records)</span><br><span class="line"></span><br><span class="line">                System.out.printf(&quot;offset = %d, key = %s, value = %s%n&quot;, record.offset(), record.key(), record.value());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="手动提交offset"><a href="#手动提交offset" class="headerlink" title="手动提交offset"></a>手动提交offset</h3><p>​        虽然自动提交offset十分简介便利，但由于其是基于时间提交的，开发人员难以把握offset提交的时机。因此Kafka还提供了手动提交offset的API。<br>手动提交offset的方法有两种：分别是commitSync（同步提交）和commitAsync（异步提交）。<br>两者的相同点是，都会将本次poll的一批数据最高的偏移量提交；不同点是，commitSync阻塞当前线程，一直到提交成功，并且会自动失败重试（由不可控因素导致，也会出现提交失败）；而commitAsync则没有失败重试机制，故有可能提交失败。<br><strong>1）同步提交offset</strong><br>由于同步提交offset有失败重试机制，故更加可靠，以下为同步提交offset的示例。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">import org.apache.kafka.clients.consumer.ConsumerRecord;</span><br><span class="line">import org.apache.kafka.clients.consumer.ConsumerRecords;</span><br><span class="line">import org.apache.kafka.clients.consumer.KafkaConsumer;</span><br><span class="line"></span><br><span class="line">import java.util.Arrays;</span><br><span class="line">import java.util.Properties;</span><br><span class="line"></span><br><span class="line">public class CustomComsumer &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">        Properties props = new Properties();</span><br><span class="line"></span><br><span class="line">//Kafka集群</span><br><span class="line">        props.put(&quot;bootstrap.servers&quot;, &quot;hadoop102:9092&quot;); </span><br><span class="line"></span><br><span class="line">//消费者组，只要group.id相同，就属于同一个消费者组</span><br><span class="line">        props.put(&quot;group.id&quot;, &quot;test&quot;); </span><br><span class="line"></span><br><span class="line">        props.put(&quot;enable.auto.commit&quot;, &quot;false&quot;);//关闭自动提交offset</span><br><span class="line"></span><br><span class="line">        props.put(&quot;key.deserializer&quot;, &quot;org.apache.kafka.common.serialization.StringDeserializer&quot;);</span><br><span class="line">        props.put(&quot;value.deserializer&quot;, &quot;org.apache.kafka.common.serialization.StringDeserializer&quot;);</span><br><span class="line"></span><br><span class="line">        KafkaConsumer&lt;String, String&gt; consumer = new KafkaConsumer&lt;&gt;(props);</span><br><span class="line"></span><br><span class="line">        consumer.subscribe(Arrays.asList(&quot;first&quot;));//消费者订阅主题</span><br><span class="line"></span><br><span class="line">        while (true) &#123;</span><br><span class="line"></span><br><span class="line">//消费者拉取数据</span><br><span class="line">            ConsumerRecords&lt;String, String&gt; records = consumer.poll(100); </span><br><span class="line"></span><br><span class="line">            for (ConsumerRecord&lt;String, String&gt; record : records) &#123;</span><br><span class="line"></span><br><span class="line">                System.out.printf(&quot;offset = %d, key = %s, value = %s%n&quot;, record.offset(), record.key(), record.value());</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">//同步提交，当前线程会阻塞直到offset提交成功</span><br><span class="line">            consumer.commitSync();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2).异步提交offset</strong></p><p>​        虽然同步提交offset更可靠一些，但是由于其会阻塞当前线程，直到提交成功。因此吞吐量会收到很大的影响。因此更多的情况下，会选用异步提交offset的方式。<br>以下为异步提交offset的示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">import org.apache.kafka.clients.consumer.*;</span><br><span class="line">import org.apache.kafka.common.TopicPartition;</span><br><span class="line"></span><br><span class="line">import java.util.Arrays;</span><br><span class="line">import java.util.Map;</span><br><span class="line">import java.util.Properties;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class CustomConsumer &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">        Properties props = new Properties();</span><br><span class="line"></span><br><span class="line">        //Kafka集群</span><br><span class="line">        props.put(&quot;bootstrap.servers&quot;, &quot;hadoop102:9092&quot;); </span><br><span class="line"></span><br><span class="line">        //消费者组，只要group.id相同，就属于同一个消费者组</span><br><span class="line">        props.put(&quot;group.id&quot;, &quot;test&quot;); </span><br><span class="line"></span><br><span class="line">        //关闭自动提交offset</span><br><span class="line">        props.put(&quot;enable.auto.commit&quot;, &quot;false&quot;);</span><br><span class="line"></span><br><span class="line">        props.put(&quot;key.deserializer&quot;, &quot;org.apache.kafka.common.serialization.StringDeserializer&quot;);</span><br><span class="line">        props.put(&quot;value.deserializer&quot;, &quot;org.apache.kafka.common.serialization.StringDeserializer&quot;);</span><br><span class="line"></span><br><span class="line">        KafkaConsumer&lt;String, String&gt; consumer = new KafkaConsumer&lt;&gt;(props);</span><br><span class="line">        consumer.subscribe(Arrays.asList(&quot;first&quot;));//消费者订阅主题</span><br><span class="line"></span><br><span class="line">        while (true) &#123;</span><br><span class="line">            ConsumerRecords&lt;String, String&gt; records = consumer.poll(100);//消费者拉取数据</span><br><span class="line">            for (ConsumerRecord&lt;String, String&gt; record : records) &#123;</span><br><span class="line">                System.out.printf(&quot;offset = %d, key = %s, value = %s%n&quot;, record.offset(), record.key(), record.value());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">//异步提交</span><br><span class="line">            consumer.commitAsync(new OffsetCommitCallback() &#123;</span><br><span class="line">                @Override</span><br><span class="line">                public void onComplete(Map&lt;TopicPartition, OffsetAndMetadata&gt; offsets, Exception exception) &#123;</span><br><span class="line">                    if (exception != null) &#123;</span><br><span class="line">                        System.err.println(&quot;Commit failed for&quot; + offsets);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;); </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3）数据漏消费和重复消费分析</strong><br>     无论是同步提交还是异步提交offset，都有可能会造成数据的漏消费或者重复消费。先提交offset后消费，有可能造成数据的漏消费；而先消费后提交offset，有可能会造成数据的重复消费。</p><h3 id="自定义存储offset"><a href="#自定义存储offset" class="headerlink" title="自定义存储offset"></a>自定义存储offset</h3><p>​        Kafka 0.9版本之前，offset存储在zookeeper，0.9版本及之后，默认将offset存储在Kafka的一个内置的topic中。除此之外，Kafka还可以选择自定义存储offset。<br>​        offset的维护是相当繁琐的，因为需要考虑到消费者的Rebalace（再度平衡）。<br>​        <strong>当有新的消费者加入消费者组、已有的消费者退出消费者组或者所订阅的主题的分区发生变化，就会触发到分区的重新分配，重新分配的过程叫做Rebalance。</strong><br>​        消费者发生Rebalance之后，每个消费者消费的分区就会发生变化。因此消费者要首先获取到自己被重新分配到的分区，并且定位到每个分区最近提交的offset位置继续消费。<br>​        要实现自定义存储offset，需要借助ConsumerRebalanceListener，以下为示例代码，其中提交和获取offset的方法，需要根据所选的offset存储系统自行实现。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">import org.apache.kafka.clients.consumer.*;</span><br><span class="line">import org.apache.kafka.common.TopicPartition;</span><br><span class="line"></span><br><span class="line">import java.util.*;</span><br><span class="line"></span><br><span class="line">public class CustomConsumer &#123;</span><br><span class="line"></span><br><span class="line">    private static Map&lt;TopicPartition, Long&gt; currentOffset = new HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">//创建配置信息</span><br><span class="line">        Properties props = new Properties();</span><br><span class="line"></span><br><span class="line">//Kafka集群</span><br><span class="line">        props.put(&quot;bootstrap.servers&quot;, &quot;hadoop102:9092&quot;); </span><br><span class="line"></span><br><span class="line">//消费者组，只要group.id相同，就属于同一个消费者组</span><br><span class="line">        props.put(&quot;group.id&quot;, &quot;test&quot;); </span><br><span class="line"></span><br><span class="line">//关闭自动提交offset</span><br><span class="line">        props.put(&quot;enable.auto.commit&quot;, &quot;false&quot;);</span><br><span class="line"></span><br><span class="line">        //Key和Value的反序列化类</span><br><span class="line">        props.put(&quot;key.deserializer&quot;, &quot;org.apache.kafka.common.serialization.StringDeserializer&quot;);</span><br><span class="line">        props.put(&quot;value.deserializer&quot;, &quot;org.apache.kafka.common.serialization.StringDeserializer&quot;);</span><br><span class="line"></span><br><span class="line">        //创建一个消费者</span><br><span class="line">        KafkaConsumer&lt;String, String&gt; consumer = new KafkaConsumer&lt;&gt;(props);</span><br><span class="line"></span><br><span class="line">        //消费者订阅主题</span><br><span class="line">        consumer.subscribe(Arrays.asList(&quot;first&quot;), new ConsumerRebalanceListener() &#123;</span><br><span class="line">            </span><br><span class="line">            //该方法会在Rebalance之前调用</span><br><span class="line">            @Override</span><br><span class="line">            public void onPartitionsRevoked(Collection&lt;TopicPartition&gt; partitions) &#123;</span><br><span class="line">                commitOffset(currentOffset);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            //该方法会在Rebalance之后调用</span><br><span class="line">            @Override</span><br><span class="line">            public void onPartitionsAssigned(Collection&lt;TopicPartition&gt; partitions) &#123;</span><br><span class="line">                currentOffset.clear();</span><br><span class="line">                for (TopicPartition partition : partitions) &#123;</span><br><span class="line">                    consumer.seek(partition, getOffset(partition));//定位到最近提交的offset位置继续消费</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        while (true) &#123;</span><br><span class="line">            ConsumerRecords&lt;String, String&gt; records = consumer.poll(100);//消费者拉取数据</span><br><span class="line">            for (ConsumerRecord&lt;String, String&gt; record : records) &#123;</span><br><span class="line">                System.out.printf(&quot;offset = %d, key = %s, value = %s%n&quot;, record.offset(), record.key(), record.value());</span><br><span class="line">                currentOffset.put(new TopicPartition(record.topic(), record.partition()), record.offset());</span><br><span class="line">            &#125;</span><br><span class="line">            commitOffset(currentOffset);//异步提交</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //获取某分区的最新offset</span><br><span class="line">    private static long getOffset(TopicPartition partition) &#123;</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //提交该消费者所有分区的offset</span><br><span class="line">    private static void commitOffset(Map&lt;TopicPartition, Long&gt; currentOffset) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">这两个方法会集中在spark的框架中，前面的代码很复杂</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="自定义Interceptor（拦截器）"><a href="#自定义Interceptor（拦截器）" class="headerlink" title="自定义Interceptor（拦截器）"></a>自定义Interceptor（拦截器）</h1><h2 id="拦截器原理"><a href="#拦截器原理" class="headerlink" title="拦截器原理"></a>拦截器原理</h2><p>​        Producer拦截器(interceptor)是在Kafka 0.10版本被引入的，主要用于实现clients端的定制化控制逻辑。<br>​        对于producer而言，interceptor使得用户在消息发送前以及producer回调逻辑前有机会对消息做一些定制化需求，比如修改消息等。同时，producer允许用户指定多个interceptor按序作用于同一条消息从而形成一个拦截链(interceptor chain)。Intercetpor的实现接口是org.apache.kafka.clients.producer.ProducerInterceptor，其定义的方法包括：<br><strong>（1）configure(configs)</strong><br>获取配置信息和初始化数据时调用。<br><strong>（2）onSend(ProducerRecord)：</strong><br>​        该方法封装进KafkaProducer.send方法中，即它运行在用户主线程中。Producer确保在消息被序列化以及计算分区前调用该方法。用户可以在该方法中对消息做任何操作，但最好保证不要修改消息所属的topic和分区，否则会影响目标分区的计算。<br><strong>（3）onAcknowledgement(RecordMetadata, Exception)：</strong><br>​        该方法会在消息从RecordAccumulator成功发送到Kafka Broker之后，或者在发送过程中失败时调用。并且通常都是在producer回调逻辑触发之前。onAcknowledgement运行在producer的IO线程中，因此不要在该方法中放入很重的逻辑，否则会拖慢producer的消息发送效率。<br><strong>（4）close：</strong><br>​        关闭interceptor，主要用于执行一些资源清理工作<br>​        如前所述，interceptor可能被运行在多个线程中，因此在具体实现时用户需要自行确保线程安全。另外倘若指定了多个interceptor，则producer将按照指定顺序调用它们，并仅仅是捕获每个interceptor可能抛出的异常记录到错误日志中而非在向上传递。这在使用过程中要特别留意。</p><h2 id="拦截器案例"><a href="#拦截器案例" class="headerlink" title="拦截器案例"></a>拦截器案例</h2><p><strong>1）需求：</strong></p><p>​        实现一个简单的双interceptor组成的拦截链。第一个interceptor会在消息发送前将时间戳信息加到消息value的最前部；第二个interceptor会在消息发送后更新成功发送消息数或失败发送消息数。</p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220215223823.png"></p><p><strong>2）案例实操</strong></p><p><strong>1）增加时间戳拦截器</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">import java.util.Map;</span><br><span class="line">import org.apache.kafka.clients.producer.ProducerInterceptor;</span><br><span class="line">import org.apache.kafka.clients.producer.ProducerRecord;</span><br><span class="line">import org.apache.kafka.clients.producer.RecordMetadata;</span><br><span class="line"></span><br><span class="line">public class TimeInterceptor implements ProducerInterceptor&lt;String, String&gt; &#123;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void configure(Map&lt;String, ?&gt; configs) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public ProducerRecord&lt;String, String&gt; onSend(ProducerRecord&lt;String, String&gt; record) &#123;</span><br><span class="line"></span><br><span class="line">// 创建一个新的record，把时间戳写入消息体的最前部</span><br><span class="line">return new ProducerRecord(record.topic(), record.partition(), record.timestamp(), record.key(),</span><br><span class="line">System.currentTimeMillis() + &quot;,&quot; + record.value().toString());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void onAcknowledgement(RecordMetadata metadata, Exception exception) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void close() &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>（2）统计发送消息成功和发送失败消息数，并在producer关闭时打印这两个计数器</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">import java.util.Map;</span><br><span class="line">import org.apache.kafka.clients.producer.ProducerInterceptor;</span><br><span class="line">import org.apache.kafka.clients.producer.ProducerRecord;</span><br><span class="line">import org.apache.kafka.clients.producer.RecordMetadata;</span><br><span class="line"></span><br><span class="line">public class CounterInterceptor implements ProducerInterceptor&lt;String, String&gt;&#123;</span><br><span class="line">    private int errorCounter = 0;</span><br><span class="line">    private int successCounter = 0;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void configure(Map&lt;String, ?&gt; configs) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public ProducerRecord&lt;String, String&gt; onSend(ProducerRecord&lt;String, String&gt; record) &#123;</span><br><span class="line"> return record;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void onAcknowledgement(RecordMetadata metadata, Exception exception) &#123;</span><br><span class="line">// 统计成功和失败的次数</span><br><span class="line">        if (exception == null) &#123;</span><br><span class="line">            successCounter++;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            errorCounter++;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void close() &#123;</span><br><span class="line">        // 保存结果</span><br><span class="line">        System.out.println(&quot;Successful sent: &quot; + successCounter);</span><br><span class="line">        System.out.println(&quot;Failed sent: &quot; + errorCounter);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>（3）producer主程序</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.Properties;</span><br><span class="line">import org.apache.kafka.clients.producer.KafkaProducer;</span><br><span class="line">import org.apache.kafka.clients.producer.Producer;</span><br><span class="line">import org.apache.kafka.clients.producer.ProducerConfig;</span><br><span class="line">import org.apache.kafka.clients.producer.ProducerRecord;</span><br><span class="line"></span><br><span class="line">public class InterceptorProducer &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) throws Exception &#123;</span><br><span class="line">// 1 设置配置信息</span><br><span class="line">Properties props = new Properties();</span><br><span class="line">props.put(&quot;bootstrap.servers&quot;, &quot;hadoop102:9092&quot;);</span><br><span class="line">props.put(&quot;acks&quot;, &quot;all&quot;);</span><br><span class="line">props.put(&quot;retries&quot;, 3);</span><br><span class="line">props.put(&quot;batch.size&quot;, 16384);</span><br><span class="line">props.put(&quot;linger.ms&quot;, 1);</span><br><span class="line">props.put(&quot;buffer.memory&quot;, 33554432);</span><br><span class="line">props.put(&quot;key.serializer&quot;, &quot;org.apache.kafka.common.serialization.StringSerializer&quot;);</span><br><span class="line">props.put(&quot;value.serializer&quot;, &quot;org.apache.kafka.common.serialization.StringSerializer&quot;);</span><br><span class="line"></span><br><span class="line">// 2 构建拦截链</span><br><span class="line">List&lt;String&gt; interceptors = new ArrayList&lt;&gt;();</span><br><span class="line">interceptors.add(&quot;com.atguigu.kafka.interceptor.TimeInterceptor&quot;); interceptors.add(&quot;com.atguigu.kafka.interceptor.CounterInterceptor&quot;); </span><br><span class="line">props.put(ProducerConfig.INTERCEPTOR_CLASSES_CONFIG, interceptors);</span><br><span class="line"> </span><br><span class="line">String topic = &quot;first&quot;;</span><br><span class="line">Producer&lt;String, String&gt; producer = new KafkaProducer&lt;&gt;(props);</span><br><span class="line"></span><br><span class="line">// 3 发送消息</span><br><span class="line">for (int i = 0; i &lt; 10; i++) &#123;</span><br><span class="line"></span><br><span class="line">    ProducerRecord&lt;String, String&gt; record = new ProducerRecord&lt;&gt;(topic, &quot;message&quot; + i);</span><br><span class="line">    producer.send(record);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">// 4 一定要关闭producer，这样才会调用interceptor的close方法</span><br><span class="line">producer.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Producer-API&quot;&gt;&lt;a href=&quot;#Producer-API&quot; class=&quot;headerlink&quot; title=&quot;Producer API&quot;&gt;&lt;/a&gt;Producer API&lt;/h1&gt;&lt;h2 id=&quot;消息发送流程&quot;&gt;&lt;a href=&quot;#消息发送流程&quot; class=&quot;headerlink&quot; title=&quot;消息发送流程&quot;&gt;&lt;/a&gt;消息发送流程&lt;/h2&gt;&lt;p&gt;​        Kafka的Producer发送消息采用的是&lt;strong&gt;异步发送&lt;/strong&gt;的方式。在消息发送的过程中，涉及到了&lt;strong&gt;两个线程——main线程和Sender线程&lt;/strong&gt;，以及&lt;strong&gt;一个线程共享变量——RecordAccumulator&lt;/strong&gt;。main线程将消息发送给RecordAccumulator，Sender线程不断从RecordAccumulator中拉取消息发送到Kafka broker。&lt;/p&gt;</summary>
    
    
    
    <category term="大数据" scheme="http://xubatian.cn/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
    <category term="Kafka" scheme="http://xubatian.cn/tags/Kafka/"/>
    
  </entry>
  
  <entry>
    <title>Kafka架构深入</title>
    <link href="http://xubatian.cn/Kafka%E6%9E%B6%E6%9E%84%E6%B7%B1%E5%85%A5/"/>
    <id>http://xubatian.cn/Kafka%E6%9E%B6%E6%9E%84%E6%B7%B1%E5%85%A5/</id>
    <published>2022-02-15T05:25:20.000Z</published>
    <updated>2022-02-15T13:08:20.098Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Kafka工作流程及文件存储机制"><a href="#Kafka工作流程及文件存储机制" class="headerlink" title="Kafka工作流程及文件存储机制"></a>Kafka工作流程及文件存储机制</h1><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220215193142.png"></p><span id="more"></span>    <p>​    生产者将消息存到kafka中就已经将消息标记了offset(偏移量)了,只是消费者消费的时候再去存一份,老版本存在zookeeper中,新版本是存在__consumer_offsets这个主题里面的<br>​        Kafka中消息是以topic(主题)进行分类的，生产者生产消息，消费者消费消息，都是面向topic的。<br>​        topic是逻辑上的概念，而partition(分区)是物理上的概念，每个partition对应于一个log文件，该log文件中存储的就是producer生产的数据。Producer生产的数据会被不断追加到该log文件末端，且每条数据都有自己的offset。消费者组中的每个消费者，都会实时记录自己消费到了哪个offset，以便出错恢复时，从上次的位置继续消费。</p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220215193439.png"></p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220215193530.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">00000000000000000000.index</span><br><span class="line">00000000000000000000.log</span><br><span class="line">00000000000000170410.index</span><br><span class="line">00000000000000170410.log</span><br><span class="line">00000000000000239430.index</span><br><span class="line">00000000000000239430.log</span><br></pre></td></tr></table></figure><p>index和log文件以当前segment的第一条消息的offset命名。下图为index文件和log文件的结构示意图。</p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220215194058.png"></p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220215194118.png"></p><h1 id="Kafka生产者"><a href="#Kafka生产者" class="headerlink" title="Kafka生产者"></a>Kafka生产者</h1><p><strong>如何决定我的消息进入到那个分区?</strong></p><h1 id="分区策略"><a href="#分区策略" class="headerlink" title="分区策略"></a>分区策略</h1><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220215194251.png"></p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220215194301.png"></p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220215194731.png"></p><h1 id="数据可靠性保证-重点"><a href="#数据可靠性保证-重点" class="headerlink" title="数据可靠性保证(重点)"></a>数据可靠性保证(重点)</h1><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220215194918.png"></p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220215194847.png"></p><p><strong>1）副本数据同步策略</strong></p><table><thead><tr><th><strong>方案</strong></th><th><strong>优点</strong></th><th><strong>缺点</strong></th></tr></thead><tbody><tr><td><strong>半数以上完成同步，就发送ack</strong></td><td>延迟低</td><td>选举新的leader时，容忍n台节点的故障，需要2n+1个副本</td></tr><tr><td><strong>全部完成同步，才发送ack</strong></td><td>选举新的leader时，容忍n台节点的故障，需要n+1个副本</td><td><strong>延迟高</strong></td></tr></tbody></table><p><strong>Kafka选择了第二种方案，原因如下：</strong><br>1.同样为了容忍n台节点的故障，第一种方案需要2n+1个副本，而第二种方案只需要n+1个副本，而Kafka的每个分区都有大量的数据，第一种方案会造成大量数据的冗余。<br>2.虽然第二种方案的网络延迟会比较高，但网络延迟对Kafka的影响较小。</p><p><strong>2）ISR,就是为了选取leader用的</strong><br>    采用第二种方案之后，设想以下情景：leader收到数据，所有follower都开始同步数据，但有一个follower，因为某种故障，迟迟不能与leader进行同步，那leader就要一直等下去，直到它完成同步，才能发送ack。这个问题怎么解决呢？<br>    Leader维护了一个动态的in-sync replica set (ISR)，意为和leader保持同步的follower集合。当ISR中的follower完成数据的同步之后，leader就会给follower发送ack。如果follower长时间未向leader同步数据，则该follower将被踢出ISR，该时间阈值由replica.lag.time.max.ms参数设定。Leader发生故障之后，就会从ISR中选举新的leader。</p><p><strong>3）ack应答机制</strong><br>    对于某些不太重要的数据，对数据的可靠性要求不是很高，能够容忍数据的少量丢失，所以没必要等ISR中的follower全部接收成功。<br>所以Kafka为用户提供了三种可靠性级别，用户根据对可靠性和延迟的要求进行权衡，选择以下的配置。<br>acks参数配置：<br><strong>acks：</strong><br>0：producer不等待broker的ack，这一操作提供了一个最低的延迟，broker一接收到还没有写入磁盘就已经返回，当broker故障时有可能丢失数据；<br>1：producer等待broker的ack，partition的leader落盘成功后返回ack，如果在follower同步成功之前leader故障，那么将会丢失数据；</p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220215200941.png"></p><p>-1（all）：producer等待broker的ack，partition的leader和follower全部落盘成功后才返回ack。但是如果在follower同步完成后，broker发送ack之前，leader发生故障，那么会造成<strong>数据重复</strong>。</p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220215201151.png"></p><p><strong>4）故障处理细节</strong></p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220215201320.png"></p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220215201341.png"></p><h1 id="Exactly-Once语义"><a href="#Exactly-Once语义" class="headerlink" title="Exactly Once语义"></a>Exactly Once语义</h1><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220215201436.png"></p><h1 id="Kafka消费者"><a href="#Kafka消费者" class="headerlink" title="Kafka消费者"></a>Kafka消费者</h1><h2 id="消费方式"><a href="#消费方式" class="headerlink" title="消费方式"></a>消费方式</h2><p><strong>consumer采用pull（拉）模式从broker中读取数据。</strong><br>        push（推）模式很难适应消费速率不同的消费者，因为消息发送速率是由broker决定的。它的目标是尽可能以最快速度传递消息，但是这样很容易造成consumer来不及处理消息，典型的表现就是拒绝服务以及网络拥塞。而pull模式则可以根据consumer的消费能力以适当的速率消费消息。<br>        pull模式不足之处是，如果kafka没有数据，消费者可能会陷入循环中，一直返回空数据。如果某一次没有拉去到数据,我就让他多等一会儿针对这一点，Kafka的消费者在消费数据时会传入一个时长参数timeout，如果当前没有数据可供消费，consumer会等待一段时间之后再返回，这段时长即为timeout。</p><h2 id="分区分配策略"><a href="#分区分配策略" class="headerlink" title="分区分配策略"></a>分区分配策略</h2><p>​        一个consumer group中有多个consumer，一个 topic有多个partition，所以必然会涉及到partition的分配问题，即确定那个partition由哪个consumer来消费。<br>Kafka有两种分配策略，一是RoundRobin轮询，一是Range范围。<br><strong>1）RoundRobin轮询</strong></p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220215201613.png"></p><p><strong>轮询的方式只适合所有消费者消费同样的主题,如果是不同的主题可能会出现这种情况,不同主题的消息,给了不-样的消费者了,出现消费混乱了</strong></p><p><strong>轮询是好,解决了不同负载的问题,但是会出问题</strong></p><p><strong>2）Range范围7/3,除不尽,则前面多一些</strong></p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220215201743.png"></p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220215201838.png"></p><h2 id="offset的维护"><a href="#offset的维护" class="headerlink" title="offset的维护"></a>offset的维护</h2><p>​        由于consumer在消费过程中可能会出现断电宕机等故障，consumer恢复后，需要从故障前的位置的继续消费，所以consumer需要实时记录自己消费到了哪个offset，以便故障恢复后继续消费。</p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220215201911.png"></p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220215202014.png"></p><h2 id="Kafka-高效读写数据"><a href="#Kafka-高效读写数据" class="headerlink" title="Kafka 高效读写数据"></a>Kafka 高效读写数据</h2><p>Kafka集群读写效率高是因为分布式和分区<br>但是单台kafka读写效率高就是下面的问题了</p><p>1）顺序写磁盘<br>        Kafka的producer生产数据，要写入到log文件中，写的过程是一直追加到文件末端，为顺序写。官网有数据表明，同样的磁盘，顺序写能到600M/s，而随机写只有100K/s。这与磁盘的机械机构有关，顺序写之所以快，是因为其省去了大量磁头寻址的时间。<br>2）零复制技术</p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220215202127.png"></p><p>Page Cache : 页面缓存</p><p>Application Cache : 应用缓存</p><p>Socket Cache : 套接字缓存</p><h2 id="Zookeeper在Kafka中的作用"><a href="#Zookeeper在Kafka中的作用" class="headerlink" title="Zookeeper在Kafka中的作用"></a>Zookeeper在Kafka中的作用</h2><p>Kafka集群中有一个broker会被选举为Controller(控制器)，负责管理集群broker的上下线，所有topic的分区副本分配和leader选举等工作。<br>Controller的管理工作都是依赖于Zookeeper的。<br>    以下为partition的leader选举过程：</p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220215202449.png"></p><h2 id="Kafka事务"><a href="#Kafka事务" class="headerlink" title="Kafka事务"></a>Kafka事务</h2><p>​        Kafka从0.11版本开始引入了事务支持。事务可以保证Kafka在Exactly Once语义的基础上，生产和消费可以跨分区和会话，要么全部成功，要么全部失败。</p><h3 id="Producer事务"><a href="#Producer事务" class="headerlink" title="Producer事务"></a>Producer事务</h3><p>​        为了实现跨分区跨会话的事务，需要引入一个全局唯一的Transaction ID，并将Producer获得的PID和Transaction ID绑定。这样当Producer重启后就可以通过正在进行的Transaction ID获得原来的PID。<br>为了管理Transaction，Kafka引入了一个新的组件Transaction Coordinator。Producer就是通过和Transaction Coordinator交互获得Transaction ID对应的任务状态。Transaction Coordinator还负责将事务所有写入Kafka的一个内部Topic，这样即使整个服务重启，由于事务状态得到保存，进行中的事务状态可以得到恢复，从而继续进行。</p><h3 id="Consumer事务"><a href="#Consumer事务" class="headerlink" title="Consumer事务"></a>Consumer事务</h3><p>​        上述事务机制主要是从Producer方面考虑，对于Consumer而言，事务的保证就会相对较弱，尤其时无法保证Commit的信息被精确消费。这是由于Consumer可以通过offset访问任意信息，而且不同的Segment File生命周期不同，同一事务的消息可能会出现重启后被删除的情况。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Kafka工作流程及文件存储机制&quot;&gt;&lt;a href=&quot;#Kafka工作流程及文件存储机制&quot; class=&quot;headerlink&quot; title=&quot;Kafka工作流程及文件存储机制&quot;&gt;&lt;/a&gt;Kafka工作流程及文件存储机制&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220215193142.png&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="大数据" scheme="http://xubatian.cn/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
    <category term="Kafka" scheme="http://xubatian.cn/tags/Kafka/"/>
    
  </entry>
  
  <entry>
    <title>kafka概述</title>
    <link href="http://xubatian.cn/kafka%E6%A6%82%E8%BF%B0/"/>
    <id>http://xubatian.cn/kafka%E6%A6%82%E8%BF%B0/</id>
    <published>2022-02-15T04:27:45.000Z</published>
    <updated>2022-02-15T05:24:00.214Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Kafka概述"><a href="#Kafka概述" class="headerlink" title="Kafka概述"></a>Kafka概述</h1><h2 id="kafka定义"><a href="#kafka定义" class="headerlink" title="kafka定义"></a>kafka定义</h2><p>Kafka是一个分布式的<strong>基于发布/订阅模式</strong>的消息队列（Message Queue），主要应用于大数据实时处理领域。<br><strong>队列先进先出</strong></p><span id="more"></span><h2 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h2><h3 id="传统消息队列的应用场景"><a href="#传统消息队列的应用场景" class="headerlink" title="传统消息队列的应用场景"></a>传统消息队列的应用场景</h3><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220215122958.png"></p><p><strong>使用消息队列的好处</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1）解耦</span><br><span class="line">允许你独立的扩展或修改两边的处理过程，只要确保它们遵守同样的接口约束。</span><br><span class="line">2）可恢复性</span><br><span class="line">系统的一部分组件失效时，不会影响到整个系统。消息队列降低了进程间的耦合度，所以即使一个处理消息的进程挂掉，加入队列中的消息仍然可以在系统恢复后被处理。</span><br><span class="line">3）缓冲</span><br><span class="line">有助于控制和优化数据流经过系统的速度，解决生产消息和消费消息的处理速度不一致的情况。</span><br><span class="line">4）灵活性 &amp; 峰值处理能力</span><br><span class="line">在访问量剧增的情况下，应用仍然需要继续发挥作用，但是这样的突发流量并不常见。如果为以能处理这类峰值访问为标准来投入资源随时待命无疑是巨大的浪费。使用消息队列能够使关键组件顶住突发的访问压力，而不会因为突发的超负荷的请求而完全崩溃。</span><br><span class="line">5）异步通信</span><br><span class="line">很多时候，用户不想也不需要立即处理消息。消息队列提供了异步处理机制，允许用户把一个消息放入队列，但并不立即处理它。想向队列中放入多少消息就放多少，然后在需要的时候再去处理它们。</span><br></pre></td></tr></table></figure><h3 id="消息队列的两种模式-不是kafka的模式-kafka是发布订阅模式"><a href="#消息队列的两种模式-不是kafka的模式-kafka是发布订阅模式" class="headerlink" title="消息队列的两种模式   (不是kafka的模式, kafka是发布订阅模式)"></a>消息队列的两种模式   (不是kafka的模式, kafka是发布订阅模式)</h3><p><strong>1）点对点模式</strong>（一对一,只在两个系统之间,不会给到其他系统，消费者主动拉取数据，消息收到后消息清除）<br>        消息生产者生产消息发送到Queue中，然后消息消费者从Queue中取出并且消费消息。<br>        消息被消费以后，queue中不再有存储，所以消息消费者不可能消费到已经被消费的消息。Queue支持存在多个消费者，但是对一个消息而言，只会有一个消费者可以消费。</p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220215131828.png"></p><p><strong>（2）发布/订阅模式（一对多，消费者消费数据之后不会清除消息）</strong><br>Kafka是发布/订阅模式的基于消费者主动拉取得模式<br>消息生产者（发布）将消息发布到topic中，同时有多个消息消费者（订阅）消费该消息。和点对点方式不同，发布到topic的消息会被所有订阅者消费。</p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220215131903.png"></p><p>A系统和B系统之间加一个消息中间件 , 中间件只管暂存一下,不负责处理. 消息队列,先进先出的原则.  B系统10M/s的速度读取数据. 如果我A系统生产速度是10M/s, B系统消费跟不上, 那么我们就得升级 ,加机器.</p><h2 id="Kafka基础架构"><a href="#Kafka基础架构" class="headerlink" title="Kafka基础架构"></a>Kafka基础架构</h2><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220215132044.png"></p><p><strong>同一个消费者组里面的消费者不能同时消费同一个分区的数据</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1）Producer ：消息生产者，就是向kafka broker发消息的客户端;</span><br><span class="line">2）Consumer ：消息消费者，向kafka broker取消息的客户端;</span><br><span class="line">3）Consumer Group （CG）：消费者组，由多个consumer组成。消费者组内每个消费者负责消费不同分区的数据，一个分区只能由一个组内消费者消费；消费者组之间互不影响。所有的消费者都属于某个消费者组，即消费者组是逻辑上的一个订阅者。</span><br><span class="line">4）Broker ：一台kafka服务器就是一个broker。一个集群由多个broker组成。一个broker可以容纳多个topic。</span><br><span class="line">5）Topic ：可以理解为一个队列，生产者和消费者面向的都是一个topic；</span><br><span class="line">6）Partition：为了实现扩展性，一个非常大的topic可以分布到多个broker（即服务器）上，一个topic可以分为多个partition，每个partition是一个有序的队列；</span><br><span class="line">7）Replica：副本，为保证集群中的某个节点发生故障时，该节点上的partition数据不丢失，且kafka仍然能够继续工作，kafka提供了副本机制，一个topic的每个分区都有若干个副本，一个leader和若干个follower。</span><br><span class="line">8）leader：每个分区多个副本的“主”，生产者发送数据的对象，以及消费者消费数据的对象都是leader。</span><br><span class="line">9）follower：每个分区多个副本中的“从”，实时从leader中同步数据，保持和leader数据的同步。leader发生故障时，某个follower会成为新的follower。</span><br></pre></td></tr></table></figure><h2 id="虚拟机上的命令"><a href="#虚拟机上的命令" class="headerlink" title="虚拟机上的命令"></a>虚拟机上的命令</h2><p>//查看kafka的消费记录offset需要使用命令：<br>kafka-consumer-offset-checker.sh –zookeeper hadoop101,hadoop102,hadoop103 –topic sensor –group flink-consumer_group</p><h2 id="offset是什么"><a href="#offset是什么" class="headerlink" title="offset是什么?"></a>offset是什么?</h2><p>对于每一个topic， Kafka集群都会维持一个分区日志<br>每个分区都是有序且顺序不可变的记录集，并且不断地追加到结构化的log文件。分区中的每一个记录都会分配一个id号来表示顺序，我们称之为offset，offset用来唯一的标识分区中每一条记录。</p><h2 id="offset有什么用"><a href="#offset有什么用" class="headerlink" title="offset有什么用?"></a>offset有什么用?</h2><p>消费者在消费数据时,发生宕机后,再次重新启动后,消费的数据需要从宕机位置开始读取</p><p>如果从头读取,有一部分消息一定出现了重复消费<br>如果从宕机时的消费位置读取,就不会出现重复消费<br>因此kafka设计了offset可以用于处理这种情况<br>如何维护offset的数值?<br>有两种方式,</p><p><strong>自动提交</strong>，设置enable.auto.commit=true，更新的频率根据参数【auto.commit.interval.ms】来定。这种方式也被称为【at most once】，fetch到消息后就可以更新offset，无论是否消费成功。默认就是true</p><p><strong>手动提交</strong>，设置enable.auto.commit=false，这种方式称为【at least once】。fetch到消息后，等消费完成再调用方法【consumer.commitSync()】，手动更新offset；如果消费失败，则offset也不会更新，此条消息会被重复消费一次</p><h2 id="offset实体在什么位置"><a href="#offset实体在什么位置" class="headerlink" title="offset实体在什么位置?"></a>offset实体在什么位置?</h2><p>0.9.0版本以前.这些数值维护在zookeeper中,但是zk不适合大量写入.后来做了改动<br>0.9.0 版本以后,数据维护在kafka的_consumer_offsets主题下.<br>内部结构包括groupid:topicName_partition offset</p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220215132209.png"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Kafka概述&quot;&gt;&lt;a href=&quot;#Kafka概述&quot; class=&quot;headerlink&quot; title=&quot;Kafka概述&quot;&gt;&lt;/a&gt;Kafka概述&lt;/h1&gt;&lt;h2 id=&quot;kafka定义&quot;&gt;&lt;a href=&quot;#kafka定义&quot; class=&quot;headerlink&quot; title=&quot;kafka定义&quot;&gt;&lt;/a&gt;kafka定义&lt;/h2&gt;&lt;p&gt;Kafka是一个分布式的&lt;strong&gt;基于发布/订阅模式&lt;/strong&gt;的消息队列（Message Queue），主要应用于大数据实时处理领域。&lt;br&gt;&lt;strong&gt;队列先进先出&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="大数据" scheme="http://xubatian.cn/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
    <category term="Kafka" scheme="http://xubatian.cn/tags/Kafka/"/>
    
  </entry>
  
  <entry>
    <title>Flink 原理与实现: Flink-CDC</title>
    <link href="http://xubatian.cn/Flink-%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E7%8E%B0-Flink-CDC/"/>
    <id>http://xubatian.cn/Flink-%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E7%8E%B0-Flink-CDC/</id>
    <published>2022-02-15T03:38:00.000Z</published>
    <updated>2022-02-15T03:44:33.995Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是CDC"><a href="#什么是CDC" class="headerlink" title="什么是CDC"></a>什么是CDC</h1><p>CDC是Change Data Capture(变更数据获取)的简称。核心思想是，监测并捕获数据库的变动（包括数据或数据表的插入、更新以及删除等），将这些变更按发生的顺序完整记录下来，写入到消息中间件中以供其他服务进行订阅及消费。</p><h1 id="CDC的种类"><a href="#CDC的种类" class="headerlink" title="CDC的种类"></a>CDC的种类</h1><p><strong>CDC主要分为基于查询的CDC和基于Binlog的CDC两种方式</strong>，我们主要了解一下这两种之间的区别：</p><span id="more"></span><table><thead><tr><th></th><th>基于查询的CDC</th><th>基于Binlog的CDC</th></tr></thead><tbody><tr><td>开源产品</td><td>Sqoop、Kafka JDBC Source</td><td>Canal（国内用的多）、Maxwell、Debezium(国外用的多)</td></tr><tr><td>执行模式</td><td>Batch(批处理)</td><td>Streaming(流式)</td></tr><tr><td>是否可以捕获所有数据变化</td><td>否</td><td>是</td></tr><tr><td>延迟性</td><td>高延迟</td><td>低延迟</td></tr><tr><td>是否增加数据库压力</td><td>是</td><td>否</td></tr></tbody></table><p>注意：</p><p>​         Flink里面的CDC其实内置了Debezium. 这个flinkcdc是阿里搞的,他并没有合并到flink的核心包里面.所以官网上是找不到的.他的资料在git上面. 我们要用只能去Github上去找资料.<br>​        <strong>Sqoop导数据是每天凌晨30分启动任务去导数据.一次性到数据.</strong><br>​        <strong>Maxwell是变化一条导一条.</strong></p><h1 id="Flink-CDC"><a href="#Flink-CDC" class="headerlink" title="Flink-CDC"></a>Flink-CDC</h1><p>​            Flink社区开发了 flink-cdc-connectors 组件，这是一个可以直接从 MySQL、PostgreSQL 等数据库直接读取全量数据和增量变更数据的 source 组件。目前也已开源，开源地址：<a href="https://github.com/ververica/flink-cdc-connectors">https://github.com/ververica/flink-cdc-connectors</a></p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220215114212.png"></p><h1 id="FlinkCDC案例实操"><a href="#FlinkCDC案例实操" class="headerlink" title="FlinkCDC案例实操"></a>FlinkCDC案例实操</h1><p>案例代码: <a href="https://github.com/ShangBaiShuYao/flink-learning-from-zhisheng/blob/main/flink-cdc/src/main/java/com/shangbaishuyao/flinkcdc/">https://github.com/ShangBaiShuYao/flink-learning-from-zhisheng/blob/main/flink-cdc/src/main/java/com/shangbaishuyao/flinkcdc/</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;什么是CDC&quot;&gt;&lt;a href=&quot;#什么是CDC&quot; class=&quot;headerlink&quot; title=&quot;什么是CDC&quot;&gt;&lt;/a&gt;什么是CDC&lt;/h1&gt;&lt;p&gt;CDC是Change Data Capture(变更数据获取)的简称。核心思想是，监测并捕获数据库的变动（包括数据或数据表的插入、更新以及删除等），将这些变更按发生的顺序完整记录下来，写入到消息中间件中以供其他服务进行订阅及消费。&lt;/p&gt;
&lt;h1 id=&quot;CDC的种类&quot;&gt;&lt;a href=&quot;#CDC的种类&quot; class=&quot;headerlink&quot; title=&quot;CDC的种类&quot;&gt;&lt;/a&gt;CDC的种类&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;CDC主要分为基于查询的CDC和基于Binlog的CDC两种方式&lt;/strong&gt;，我们主要了解一下这两种之间的区别：&lt;/p&gt;</summary>
    
    
    
    <category term="大数据" scheme="http://xubatian.cn/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
    <category term="Flink" scheme="http://xubatian.cn/tags/Flink/"/>
    
  </entry>
  
  <entry>
    <title>Flink 原理与实现: Flink流计算常用算子（Flink算子大全）</title>
    <link href="http://xubatian.cn/Flink-%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E7%8E%B0-Flink%E6%B5%81%E8%AE%A1%E7%AE%97%E5%B8%B8%E7%94%A8%E7%AE%97%E5%AD%90%EF%BC%88Flink%E7%AE%97%E5%AD%90%E5%A4%A7%E5%85%A8%EF%BC%89/"/>
    <id>http://xubatian.cn/Flink-%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E7%8E%B0-Flink%E6%B5%81%E8%AE%A1%E7%AE%97%E5%B8%B8%E7%94%A8%E7%AE%97%E5%AD%90%EF%BC%88Flink%E7%AE%97%E5%AD%90%E5%A4%A7%E5%85%A8%EF%BC%89/</id>
    <published>2022-02-15T01:20:27.000Z</published>
    <updated>2022-02-15T02:21:55.314Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220215092137.png"></p><p>Flink和Spark类似，也是一种一站式处理的框架；既可以进行批处理（DataSet），也可以进行实时处理（DataStream）。</p><p>所以下面将Flink的算子分为两大类：一类是DataSet，一类是DataStream。</p><p><strong>Flink官网:</strong> <a href="https://nightlies.apache.org/flink/flink-docs-release-1.14/zh/docs/dev/datastream/operators/overview/">https://nightlies.apache.org/flink/flink-docs-release-1.14/zh/docs/dev/datastream/operators/overview/</a></p><p><strong>案例代码:</strong> <a href="https://github.com/ShangBaiShuYao/flink-learning-from-zhisheng/tree/main/flink-1.12.0-Demo/src/main/java/com/shangbaishuyao/demo">https://github.com/ShangBaiShuYao/flink-learning-from-zhisheng/tree/main/flink-1.12.0-Demo/src/main/java/com/shangbaishuyao/demo</a></p><span id="more"></span><p>我们列举了一些Flink自带且常用的transformation算子，例如map、flatMap等。在Flink的编程体系中，我们获取到数据源之后，需要经过一系列的处理即transformation操作，再将最终结果输出到目的Sink（ES、mysql或者hdfs），使数据落地。因此，除了正确的继承重写RichSourceFunction&lt;&gt;和RichSinkFunction&lt;&gt;之外，最终要的就是实时处理这部分，下面的图介绍了Flink代码执行流程以及各模块的组成部分。</p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220215092857.png"></p><p>在Flink中，Transformation算子就是将一个或多个DataStream转换为新的DataStream，可以将多个转换组合成复杂的数据流拓扑。如下图所示，DataStream会由不同的Transformation操作，转换、过滤、聚合成其他不同的流，从而完成我们的业务要求。</p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220215092803.png"></p><h1 id="DataSet"><a href="#DataSet" class="headerlink" title="DataSet"></a>DataSet</h1><h3 id="一、Source算子"><a href="#一、Source算子" class="headerlink" title="一、Source算子"></a><strong>一、Source算子</strong></h3><h3 id="1-fromCollection"><a href="#1-fromCollection" class="headerlink" title="1. fromCollection"></a><strong>1. fromCollection</strong></h3><p>fromCollection：从本地集合读取数据</p><p>例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">val env = ExecutionEnvironment.getExecutionEnvironment</span><br><span class="line">val textDataSet: DataSet[String] = env.fromCollection(</span><br><span class="line">  List(&quot;1,张三&quot;, &quot;2,李四&quot;, &quot;3,王五&quot;, &quot;4,赵六&quot;)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="2-readTextFile"><a href="#2-readTextFile" class="headerlink" title="2. readTextFile"></a><strong>2. readTextFile</strong></h3><p>readTextFile：从文件中读取</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">val textDataSet: DataSet[String]  = env.readTextFile(&quot;/data/a.txt&quot;)</span><br></pre></td></tr></table></figure><h3 id="3-readTextFile：遍历目录"><a href="#3-readTextFile：遍历目录" class="headerlink" title="3. readTextFile：遍历目录"></a><strong>3. readTextFile：遍历目录</strong></h3><p>readTextFile可以对一个文件目录内的所有文件，包括所有子目录中的所有文件的遍历访问方式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">val parameters = new Configuration</span><br><span class="line">// recursive.file.enumeration 开启递归</span><br><span class="line">parameters.setBoolean(&quot;recursive.file.enumeration&quot;, true)</span><br><span class="line">val file = env.readTextFile(&quot;/data&quot;).withParameters(parameters)</span><br></pre></td></tr></table></figure><h3 id="4-readTextFile：读取压缩文件"><a href="#4-readTextFile：读取压缩文件" class="headerlink" title="4. readTextFile：读取压缩文件"></a><strong>4. readTextFile：读取压缩文件</strong></h3><p>对于以下压缩类型，不需要指定任何额外的inputformat方法，flink可以自动识别并且解压。但是，压缩文件可能不会并行读取，可能是顺序读取的，这样可能会影响作业的可伸缩性。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">val file = env.readTextFile(&quot;/data/file.gz&quot;)</span><br></pre></td></tr></table></figure><h3 id="二、Transform转换算子"><a href="#二、Transform转换算子" class="headerlink" title="二、Transform转换算子"></a><strong>二、Transform转换算子</strong></h3><p>因为Transform算子基于Source算子操作，所以首先构建Flink执行环境及Source算子，后续Transform算子操作基于此：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">val env = ExecutionEnvironment.getExecutionEnvironment</span><br><span class="line">val textDataSet: DataSet[String] = env.fromCollection(</span><br><span class="line">  List(&quot;张三,1&quot;, &quot;李四,2&quot;, &quot;王五,3&quot;, &quot;张三,4&quot;)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="1-map"><a href="#1-map" class="headerlink" title="1. map"></a><strong>1. map</strong></h3><p>将DataSet中的每一个元素转换为另外一个元素</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 使用map将List转换为一个Scala的样例类</span><br><span class="line"></span><br><span class="line">case class User(name: String, id: String)</span><br><span class="line"></span><br><span class="line">val userDataSet: DataSet[User] = textDataSet.map &#123;</span><br><span class="line">  text =&gt;</span><br><span class="line">    val fieldArr = text.split(&quot;,&quot;)</span><br><span class="line">    User(fieldArr(0), fieldArr(1))</span><br><span class="line">&#125;</span><br><span class="line">userDataSet.print()</span><br></pre></td></tr></table></figure><h3 id="2-flatMap"><a href="#2-flatMap" class="headerlink" title="2. flatMap"></a><strong>2. flatMap</strong></h3><p>将DataSet中的每一个元素转换为0…n个元素。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 使用flatMap操作，将集合中的数据：</span><br><span class="line">// 根据第一个元素，进行分组</span><br><span class="line">// 根据第二个元素，进行聚合求值 </span><br><span class="line"></span><br><span class="line">val result = textDataSet.flatMap(line =&gt; line)</span><br><span class="line">      .groupBy(0) // 根据第一个元素，进行分组</span><br><span class="line">      .sum(1) // 根据第二个元素，进行聚合求值</span><br><span class="line">      </span><br><span class="line">result.print()</span><br></pre></td></tr></table></figure><h3 id="3-mapPartition"><a href="#3-mapPartition" class="headerlink" title="3. mapPartition"></a><strong>3. mapPartition</strong></h3><p>将一个分区中的元素转换为另一个元素</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 使用mapPartition操作，将List转换为一个scala的样例类</span><br><span class="line"></span><br><span class="line">case class User(name: String, id: String)</span><br><span class="line"></span><br><span class="line">val result: DataSet[User] = textDataSet.mapPartition(line =&gt; &#123;</span><br><span class="line">      line.map(index =&gt; User(index._1, index._2))</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">result.print()</span><br></pre></td></tr></table></figure><h3 id="4-filter"><a href="#4-filter" class="headerlink" title="4. filter"></a><strong>4. filter</strong></h3><p>过滤出来一些符合条件的元素，返回<strong>boolean值为true</strong>的元素</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">val source: DataSet[String] = env.fromElements(&quot;java&quot;, &quot;scala&quot;, &quot;java&quot;)</span><br><span class="line">val filter:DataSet[String] = source.filter(line =&gt; line.contains(&quot;java&quot;))//过滤出带java的数据</span><br><span class="line">filter.print()</span><br></pre></td></tr></table></figure><h3 id="5-reduce"><a href="#5-reduce" class="headerlink" title="5. reduce"></a><strong>5. reduce</strong></h3><p>可以对一个dataset或者一个group来进行聚合计算，最终<strong>聚合成一个元素</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 使用 fromElements 构建数据源</span><br><span class="line">val source = env.fromElements((&quot;java&quot;, 1), (&quot;scala&quot;, 1), (&quot;java&quot;, 1))</span><br><span class="line">// 使用map转换成DataSet元组</span><br><span class="line">val mapData: DataSet[(String, Int)] = source.map(line =&gt; line)</span><br><span class="line">// 根据首个元素分组</span><br><span class="line">val groupData = mapData.groupBy(_._1)</span><br><span class="line">// 使用reduce聚合</span><br><span class="line">val reduceData = groupData.reduce((x, y) =&gt; (x._1, x._2 + y._2))</span><br><span class="line">// 打印测试</span><br><span class="line">reduceData.print()</span><br></pre></td></tr></table></figure><h3 id="6-reduceGroup"><a href="#6-reduceGroup" class="headerlink" title="6. reduceGroup"></a><strong>6. reduceGroup</strong></h3><p>将一个dataset或者一个group<strong>聚合成一个或多个元素</strong>。<br>reduceGroup是reduce的一种优化方案；<br>它会先分组reduce，然后在做整体的reduce；这样做的好处就是可以减少网络IO</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 使用 fromElements 构建数据源</span><br><span class="line">val source: DataSet[(String, Int)] = env.fromElements((&quot;java&quot;, 1), (&quot;scala&quot;, 1), (&quot;java&quot;, 1))</span><br><span class="line">// 根据首个元素分组</span><br><span class="line">val groupData = source.groupBy(_._1)</span><br><span class="line">// 使用reduceGroup聚合</span><br><span class="line">val result: DataSet[(String, Int)] = groupData.reduceGroup &#123;</span><br><span class="line">      (in: Iterator[(String, Int)], out: Collector[(String, Int)]) =&gt;</span><br><span class="line">        val tuple = in.reduce((x, y) =&gt; (x._1, x._2 + y._2))</span><br><span class="line">        out.collect(tuple)</span><br><span class="line">    &#125;</span><br><span class="line">// 打印测试</span><br><span class="line">result.print()</span><br></pre></td></tr></table></figure><h3 id="7-minBy和maxBy"><a href="#7-minBy和maxBy" class="headerlink" title="7. minBy和maxBy"></a><strong>7. minBy和maxBy</strong></h3><p>选择具有最小值或最大值的<strong>元素</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 使用minBy操作，求List中每个人的最小值</span><br><span class="line">// List(&quot;张三,1&quot;, &quot;李四,2&quot;, &quot;王五,3&quot;, &quot;张三,4&quot;)</span><br><span class="line"></span><br><span class="line">case class User(name: String, id: String)</span><br><span class="line">// 将List转换为一个scala的样例类</span><br><span class="line">val text: DataSet[User] = textDataSet.mapPartition(line =&gt; &#123;</span><br><span class="line">      line.map(index =&gt; User(index._1, index._2))</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">val result = text</span><br><span class="line">          .groupBy(0) // 按照姓名分组</span><br><span class="line">          .minBy(1)   // 每个人的最小值</span><br></pre></td></tr></table></figure><h3 id="8-Aggregate"><a href="#8-Aggregate" class="headerlink" title="8. Aggregate"></a><strong>8. Aggregate</strong></h3><p>在数据集上进行聚合求<strong>最值</strong>（最大值、最小值）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">val data = new mutable.MutableList[(Int, String, Double)]</span><br><span class="line">    data.+=((1, &quot;yuwen&quot;, 89.0))</span><br><span class="line">    data.+=((2, &quot;shuxue&quot;, 92.2))</span><br><span class="line">    data.+=((3, &quot;yuwen&quot;, 89.99))</span><br><span class="line">// 使用 fromElements 构建数据源</span><br><span class="line">val input: DataSet[(Int, String, Double)] = env.fromCollection(data)</span><br><span class="line">// 使用group执行分组操作</span><br><span class="line">val value = input.groupBy(1)</span><br><span class="line">            // 使用aggregate求最大值元素</span><br><span class="line">            .aggregate(Aggregations.MAX, 2) </span><br><span class="line">// 打印测试</span><br><span class="line">value.print()       </span><br></pre></td></tr></table></figure><p><strong>Aggregate只能作用于元组上</strong></p><blockquote><p> 注意：<br>要使用aggregate，只能使用字段索引名或索引名称来进行分组 <code>groupBy(0)</code> ，否则会报一下错误:<br>Exception in thread “main” java.lang.UnsupportedOperationException: Aggregate  does not support grouping with KeySelector functions, yet.</p></blockquote><h3 id="9-distinct"><a href="#9-distinct" class="headerlink" title="9. distinct"></a><strong>9. distinct</strong></h3><p>去除重复的数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 数据源使用上一题的</span><br><span class="line">// 使用distinct操作，根据科目去除集合中重复的元组数据</span><br><span class="line"></span><br><span class="line">val value: DataSet[(Int, String, Double)] = input.distinct(1)</span><br><span class="line">value.print()</span><br></pre></td></tr></table></figure><h3 id="10-first"><a href="#10-first" class="headerlink" title="10. first"></a><strong>10. first</strong></h3><p>取前N个数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">input.first(2) // 取前两个数</span><br></pre></td></tr></table></figure><h3 id="11-join"><a href="#11-join" class="headerlink" title="11. join"></a><strong>11. join</strong></h3><p>将两个DataSet按照一定条件连接到一起，形成新的DataSet</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// s1 和 s2 数据集格式如下：</span><br><span class="line">// DataSet[(Int, String,String, Double)]</span><br><span class="line"></span><br><span class="line"> val joinData = s1.join(s2)  // s1数据集 join s2数据集</span><br><span class="line">             .where(0).equalTo(0) &#123;     // join的条件</span><br><span class="line">      (s1, s2) =&gt; (s1._1, s1._2, s2._2, s1._3)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="12-leftOuterJoin"><a href="#12-leftOuterJoin" class="headerlink" title="12. leftOuterJoin"></a><strong>12. leftOuterJoin</strong></h3><p>左外连接,左边的Dataset中的每一个元素，去连接右边的元素</p><p>此外还有：</p><p>rightOuterJoin：右外连接,左边的Dataset中的每一个元素，去连接左边的元素</p><p>fullOuterJoin：全外连接,左右两边的元素，全部连接</p><p>下面以 leftOuterJoin 进行示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"> val data1 = ListBuffer[Tuple2[Int,String]]()</span><br><span class="line">    data1.append((1,&quot;zhangsan&quot;))</span><br><span class="line">    data1.append((2,&quot;lisi&quot;))</span><br><span class="line">    data1.append((3,&quot;wangwu&quot;))</span><br><span class="line">    data1.append((4,&quot;zhaoliu&quot;))</span><br><span class="line"></span><br><span class="line">val data2 = ListBuffer[Tuple2[Int,String]]()</span><br><span class="line">    data2.append((1,&quot;beijing&quot;))</span><br><span class="line">    data2.append((2,&quot;shanghai&quot;))</span><br><span class="line">    data2.append((4,&quot;guangzhou&quot;))</span><br><span class="line"></span><br><span class="line">val text1 = env.fromCollection(data1)</span><br><span class="line">val text2 = env.fromCollection(data2)</span><br><span class="line"></span><br><span class="line">text1.leftOuterJoin(text2).where(0).equalTo(0).apply((first,second)=&gt;&#123;</span><br><span class="line">      if(second==null)&#123;</span><br><span class="line">        (first._1,first._2,&quot;null&quot;)</span><br><span class="line">      &#125;else&#123;</span><br><span class="line">        (first._1,first._2,second._2)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;).print()</span><br></pre></td></tr></table></figure><h3 id="13-cross"><a href="#13-cross" class="headerlink" title="13. cross"></a><strong>13. cross</strong></h3><p>交叉操作，通过形成这个数据集和其他数据集的笛卡尔积，创建一个新的数据集</p><p>和join类似，但是这种交叉操作会产生笛卡尔积，在<strong>数据比较大的时候，是非常消耗内存的操作</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">val cross = input1.cross(input2)&#123;</span><br><span class="line">      (input1 , input2) =&gt; (input1._1,input1._2,input1._3,input2._2)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">cross.print()</span><br></pre></td></tr></table></figure><h3 id="14-union"><a href="#14-union" class="headerlink" title="14. union"></a><strong>14. union</strong></h3><p>联合操作，创建包含来自该数据集和其他数据集的元素的新数据集,<strong>不会去重</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">val unionData: DataSet[String] = elements1.union(elements2).union(elements3)</span><br><span class="line">// 去除重复数据</span><br><span class="line">val value = unionData.distinct(line =&gt; line)</span><br></pre></td></tr></table></figure><h3 id="15-rebalance"><a href="#15-rebalance" class="headerlink" title="15. rebalance"></a><strong>15. rebalance</strong></h3><p>Flink也有数据倾斜的时候，比如当前有数据量大概10亿条数据需要处理，在处理过程中可能会发生如图所示的状况：</p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220215092303.png"></p><p>这个时候本来总体数据量只需要10分钟解决的问题，出现了数据倾斜，机器1上的任务需要4个小时才能完成，那么其他3台机器执行完毕也要等待机器1执行完毕后才算整体将任务完成； 所以在实际的工作中，出现这种情况比较好的解决方案就是接下来要介绍的—<strong>rebalance</strong>（内部使用round robin方法将数据均匀打散。这对于数据倾斜时是很好的选择。）</p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220215092318.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 使用rebalance操作，避免数据倾斜</span><br><span class="line">val rebalance = filterData.rebalance()</span><br></pre></td></tr></table></figure><h3 id="16-partitionByHash"><a href="#16-partitionByHash" class="headerlink" title="16. partitionByHash"></a><strong>16. partitionByHash</strong></h3><p>按照指定的key进行hash分区</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">val data = new mutable.MutableList[(Int, Long, String)]</span><br><span class="line">data.+=((1, 1L, &quot;Hi&quot;))</span><br><span class="line">data.+=((2, 2L, &quot;Hello&quot;))</span><br><span class="line">data.+=((3, 2L, &quot;Hello world&quot;))</span><br><span class="line"></span><br><span class="line">val collection = env.fromCollection(data)</span><br><span class="line">val unique = collection.partitionByHash(1).mapPartition&#123;</span><br><span class="line">  line =&gt;</span><br><span class="line">    line.map(x =&gt; (x._1 , x._2 , x._3))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">unique.writeAsText(&quot;hashPartition&quot;, WriteMode.NO_OVERWRITE)</span><br><span class="line">env.execute()</span><br></pre></td></tr></table></figure><h3 id="17-partitionByRange"><a href="#17-partitionByRange" class="headerlink" title="17. partitionByRange"></a><strong>17. partitionByRange</strong></h3><p>根据指定的key对数据集进行范围分区</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">val data = new mutable.MutableList[(Int, Long, String)]</span><br><span class="line">data.+=((1, 1L, &quot;Hi&quot;))</span><br><span class="line">data.+=((2, 2L, &quot;Hello&quot;))</span><br><span class="line">data.+=((3, 2L, &quot;Hello world&quot;))</span><br><span class="line">data.+=((4, 3L, &quot;Hello world, how are you?&quot;))</span><br><span class="line"></span><br><span class="line">val collection = env.fromCollection(data)</span><br><span class="line">val unique = collection.partitionByRange(x =&gt; x._1).mapPartition(line =&gt; line.map&#123;</span><br><span class="line">  x=&gt;</span><br><span class="line">    (x._1 , x._2 , x._3)</span><br><span class="line">&#125;)</span><br><span class="line">unique.writeAsText(&quot;rangePartition&quot;, WriteMode.OVERWRITE)</span><br><span class="line">env.execute()</span><br></pre></td></tr></table></figure><h3 id="18-sortPartition"><a href="#18-sortPartition" class="headerlink" title="18. sortPartition"></a><strong>18. sortPartition</strong></h3><p>根据指定的字段值进行分区的排序</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">val data = new mutable.MutableList[(Int, Long, String)]</span><br><span class="line">    data.+=((1, 1L, &quot;Hi&quot;))</span><br><span class="line">    data.+=((2, 2L, &quot;Hello&quot;))</span><br><span class="line">    data.+=((3, 2L, &quot;Hello world&quot;))</span><br><span class="line">    data.+=((4, 3L, &quot;Hello world, how are you?&quot;))</span><br><span class="line"></span><br><span class="line">val ds = env.fromCollection(data)</span><br><span class="line">    val result = ds</span><br><span class="line">      .map &#123; x =&gt; x &#125;.setParallelism(2)</span><br><span class="line">      .sortPartition(1, Order.DESCENDING)//第一个参数代表按照哪个字段进行分区</span><br><span class="line">      .mapPartition(line =&gt; line)</span><br><span class="line">      .collect()</span><br><span class="line"></span><br><span class="line">println(result)</span><br></pre></td></tr></table></figure><h3 id="三、Sink算子"><a href="#三、Sink算子" class="headerlink" title="三、Sink算子"></a><strong>三、Sink算子</strong></h3><h3 id="1-collect"><a href="#1-collect" class="headerlink" title="1. collect"></a><strong>1. collect</strong></h3><p>将数据输出到本地集合</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">result.collect()</span><br></pre></td></tr></table></figure><h3 id="2-writeAsText"><a href="#2-writeAsText" class="headerlink" title="2. writeAsText"></a><strong>2. writeAsText</strong></h3><p>将数据输出到文件</p><p>Flink支持多种存储设备上的文件，包括本地文件，hdfs文件等</p><p>Flink支持多种文件的存储格式，包括text文件，CSV文件等</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 将数据写入本地文件</span><br><span class="line">result.writeAsText(&quot;/data/a&quot;, WriteMode.OVERWRITE)</span><br><span class="line"></span><br><span class="line">// 将数据写入HDFS</span><br><span class="line">result.writeAsText(&quot;hdfs://node01:9000/data/a&quot;, WriteMode.OVERWRITE)</span><br></pre></td></tr></table></figure><h1 id="DataStream"><a href="#DataStream" class="headerlink" title="DataStream"></a><strong>DataStream</strong></h1><p>和DataSet一样，DataStream也包括一系列的Transformation操作</p><h3 id="一、Source算子-1"><a href="#一、Source算子-1" class="headerlink" title="一、Source算子"></a><strong>一、Source算子</strong></h3><p>Flink可以使用 StreamExecutionEnvironment.addSource(source) 来为我们的程序添加数据来源。<br>Flink 已经提供了若干实现好了的 source functions，当然我们也可以通过实现 SourceFunction  来自定义非并行的source或者实现 ParallelSourceFunction 接口或者扩展  RichParallelSourceFunction 来自定义并行的 source。</p><p>Flink在流处理上的source和在批处理上的source基本一致。大致有4大类：</p><ul><li>基于<strong>本地集合</strong>的source（Collection-based-source）</li><li>基于<strong>文件</strong>的source（File-based-source）- 读取文本文件，即符合 TextInputFormat 规范的文件，并将其作为字符串返回</li><li>基于<strong>网络套接字</strong>的source（Socket-based-source）- 从 socket 读取。元素可以用分隔符切分。</li><li><strong>自定义</strong>的source（Custom-source）</li></ul><p>下面使用addSource将Kafka数据写入Flink为例：</p><p>如果需要外部数据源对接，可使用addSource，如将Kafka数据写入Flink， 先引入依赖：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- https://mvnrepository.com/artifact/org.apache.flink/flink-connector-kafka-0.11 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.flink&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;flink-connector-kafka-0.11_2.11&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.10.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>将Kafka数据写入Flink：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">val properties = new Properties()</span><br><span class="line">properties.setProperty(&quot;bootstrap.servers&quot;, &quot;localhost:9092&quot;)</span><br><span class="line">properties.setProperty(&quot;group.id&quot;, &quot;consumer-group&quot;)</span><br><span class="line">properties.setProperty(&quot;key.deserializer&quot;, &quot;org.apache.kafka.common.serialization.StringDeserializer&quot;)</span><br><span class="line">properties.setProperty(&quot;value.deserializer&quot;, &quot;org.apache.kafka.common.serialization.StringDeserializer&quot;)</span><br><span class="line">properties.setProperty(&quot;auto.offset.reset&quot;, &quot;latest&quot;)</span><br><span class="line"></span><br><span class="line">val source = env.addSource(new FlinkKafkaConsumer011[String](&quot;sensor&quot;, new SimpleStringSchema(), properties))</span><br></pre></td></tr></table></figure><p>基于网络套接字的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">val source = env.socketTextStream(&quot;IP&quot;, PORT)</span><br></pre></td></tr></table></figure><h3 id="二、Transform转换算子-1"><a href="#二、Transform转换算子-1" class="headerlink" title="二、Transform转换算子"></a><strong>二、Transform转换算子</strong></h3><h3 id="1-map-1"><a href="#1-map-1" class="headerlink" title="1. map"></a><strong>1. map</strong></h3><p>将DataSet中的每一个元素转换为另外一个元素</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dataStream.map &#123; x =&gt; x * 2 &#125;</span><br></pre></td></tr></table></figure><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220215093723.png"></p><h3 id="2-FlatMap"><a href="#2-FlatMap" class="headerlink" title="2. FlatMap"></a><strong>2. FlatMap</strong></h3><p>采用一个数据元并生成零个，一个或多个数据元。将句子分割为单词的flatmap函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dataStream.flatMap &#123; str =&gt; str.split(&quot; &quot;) &#125;</span><br></pre></td></tr></table></figure><h3 id="3-Filter"><a href="#3-Filter" class="headerlink" title="3. Filter"></a><strong>3. Filter</strong></h3><p>计算每个数据元的布尔函数，并保存函数返回true的数据元。过滤掉零值的过滤器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dataStream.filter &#123; _ != 0 &#125;</span><br></pre></td></tr></table></figure><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220215093751.png"></p><h3 id="4-KeyBy"><a href="#4-KeyBy" class="headerlink" title="4. KeyBy"></a><strong>4. KeyBy</strong></h3><p>逻辑上将流分区为不相交的分区。具有相同Keys的所有记录都分配给同一分区。在内部，keyBy（）是使用散列分区实现的。指定键有不同的方法。</p><p>此转换返回KeyedStream，其中包括使用被Keys化状态所需的KeyedStream。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dataStream.keyBy(0) </span><br></pre></td></tr></table></figure><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220215093914.png"></p><p><strong>注意:</strong></p><p>​        这个keyBy,你给我一个dataStream,他调用keyBy之后得到一个KeyedStream,这个KeyedStream就相当于是Spark里面的,包含键值对的RDD.说白了就是元素是二元组的那个RDD.不过在我们Flink里面,没有所谓二元组的说法.不一定说二元组就是键值对.在Flink中没有这个说法.只有在Spark RDD中才有这个说法.意思就是说:你看到一个Dstream里面的元素是二元组类型,千万别认为这就是一个键值对的Dstream.这是一个非常普通的Dstream.除非他不是Dstream,而是一个KeyedStream.所以在<strong>Flink中到底判断他是不是一个键值对的Stream,就看他类型是不是KeyedStream,跟里面的元素没有关系.</strong> </p><h3 id="5-滚动聚合算子（Rolling-Aggregation）"><a href="#5-滚动聚合算子（Rolling-Aggregation）" class="headerlink" title="5. 滚动聚合算子（Rolling Aggregation）"></a>5. 滚动聚合算子（Rolling Aggregation）</h3><p>Aggregations 是 KeyedDataStream 接口提供的聚合算子，根据指定的字段进行聚合操作，滚动地产生一系列数据聚合结果。其实是将 Reduce 算子中的函数进行了封装，封装的聚合操作有sum,min,max 等，这样就不需要用户自己定义 Reduce 函数。<br>如下代码所示，指定数据集中第一个字段作为 key，用第二个字段作为累加字段，然后滚动地对第二个字段的数值进行累加并输出。</p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220215100316.png"></p><p><strong>这些算子可以针对KeyedStream的每一个支流做聚合。</strong></p><ul><li><p> sum()</p></li><li><p> min()</p></li><li><p> max()</p></li><li><p> minBy()</p></li><li><p> maxBy()</p></li></ul><p>  <img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220215094055.png"></p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220215100711.png"></p><h3 id="6-Reduce"><a href="#6-Reduce" class="headerlink" title="6. Reduce"></a><strong>6. Reduce</strong></h3><p>被Keys化数据流上的“滚动”Reduce。将当前数据元与最后一个Reduce的值组合并发出新值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keyedStream.reduce &#123; _ + _ &#125;  </span><br></pre></td></tr></table></figure><p><strong>KeyedStream → DataStream</strong>：一个分组数据流的聚合操作，合并当前的元素和上次聚合的结果，产生一个新的值，返回的流中包含每一次聚合的结果，而不是只返回最后一次聚合的最终结果。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">val stream2 = env.readTextFile(&quot;YOUR_PATH\\sensor.txt&quot;)</span><br><span class="line">  .map( data =&gt; &#123;</span><br><span class="line">    val dataArray = data.split(&quot;,&quot;)</span><br><span class="line">    SensorReading(dataArray(0).trim, dataArray(1).trim.toLong, dataArray(2).trim.toDouble)</span><br><span class="line">  &#125;)</span><br><span class="line">  .keyBy(&quot;id&quot;)</span><br><span class="line">  .reduce( (x, y) =&gt; SensorReading(x.id, x.timestamp + 1, y.temperature) )</span><br></pre></td></tr></table></figure><h3 id="7-Fold"><a href="#7-Fold" class="headerlink" title="7. Fold"></a><strong>7. Fold</strong></h3><p>具有初始值的被Keys化数据流上的“滚动”折叠。将当前数据元与最后折叠的值组合并发出新值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">val result: DataStream[String] =  keyedStream.fold(&quot;start&quot;)((str, i) =&gt; &#123; str + &quot;-&quot; + i &#125;) </span><br><span class="line"></span><br><span class="line">// 解释：当上述代码应用于序列（1,2,3,4,5）时，输出结果“start-1”，“start-1-2”，“start-1-2-3”，...</span><br></pre></td></tr></table></figure><h3 id="8-Aggregations"><a href="#8-Aggregations" class="headerlink" title="8. Aggregations"></a><strong>8. Aggregations</strong></h3><p>在被Keys化数据流上滚动聚合。min和minBy之间的差异是min返回最小值，而minBy返回该字段中具有最小值的数据元（max和maxBy相同）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">keyedStream.sum(0);</span><br><span class="line"></span><br><span class="line">keyedStream.min(0);</span><br><span class="line"></span><br><span class="line">keyedStream.max(0);</span><br><span class="line"></span><br><span class="line">keyedStream.minBy(0);</span><br><span class="line"></span><br><span class="line">keyedStream.maxBy(0);</span><br></pre></td></tr></table></figure><h3 id="9-Window"><a href="#9-Window" class="headerlink" title="9. Window"></a><strong>9. Window</strong></h3><p>可以在已经分区的KeyedStream上定义Windows。Windows根据某些特征（例如，在最后5秒内到达的数据）对每个Keys中的数据进行分组。这里不再对窗口进行详解，有关窗口的完整说明，请查看这篇文章： <strong><a href="https://mp.weixin.qq.com/s/S-RmP5OWiGqwn-C_TZNO5A">Flink 中极其重要的 Time 与 Window 详细解析</a></strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dataStream.keyBy(0).window(TumblingEventTimeWindows.of(Time.seconds(5))); </span><br></pre></td></tr></table></figure><h3 id="10-WindowAll"><a href="#10-WindowAll" class="headerlink" title="10. WindowAll"></a><strong>10. WindowAll</strong></h3><p>Windows可以在常规DataStream上定义。Windows根据某些特征（例如，在最后5秒内到达的数据）对所有流事件进行分组。</p><p>注意：在许多情况下，这是非并行转换。所有记录将收集在windowAll 算子的一个任务中。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dataStream.windowAll(TumblingEventTimeWindows.of(Time.seconds(5)))</span><br></pre></td></tr></table></figure><h3 id="11-Window-Apply"><a href="#11-Window-Apply" class="headerlink" title="11. Window Apply"></a><strong>11. Window Apply</strong></h3><p>将一般函数应用于整个窗口。</p><p>注意：如果您正在使用windowAll转换，则需要使用AllWindowFunction。</p><p>下面是一个手动求和窗口数据元的函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">windowedStream.apply &#123; WindowFunction &#125;</span><br><span class="line"></span><br><span class="line">allWindowedStream.apply &#123; AllWindowFunction &#125;</span><br></pre></td></tr></table></figure><h3 id="12-Window-Reduce"><a href="#12-Window-Reduce" class="headerlink" title="12. Window Reduce"></a><strong>12. Window Reduce</strong></h3><p>将函数缩减函数应用于窗口并返回缩小的值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">windowedStream.reduce &#123; _ + _ &#125;</span><br></pre></td></tr></table></figure><h3 id="13-Window-Fold"><a href="#13-Window-Fold" class="headerlink" title="13. Window Fold"></a><strong>13. Window Fold</strong></h3><p>将函数折叠函数应用于窗口并返回折叠值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">val result: DataStream[String] = windowedStream.fold(&quot;start&quot;, (str, i) =&gt; &#123; str + &quot;-&quot; + i &#125;) </span><br><span class="line"></span><br><span class="line">// 上述代码应用于序列（1,2,3,4,5）时，将序列折叠为字符串“start-1-2-3-4-5”</span><br></pre></td></tr></table></figure><h3 id="14-Union-真正意义上的汇合"><a href="#14-Union-真正意义上的汇合" class="headerlink" title="14. Union(真正意义上的汇合)"></a><strong>14. Union</strong>(真正意义上的汇合)</h3><p>两个或多个数据流的联合，创建包含来自所有流的所有数据元的新流。注意：如果将数据流与自身联合，则会在结果流中获取两次数据元</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dataStream.union(otherStream1, otherStream2, ...)</span><br></pre></td></tr></table></figure><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220215094828.png"></p><p><strong>DataStream → DataStream</strong>：对两个或者两个以上的DataStream进行union操作，产生一个包含所有DataStream元素的新DataStream。</p><h4 id="Connect与-Union-区别："><a href="#Connect与-Union-区别：" class="headerlink" title="Connect与 Union 区别："></a>Connect与 Union 区别：</h4><p>  1． Union之前两个流的类型必须是一样，Connect可以不一样，在之后的coMap中再去调整成为一样的。</p><ol start="2"><li>  Connect只能操作两个流，Union可以操作多个。</li></ol><h3 id="15-Window-Join"><a href="#15-Window-Join" class="headerlink" title="15. Window Join"></a><strong>15. Window Join</strong></h3><p>在给定Keys和公共窗口上连接两个数据流</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dataStream.join(otherStream)</span><br><span class="line">    .where(&lt;key selector&gt;).equalTo(&lt;key selector&gt;)</span><br><span class="line">    .window(TumblingEventTimeWindows.of(Time.seconds(3)))</span><br><span class="line">    .apply (new JoinFunction () &#123;...&#125;)</span><br></pre></td></tr></table></figure><h3 id="16-Interval-Join"><a href="#16-Interval-Join" class="headerlink" title="16. Interval Join"></a><strong>16. Interval Join</strong></h3><p>在给定的时间间隔内使用公共Keys关联两个被Key化的数据流的两个数据元e1和e2，以便e1.timestamp + lowerBound &lt;= e2.timestamp &lt;= e1.timestamp + upperBound</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">am.intervalJoin(otherKeyedStream)</span><br><span class="line">    .between(Time.milliseconds(-2), Time.milliseconds(2)) </span><br><span class="line">    .upperBoundExclusive(true) </span><br><span class="line">    .lowerBoundExclusive(true) </span><br><span class="line">    .process(new IntervalJoinFunction() &#123;...&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220214232600.png"></p><p><strong>案例代码:</strong></p><p><a href="https://github.com/ShangBaiShuYao/flink-learning-from-zhisheng/blob/main/Flink-shangbaishuyao-RTDW-gmall-realtime/src/main/java/com/shangbaishuyao/gmall/realtime/app/DWM/OrderWideApp.java">https://github.com/ShangBaiShuYao/flink-learning-from-zhisheng/blob/main/Flink-shangbaishuyao-RTDW-gmall-realtime/src/main/java/com/shangbaishuyao/gmall/realtime/app/DWM/OrderWideApp.java</a></p><h3 id="17-Window-CoGroup"><a href="#17-Window-CoGroup" class="headerlink" title="17. Window CoGroup"></a><strong>17. Window CoGroup</strong></h3><p>在给定Keys和公共窗口上对两个数据流进行Cogroup</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dataStream.coGroup(otherStream)</span><br><span class="line">    .where(0).equalTo(1)</span><br><span class="line">    .window(TumblingEventTimeWindows.of(Time.seconds(3)))</span><br><span class="line">    .apply (new CoGroupFunction () &#123;...&#125;)</span><br></pre></td></tr></table></figure><h3 id="18-Connect"><a href="#18-Connect" class="headerlink" title="18. Connect"></a><strong>18. Connect</strong></h3><p>“连接”两个保存其类型的数据流。连接允许两个流之间的共享状态</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DataStream&lt;Integer&gt; someStream = ... DataStream&lt;String&gt; otherStream = ... ConnectedStreams&lt;Integer, String&gt; connectedStreams = someStream.connect(otherStream)</span><br><span class="line"></span><br><span class="line">// ... 代表省略中间操作</span><br></pre></td></tr></table></figure><h3 id="19-CoMap，CoFlatMap"><a href="#19-CoMap，CoFlatMap" class="headerlink" title="19. CoMap，CoFlatMap"></a><strong>19. CoMap，CoFlatMap</strong></h3><p>Connect做连接的,把两个流连在一起.也可以理解为做回合,把两个流汇合在一起.</p><p>Connect把两个流汇合在一起有条件吗?stream1是整形,stream2是字符串的这样的两个流可以汇合在一起吗?他是可以的.他不管你两个流是否类型一致.他都可以汇合在一起.connect会和其实和上面的splitStream一样,都没有被真正的汇合或切分.</p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220215095927.png"></p><p>类似于连接数据流上的map和flatMap</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">connectedStreams.map(</span><br><span class="line">    (_ : Int) =&gt; true,</span><br><span class="line">    (_ : String) =&gt; false)connectedStreams.flatMap(</span><br><span class="line">    (_ : Int) =&gt; true,</span><br><span class="line">    (_ : String) =&gt; false)</span><br></pre></td></tr></table></figure><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220215094623.png"></p><p><strong>DataStream,DataStream → ConnectedStreams</strong>：连接两个保持他们类型的数据流，两个数据流被Connect之后，只是被放在了一个同一个流中，内部依然保持各自的数据和形式不发生任何变化，两个流相互独立。</p><p> <strong>CoMap,CoFlatMap</strong><br><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220215094718.png"></p><p>从这张图可以看出,他只有调用map或者FlatMap才真正将两个流汇合起来的.<br>为什么要执行map或者FlatMap呢?因为执行map算子或者flatmap算子之后他就可以在map算子或者FlatMap算子中把这两个流分别做处理.分别处理成同样类型的这时返回得到一个新的对象,他就不会出现两个流了,他就变成一个流了.</p><p><strong>ConnectedStreams → DataStream</strong>：作用于ConnectedStreams上，功能与map和flatMap一样，对ConnectedStreams中的每一个Stream分别进行map和flatMap处理。</p><h3 id="20-Split-不是真正意义上切分流-只是打了标记"><a href="#20-Split-不是真正意义上切分流-只是打了标记" class="headerlink" title="20. Split(不是真正意义上切分流,只是打了标记)"></a><strong>20. Split(不是真正意义上切分流,只是打了标记)</strong></h3><p>根据某些标准将流拆分为两个或更多个流</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">val split = someDataStream.split(</span><br><span class="line">  (num: Int) =&gt;</span><br><span class="line">    (num % 2) match &#123;</span><br><span class="line">      case 0 =&gt; List(&quot;even&quot;)</span><br><span class="line">      case 1 =&gt; List(&quot;odd&quot;)</span><br><span class="line">    &#125;)      </span><br></pre></td></tr></table></figure><h3 id="21-Select-真正意义上的切分流"><a href="#21-Select-真正意义上的切分流" class="headerlink" title="21. Select(真正意义上的切分流)"></a><strong>21. Select(真正意义上的切分流)</strong></h3><p>从拆分流中选择一个或多个流</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SplitStream&lt;Integer&gt; split;DataStream&lt;Integer&gt; even = split.select(&quot;even&quot;);DataStream&lt;Integer&gt; odd = split.select(&quot;odd&quot;);DataStream&lt;Integer&gt; all = split.select(&quot;even&quot;,&quot;odd&quot;)</span><br></pre></td></tr></table></figure><h4 id="Split-和-Select"><a href="#Split-和-Select" class="headerlink" title="Split 和 Select:"></a>Split 和 Select:</h4><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220215095211.png"></p><p><strong>DataStream → SplitStream</strong>：根据某些特征把一个DataStream拆分成两个或者多个DataStream。</p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220215095246.png"></p><p><strong>SplitStream→DataStream</strong>：从一个SplitStream中获取一个或者多个DataStream。</p><p>需求：传感器数据按照温度高低（以30度为界），拆分成两个流。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">val splitStream = stream2</span><br><span class="line">  .split( sensorData =&gt; &#123;</span><br><span class="line">    if (sensorData.temperature &gt; 30) Seq(&quot;high&quot;) else Seq(&quot;low&quot;)</span><br><span class="line">  &#125; )</span><br><span class="line"></span><br><span class="line">val high = splitStream.select(&quot;high&quot;)</span><br><span class="line">val low = splitStream.select(&quot;low&quot;)</span><br><span class="line">val all = splitStream.select(&quot;high&quot;, &quot;low&quot;)</span><br></pre></td></tr></table></figure><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220215095354.png"></p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220215095336.png"></p><h3 id="三、Sink算子-1"><a href="#三、Sink算子-1" class="headerlink" title="三、Sink算子"></a><strong>三、Sink算子</strong></h3><p>支持将数据输出到：</p><ul><li>本地文件(参考批处理)</li><li>本地集合(参考批处理)</li><li>HDFS(参考批处理)</li></ul><p>除此之外，还支持：</p><ul><li>sink到kafka</li><li>sink到mysql</li><li>sink到redis</li></ul><p>下面以sink到kafka为例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">val sinkTopic = &quot;test&quot;</span><br><span class="line"></span><br><span class="line">//样例类</span><br><span class="line">case class Student(id: Int, name: String, addr: String, sex: String)</span><br><span class="line">val mapper: ObjectMapper = new ObjectMapper()</span><br><span class="line"></span><br><span class="line">//将对象转换成字符串</span><br><span class="line">def toJsonString(T: Object): String = &#123;</span><br><span class="line">    mapper.registerModule(DefaultScalaModule)</span><br><span class="line">    mapper.writeValueAsString(T)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">def main(args: Array[String]): Unit = &#123;</span><br><span class="line">    //1.创建流执行环境</span><br><span class="line">    val env = StreamExecutionEnvironment.getExecutionEnvironment</span><br><span class="line">    //2.准备数据</span><br><span class="line">    val dataStream: DataStream[Student] = env.fromElements(</span><br><span class="line">      Student(8, &quot;xiaoming&quot;, &quot;beijing biejing&quot;, &quot;female&quot;)</span><br><span class="line">    )</span><br><span class="line">    //将student转换成字符串</span><br><span class="line">    val studentStream: DataStream[String] = dataStream.map(student =&gt;</span><br><span class="line">      toJsonString(student) // 这里需要显示SerializerFeature中的某一个，否则会报同时匹配两个方法的错误</span><br><span class="line">    )</span><br><span class="line">    //studentStream.print()</span><br><span class="line">    val prop = new Properties()</span><br><span class="line">    prop.setProperty(&quot;bootstrap.servers&quot;, &quot;node01:9092&quot;)</span><br><span class="line"></span><br><span class="line">    val myProducer = new FlinkKafkaProducer011[String](sinkTopic, new KeyedSerializationSchemaWrapper[String](new SimpleStringSchema()), prop)</span><br><span class="line">    studentStream.addSink(myProducer)</span><br><span class="line">    studentStream.print()</span><br><span class="line">    env.execute(&quot;Flink add sink&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>知识源于积累,登峰造极源于自律!</p><p>好文章就得收藏慢慢品, 文章转载于:<a href="https://zhuanlan.zhihu.com/p/356616078">https://zhuanlan.zhihu.com/p/356616078</a> 在此基础上做的CRUD.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220215092137.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;Flink和Spark类似，也是一种一站式处理的框架；既可以进行批处理（DataSet），也可以进行实时处理（DataStream）。&lt;/p&gt;
&lt;p&gt;所以下面将Flink的算子分为两大类：一类是DataSet，一类是DataStream。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Flink官网:&lt;/strong&gt; &lt;a href=&quot;https://nightlies.apache.org/flink/flink-docs-release-1.14/zh/docs/dev/datastream/operators/overview/&quot;&gt;https://nightlies.apache.org/flink/flink-docs-release-1.14/zh/docs/dev/datastream/operators/overview/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;案例代码:&lt;/strong&gt; &lt;a href=&quot;https://github.com/ShangBaiShuYao/flink-learning-from-zhisheng/tree/main/flink-1.12.0-Demo/src/main/java/com/shangbaishuyao/demo&quot;&gt;https://github.com/ShangBaiShuYao/flink-learning-from-zhisheng/tree/main/flink-1.12.0-Demo/src/main/java/com/shangbaishuyao/demo&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="大数据" scheme="http://xubatian.cn/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
    <category term="Flink" scheme="http://xubatian.cn/tags/Flink/"/>
    
  </entry>
  
  <entry>
    <title>Flink 原理与实现: Flink实现UDF函数——更细粒度的控制流</title>
    <link href="http://xubatian.cn/Flink-%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E7%8E%B0-Flink%E5%AE%9E%E7%8E%B0UDF%E5%87%BD%E6%95%B0%E2%80%94%E2%80%94%E6%9B%B4%E7%BB%86%E7%B2%92%E5%BA%A6%E7%9A%84%E6%8E%A7%E5%88%B6%E6%B5%81/"/>
    <id>http://xubatian.cn/Flink-%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E7%8E%B0-Flink%E5%AE%9E%E7%8E%B0UDF%E5%87%BD%E6%95%B0%E2%80%94%E2%80%94%E6%9B%B4%E7%BB%86%E7%B2%92%E5%BA%A6%E7%9A%84%E6%8E%A7%E5%88%B6%E6%B5%81/</id>
    <published>2022-02-15T00:58:42.000Z</published>
    <updated>2022-02-15T01:16:29.101Z</updated>
    
    <content type="html"><![CDATA[<p>Flink的一个优势,是其他计算引擎所做不到的.或者说能做到,但是代码特别麻烦,我们的Flink中每一个算子,他都给你提供了一个函数对象作为参数</p><p><strong>好记心烂笔头</strong>:</p><p>为什么我们不用匿名函数(lambda function)去写Flink代码呢?</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">因为Flink中花括号里面的代码都是运行在slot中的,但是那么多slot,每个slot里面都可能执行,那数据库就被搞死了.所以我们就不用匿名函数的方式写代码了.而是使用函数类的方式.</span><br></pre></td></tr></table></figure><span id="more"></span><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220215090044.png"></p><h1 id="函数类（Function-Classes）"><a href="#函数类（Function-Classes）" class="headerlink" title="函数类（Function Classes）"></a>函数类（Function Classes）</h1><p>Flink暴露了所有<strong>udf函数的接口</strong>(实现方式为接口或者抽象类)。例如MapFunction做转换的, FilterFunction做过滤的, ProcessFunction不知道做转换,做过滤还是做其他的,<strong>但是我肯定要处理数据,则使用processFunction,他是没有限制的,你想做什么你就在这里面写什么就好了</strong>等等。</p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220215090143.png"></p><p>下面例子实现了FilterFunction接口：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">class FilterFilter extends FilterFunction[String] &#123;</span><br><span class="line">      override def filter(value: String): Boolean = &#123;</span><br><span class="line">        value.contains(&quot;flink&quot;)</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line">val flinkTweets = tweets.filter(new FlinkFilter)</span><br></pre></td></tr></table></figure><p>还可以将函数实现成匿名类</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">val flinkTweets = tweets.filter(</span><br><span class="line">new RichFilterFunction[String] &#123;</span><br><span class="line">override def filter(value: String): Boolean = &#123;</span><br><span class="line">value.contains(&quot;flink&quot;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>我们filter的字符串”flink”还可以当作参数传进去。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">val tweets: DataStream[String] = ...</span><br><span class="line">val flinkTweets = tweets.filter(new KeywordFilter(&quot;flink&quot;))</span><br><span class="line"></span><br><span class="line">class KeywordFilter(keyWord: String) extends FilterFunction[String] &#123;</span><br><span class="line">override def filter(value: String): Boolean = &#123;</span><br><span class="line">value.contains(keyWord)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="匿名函数（Lambda-Functions）"><a href="#匿名函数（Lambda-Functions）" class="headerlink" title="匿名函数（Lambda Functions）"></a>匿名函数（Lambda Functions）</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">val tweets: DataStream[String] = ...</span><br><span class="line">val flinkTweets = tweets.filter(_.contains(&quot;flink&quot;))</span><br></pre></td></tr></table></figure><h1 id="富函数（Rich-Functions"><a href="#富函数（Rich-Functions" class="headerlink" title="富函数（Rich Functions)"></a>富函数（Rich Functions)</h1><p><strong>富函数和函数类是一样的,不过他有一个特点.他增加了生命周期的管理.什么叫生命周期?就是    XXXFunction()什么时候初始化.什么时候销毁.什么时候执行你们的代码等就是所谓的生命周期的管理.XXXFunction()本身是没有生命周期的管理的.如果你需要增加生命周期的管理,你需要继承RichMapFunction()</strong></p><p>“富函数”是DataStream API提供的一个函数类的接口，所有Flink函数类都有其Rich版本。它与常规函数的不同在于，可以获取运行环境的上下文，并拥有一些生命周期方法，所以可以实现更复杂的功能。</p><ul><li> RichMapFunction</li><li> RichFlatMapFunction</li><li> RichFilterFunction</li><li> …</li></ul><p>Rich Function有一个生命周期的概念。典型的生命周期方法有：</p><ul><li> open()方法是rich function的初始化方法，当一个算子例如map或者filter被调用之前open()会被调用。</li><li> close()方法是生命周期中的最后一个调用的方法，做一些清理工作。</li><li> getRuntimeContext()方法提供了函数的RuntimeContext的一些信息，例如函数执行的并行度，任务的名字，以及state状态</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">class MyFlatMap extends RichFlatMapFunction[Int, (Int, Int)] &#123;</span><br><span class="line">var subTaskIndex = 0</span><br><span class="line"></span><br><span class="line">override def open(configuration: Configuration): Unit = &#123;</span><br><span class="line">subTaskIndex = getRuntimeContext.getIndexOfThisSubtask</span><br><span class="line">// 以下可以做一些初始化工作，例如建立一个和HDFS的连接</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">override def flatMap(in: Int, out: Collector[(Int, Int)]): Unit = &#123;</span><br><span class="line">if (in % 2 == subTaskIndex) &#123;</span><br><span class="line">out.collect((subTaskIndex, in))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">override def close(): Unit = &#123;</span><br><span class="line">// 以下做一些清理工作，例如断开和HDFS的连接。</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="案例代码"><a href="#案例代码" class="headerlink" title="案例代码"></a>案例代码</h1><p><a href="https://github.com/ShangBaiShuYao/flink-learning-from-zhisheng/blob/main/flink-from-shangbaishuyao-wordCount/src/main/scala/com/shangbaishuyao/processFunction/">https://github.com/ShangBaiShuYao/flink-learning-from-zhisheng/blob/main/flink-from-shangbaishuyao-wordCount/src/main/scala/com/shangbaishuyao/processFunction/</a></p><p><a href="https://github.com/ShangBaiShuYao/flink-learning-from-zhisheng/blob/main/flink-1.12.0-Demo/src/main/java/com/shangbaishuyao/demo/FlinkDemo03/Flink04_Transform_Reduce.java">https://github.com/ShangBaiShuYao/flink-learning-from-zhisheng/blob/main/flink-1.12.0-Demo/src/main/java/com/shangbaishuyao/demo/FlinkDemo03/Flink04_Transform_Reduce.java</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Flink的一个优势,是其他计算引擎所做不到的.或者说能做到,但是代码特别麻烦,我们的Flink中每一个算子,他都给你提供了一个函数对象作为参数&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;好记心烂笔头&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;为什么我们不用匿名函数(lambda function)去写Flink代码呢?&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;因为Flink中花括号里面的代码都是运行在slot中的,但是那么多slot,每个slot里面都可能执行,那数据库就被搞死了.所以我们就不用匿名函数的方式写代码了.而是使用函数类的方式.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="大数据" scheme="http://xubatian.cn/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
    <category term="Flink" scheme="http://xubatian.cn/tags/Flink/"/>
    
  </entry>
  
  <entry>
    <title>Flink 原理与实现: Flink CEP复杂事件处理</title>
    <link href="http://xubatian.cn/Flink-%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E7%8E%B0-Flink-CEP%E5%A4%8D%E6%9D%82%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86/"/>
    <id>http://xubatian.cn/Flink-%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E7%8E%B0-Flink-CEP%E5%A4%8D%E6%9D%82%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86/</id>
    <published>2022-02-14T14:52:35.000Z</published>
    <updated>2022-02-14T15:31:08.053Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Flink-CEP-代码案例"><a href="#Flink-CEP-代码案例" class="headerlink" title="Flink CEP 代码案例"></a>Flink CEP 代码案例</h1><p>登录告警系统:  一堆的登录日志从，匹配一个恶意登录的模式（如果一个用户连续失败三次，则是恶意登录），从而找到哪些用户名是用于恶意 登录</p><p><a href="https://github.com/ShangBaiShuYao/flink-learning-from-zhisheng/blob/main/flink-from-shangbaishuyao-wordCount/src/main/scala/com/shangbaishuyao/cep/TestCepDemo.scala">https://github.com/ShangBaiShuYao/flink-learning-from-zhisheng/blob/main/flink-from-shangbaishuyao-wordCount/src/main/scala/com/shangbaishuyao/cep/TestCepDemo.scala</a></p><p>登录失败CEP模型:</p><p><a href="https://github.com/ShangBaiShuYao/flink-learning-from-zhisheng/blob/main/flink-1.12.0-Demo/src/main/java/com/shangbaishuyao/demo/FlinkDemo09/Flink03_Practice_LoginFailWithCEP.java">https://github.com/ShangBaiShuYao/flink-learning-from-zhisheng/blob/main/flink-1.12.0-Demo/src/main/java/com/shangbaishuyao/demo/FlinkDemo09/Flink03_Practice_LoginFailWithCEP.java</a></p><p>支付失败CEP模型:</p><p><a href="https://github.com/ShangBaiShuYao/flink-learning-from-zhisheng/blob/main/flink-1.12.0-Demo/src/main/java/com/shangbaishuyao/demo/FlinkDemo09/Flink04_Practice_OrderPayWithCEP.java">https://github.com/ShangBaiShuYao/flink-learning-from-zhisheng/blob/main/flink-1.12.0-Demo/src/main/java/com/shangbaishuyao/demo/FlinkDemo09/Flink04_Practice_OrderPayWithCEP.java</a></p><span id="more"></span><h1 id="什么是复杂事件处理CEP"><a href="#什么是复杂事件处理CEP" class="headerlink" title="什么是复杂事件处理CEP"></a>什么是复杂事件处理CEP</h1><p>​        CEP是做复杂事件处理的.如果你碰到一个业务需求非常之复杂,而且他的条件也是非常复杂的.比如说处理某一个,符合某一个条件,做什么事情.这个条件是非常复杂的.那么处理复杂的事件,Flink专门有一套API.这套API的名字叫CEP. 而spark是没有CEP的.</p><p>​    一个或多个由简单事件构成的事件流通过一定的规则匹配，然后输出用户想得到的数据，满足规则的复杂事件。</p><p>​    特征：</p><p>​        Ø 目标：从有序的简单事件流中发现一些高阶特征(无序的就得加延时操作)</p><p>​        Ø 输入：一个或多个由简单事件构成的事件流</p><p>​        Ø 处理：识别简单事件之间的内在联系，多个符合一定规则的简单事件构成复杂事件</p><p>​        Ø 输出：满足规则的复杂事件</p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220214225403.png"></p><p>​        如上图所示: 如果一个用户短时间内频繁登录失败，就有可能是出现了程序的恶意攻击，比如密码暴力破解。因此我们考虑，应该对用户的登录失败动作进行统计，具体来说，如果同一用户（可以是不同IP）在2秒之内连续两次登录失败，就认为存在恶意登录的风险，输出相关的信息进行报警提示。</p><p>这个恶意登录监控有两种解决办法. 一.状态编程. 二.CEP编程.  </p><p>​        比如同一个用户(可以是不同ip)在2秒内连续2次登录失败,我们就触发报警.打一个告警信息. 我们可以引入一个listState. 将上一次用户登录的数据放到这个列表中. 后面还出现相同数据,继续放到列表中. 列表的长度等于2了或者大于2了. 就开始发出一个告警. 不过用状态编程会有问题. 会造成内存的容量的增加.还可能造成一些精准的业务无法做到. 比如说我不要连续两秒内两次登录了. 改成两秒内连续5次登录失败.才将这样的用户找出来. 这种需求改起来特别复杂.因为中间很有可能穿插一些其他东西. 如上图: 比如我要删选长方形和紧跟着圆形的数据. 后来需求改成长方形后面有圆形的数据了. 这两个之间很可能穿插了一些其他的三角形的一些东西. 那这些穿插的需不需要考虑放到listState中去. 而且还要考虑,这个时间是否到达5秒. 所以用状态编程不适合做恶意登录风险.所以当前业务我们应该使用Flink的CEP的库来做.</p><p>​        CEP用于分析低延迟、频繁产生的不同来源的事件流。CEP可以帮助在复杂的、不相关的事件流中找出有意义的模式和复杂的关系，以接近实时或准实时的获得通知并阻止一些行为。</p><p>​        CEP支持在流上进行模式匹配，根据模式的条件不同，分为连续的条件或不连续的条件；模式的条件允许有时间的限制，当在条件范围内没有达到满足的条件时，会导致模式匹配超时。</p><p>看起来很简单，但是它有很多不同的功能：</p><p>​        Ø 输入的流数据，尽快产生结果</p><p>​        Ø 在2个event流上，基于时间进行聚合类的计算</p><p>​        Ø 提供实时/准实时的警告和通知</p><p>​        Ø 在多样的数据源中产生关联并分析模式</p><p>​        Ø 高吞吐、低延迟的处理</p><p>市场上有多种CEP的解决方案，例如Spark、Samza、Beam等，但他们都没有提供专门的library支持。但是Flink提供了专门的CEP library。</p><h1 id="Flink-CEP"><a href="#Flink-CEP" class="headerlink" title="Flink CEP"></a>Flink CEP</h1><p>Flink为CEP提供了专门的Flink CEP library，它包含如下组件：</p><p>FlinkCEP的步骤就四个. 一是准备好数据.该分组分组.改设置waterMark的设置Watermark.该过滤过滤. 因为CEP本质上就是一个窗口函数.它里面封装了开窗.因为一般情况下,我们会设置在某一个时间内满足这个条件的.如果说没有时间限制的话.那这个符合这个规则的数据找到一堆. 或者找不到. 比如找到一本矩形开头的,但是后面数据源源不断的来.因为他是一个无线的流.所以会造成他匹配不成功.所以一般来说我们一定要限制一个时间范围.当你限制一个时间范围的话,实际上就是开窗了.所以前面你要定义时间语义,定义是否有水位线之类的.</p><p>第二个就是定义我们的模式. 即定义我们的pattern. 定义好了之后,我们的pattern会帮我们检测.模式就是我们的规则. 检测实际上会出现两种情况.一种情况符合这个规则. 还有种情况是不符合这个规则.其实就是一种匹配成功了.一种没有匹配成功. 但是一般情况下我们只是处理匹配成功的. 匹配成功的数据怎么拿出来呢? 就是生成Alert.  这里检测的时候为什么要说能够帮我检测根据规则去匹配成功的,也可以匹配哪些不成功的呢?因为我们以后可能遇到一些用排除法做模式匹配. 如果不用排除法发现一些业务太复杂了,我们不好加一些条件去设置规则. 到时候发现这个业务可以用排除法的话.而且反证的条件是容易定义的.那我就把反证的模式定义好.定义好之后我只需要找那些没有匹配上的.没有匹配上的就是我所需要的.</p><p>​        Ø Event Stream</p><p>​        Ø pattern定义</p><p>​        Ø pattern检测</p><p>​        Ø 生成Alert</p><p><strong>Flink CEP 四步骤:</strong></p><p>定义模式,只要匹配订单在创建之后15分钟内有支付的事件.单一模式</p><p>模式检测</p><p>生产Alter. 找到所有的在15分钟内支付的订单事件, 并且还要找到没有支付的订单事件</p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220214225700.png"></p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220214231635.png"></p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220214231644.png"></p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220214231739.png"></p><p>notFollowedBy的意思就是不想让某一个是事件在两个事件之间发生.</p><p>因为notFollowedBy()绝对不可能放在最后面. 他只会放在两个个体模式之间. 既然是在两个个体模式的意思.就意味着表示在两个个体不同的事件之间不出现一个什么样的事件. 所以称之为叫不想要某个事件在两个事件之间发生.这个模式也是可以指定时间的. 用within里面指定时间.</p><p>超时事件的提取: 就是提取匹配的反的模式</p><p>超时事件的提取. 假设我有一个窗口里面有许多数据, 我要匹配 :</p><p>矩形 followBy 圆形 的.  我只要是矩形开头圆形结尾就可以匹配到.</p><p>但是有这么一种情况就是: 我在窗口最后位置有一个矩形,后面就没数据了.  就是在这个5分钟窗口内找不到矩形开头后面紧跟着圆圈的了.像这样的一个数据事件我们也可以在后面选取的时候将他选着出来.所以他有两种事件的选取. 一种是匹配事件的选取. 一种是超时事件的提取. 超时事件提取的话,会用到另外一个函数类叫patternTimeOutFunction</p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220214232124.png"></p><p>首先，开发人员要在DataStream流上定义出模式条件，之后Flink CEP引擎进行模式检测，必要时生成告警。</p><p>为了使用Flink CEP，我们需要导入依赖：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;org.apache.flink&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;flink-cep_$&#123;scala.binary.version&#125;&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;$&#123;flink.version&#125;&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h2 id="Event-Streams"><a href="#Event-Streams" class="headerlink" title="Event Streams"></a><strong>Event Streams</strong></h2><p>以登陆事件流为例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">case class LoginEvent(userId: String, ip: String, eventType: String, eventTime: String)</span><br><span class="line"></span><br><span class="line">val env = StreamExecutionEnvironment.getExecutionEnvironment</span><br><span class="line">env.setStreamTimeCharacteristic(TimeCharacteristic.EventTime)</span><br><span class="line">env.setParallelism(1)</span><br><span class="line"></span><br><span class="line">val loginEventStream = env.fromCollection(List(</span><br><span class="line">  LoginEvent(&quot;1&quot;, &quot;192.168.0.1&quot;, &quot;fail&quot;, &quot;1558430842&quot;),</span><br><span class="line">  LoginEvent(&quot;1&quot;, &quot;192.168.0.2&quot;, &quot;fail&quot;, &quot;1558430843&quot;),</span><br><span class="line">  LoginEvent(&quot;1&quot;, &quot;192.168.0.3&quot;, &quot;fail&quot;, &quot;1558430844&quot;),</span><br><span class="line">  LoginEvent(&quot;2&quot;, &quot;192.168.10.10&quot;, &quot;success&quot;, &quot;1558430845&quot;)</span><br><span class="line">)).assignAscendingTimestamps(_.eventTime.toLong)</span><br></pre></td></tr></table></figure><h2 id="Pattern-API"><a href="#Pattern-API" class="headerlink" title="Pattern API"></a><strong>Pattern API</strong></h2><p>每个Pattern都应该包含几个步骤，或者叫做state。从一个state到另一个state，通常我们需要定义一些条件，例如下列的代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">val loginFailPattern = Pattern.begin[LoginEvent](&quot;begin&quot;)</span><br><span class="line">  .where(_.eventType.equals(&quot;fail&quot;))</span><br><span class="line">  .next(&quot;next&quot;)</span><br><span class="line">  .where(_.eventType.equals(&quot;fail&quot;))</span><br><span class="line">  .within(Time.seconds(10)</span><br></pre></td></tr></table></figure><p>每个state都应该有一个标示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">例如 .begin[LoginEvent](&quot;begin&quot;)中的&quot;begin&quot;</span><br></pre></td></tr></table></figure><p>每个state都需要有一个唯一的名字，而且需要一个filter来过滤条件，这个过滤条件定义事件需要符合的条件，例如: </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.where(_.eventType.equals(&quot;fail&quot;))</span><br></pre></td></tr></table></figure><p>我们也可以通过subtype来限制event的子类型:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">start.subtype(SubEvent.class).where(...);</span><br></pre></td></tr></table></figure><p>事实上，你可以多次调用subtype和where方法；而且如果where条件是不相关的，你可以通过or来指定一个单独的filter函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pattern.where(...).or(...);</span><br></pre></td></tr></table></figure><p>之后，我们可以在此条件基础上，通过next或者followedBy方法切换到下一个state，next的意思是说上一步符合条件的元素之后紧挨着的元素；而followedBy并不要求一定是挨着的元素。这两者分别称为严格近邻和非严格近邻。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">val strictNext = start.next(&quot;middle&quot;)</span><br><span class="line">val nonStrictNext = start.followedBy(&quot;middle&quot;)</span><br></pre></td></tr></table></figure><p>最后，我们可以将所有的Pattern的条件限定在一定的时间范围内：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">next.within(Time.seconds(10))</span><br></pre></td></tr></table></figure><p>这个时间可以是Processing Time，也可以是Event Time。</p><h2 id="Pattern-检测"><a href="#Pattern-检测" class="headerlink" title="Pattern 检测"></a><strong>Pattern 检测</strong></h2><p>通过一个input DataStream以及刚刚我们定义的Pattern，我们可以创建一个PatternStream：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">val input = ...</span><br><span class="line">val pattern = ...</span><br><span class="line"></span><br><span class="line">val patternStream = CEP.pattern(input, pattern)</span><br><span class="line">val patternStream = CEP.pattern(loginEventStream.keyBy(_.userId), loginFailPattern)</span><br></pre></td></tr></table></figure><p>一旦获得PatternStream，我们就可以通过select或flatSelect，从一个Map序列找到我们需要的警告信息。</p><h2 id="select"><a href="#select" class="headerlink" title="select"></a><strong>select</strong></h2><p>select方法需要实现一个PatternSelectFunction，通过select方法来输出需要的警告。它接受一个Map对，包含string/event，其中key为state的名字，event则为真实的Event。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">val loginFailDataStream = patternStream</span><br><span class="line">  .select((pattern: Map[String, Iterable[LoginEvent]]) =&gt; &#123;</span><br><span class="line">    val first = pattern.getOrElse(&quot;begin&quot;, null).iterator.next()</span><br><span class="line">    val second = pattern.getOrElse(&quot;next&quot;, null).iterator.next()</span><br><span class="line"></span><br><span class="line">    Warning(first.userId, first.eventTime, second.eventTime, &quot;warning&quot;)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>其返回值仅为1条记录。</p><h2 id="flatSelect"><a href="#flatSelect" class="headerlink" title="flatSelect"></a><strong>flatSelect</strong></h2><p>通过实现PatternFlatSelectFunction，实现与select相似的功能。唯一的区别就是flatSelect方法可以返回多条记录，它通过一个Collector[OUT]类型的参数来将要输出的数据传递到下游。</p><h2 id="超时事件的处理"><a href="#超时事件的处理" class="headerlink" title="超时事件的处理"></a><strong>超时事件的处理</strong></h2><p>通过within方法，我们的parttern规则将匹配的事件限定在一定的窗口范围内。当有超过窗口时间之后到达的event，我们可以通过在select或flatSelect中，实现PatternTimeoutFunction和PatternFlatTimeoutFunction来处理这种情况。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">val patternStream: PatternStream[Event] = CEP.pattern(input, pattern)</span><br><span class="line"></span><br><span class="line">val outputTag = OutputTag[String](&quot;side-output&quot;)</span><br><span class="line"></span><br><span class="line">val result: SingleOutputStreamOperator[ComplexEvent] = patternStream.select(outputTag)&#123;</span><br><span class="line">    (pattern: Map[String, Iterable[Event]], timestamp: Long) =&gt; TimeoutEvent()</span><br><span class="line">&#125; &#123;</span><br><span class="line">    pattern: Map[String, Iterable[Event]] =&gt; ComplexEvent()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">val timeoutResult: DataStream&lt;TimeoutEvent&gt; = result.getSideOutput(outputTag)</span><br></pre></td></tr></table></figure><h1 id="附录-Flink的双流join"><a href="#附录-Flink的双流join" class="headerlink" title="附录:Flink的双流join"></a>附录:Flink的双流join</h1><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220214232600.png"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Flink-CEP-代码案例&quot;&gt;&lt;a href=&quot;#Flink-CEP-代码案例&quot; class=&quot;headerlink&quot; title=&quot;Flink CEP 代码案例&quot;&gt;&lt;/a&gt;Flink CEP 代码案例&lt;/h1&gt;&lt;p&gt;登录告警系统:  一堆的登录日志从，匹配一个恶意登录的模式（如果一个用户连续失败三次，则是恶意登录），从而找到哪些用户名是用于恶意 登录&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/ShangBaiShuYao/flink-learning-from-zhisheng/blob/main/flink-from-shangbaishuyao-wordCount/src/main/scala/com/shangbaishuyao/cep/TestCepDemo.scala&quot;&gt;https://github.com/ShangBaiShuYao/flink-learning-from-zhisheng/blob/main/flink-from-shangbaishuyao-wordCount/src/main/scala/com/shangbaishuyao/cep/TestCepDemo.scala&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;登录失败CEP模型:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/ShangBaiShuYao/flink-learning-from-zhisheng/blob/main/flink-1.12.0-Demo/src/main/java/com/shangbaishuyao/demo/FlinkDemo09/Flink03_Practice_LoginFailWithCEP.java&quot;&gt;https://github.com/ShangBaiShuYao/flink-learning-from-zhisheng/blob/main/flink-1.12.0-Demo/src/main/java/com/shangbaishuyao/demo/FlinkDemo09/Flink03_Practice_LoginFailWithCEP.java&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;支付失败CEP模型:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/ShangBaiShuYao/flink-learning-from-zhisheng/blob/main/flink-1.12.0-Demo/src/main/java/com/shangbaishuyao/demo/FlinkDemo09/Flink04_Practice_OrderPayWithCEP.java&quot;&gt;https://github.com/ShangBaiShuYao/flink-learning-from-zhisheng/blob/main/flink-1.12.0-Demo/src/main/java/com/shangbaishuyao/demo/FlinkDemo09/Flink04_Practice_OrderPayWithCEP.java&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="大数据" scheme="http://xubatian.cn/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
    <category term="Flink" scheme="http://xubatian.cn/tags/Flink/"/>
    
  </entry>
  
  <entry>
    <title>Flink 原理与实现: FlinkSQL的Table API 与SQL之函数（Functions）</title>
    <link href="http://xubatian.cn/Flink-%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E7%8E%B0-FlinkSQL%E7%9A%84Table-API-%E4%B8%8ESQL%E4%B9%8B%E5%87%BD%E6%95%B0%EF%BC%88Functions%EF%BC%89/"/>
    <id>http://xubatian.cn/Flink-%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E7%8E%B0-FlinkSQL%E7%9A%84Table-API-%E4%B8%8ESQL%E4%B9%8B%E5%87%BD%E6%95%B0%EF%BC%88Functions%EF%BC%89/</id>
    <published>2022-02-14T14:00:35.000Z</published>
    <updated>2022-02-14T14:14:24.887Z</updated>
    
    <content type="html"><![CDATA[<p>Flink Table 和 SQL内置了很多SQL中支持的函数；如果有无法满足的需要，则可以实现用户自定义的函数（UDF）来解决。</p><span id="more"></span><h2 id="系统内置函数"><a href="#系统内置函数" class="headerlink" title="系统内置函数"></a><strong>系统内置函数</strong></h2><p>Flink Table API 和 SQL为用户提供了一组用于数据转换的内置函数。SQL中支持的很多函数，Table API和SQL都已经做了实现，其它还在快速开发扩展中。</p><p>以下是一些典型函数的举例，全部的内置函数，可以参考官网介绍。</p><h3 id="1-比较函数"><a href="#1-比较函数" class="headerlink" title="1.比较函数"></a>1.比较函数</h3><p>SQL：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">value1 = value2</span><br><span class="line"></span><br><span class="line">value1 &gt; value2</span><br></pre></td></tr></table></figure><p>Table API：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ANY1 === ANY2</span><br><span class="line"></span><br><span class="line">ANY1 &gt; ANY2</span><br></pre></td></tr></table></figure><h3 id="2-逻辑函数"><a href="#2-逻辑函数" class="headerlink" title="2.逻辑函数"></a>2.逻辑函数</h3><p>SQL：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">boolean1 OR boolean2</span><br><span class="line"></span><br><span class="line">boolean IS FALSE</span><br><span class="line"></span><br><span class="line">NOT boolean</span><br></pre></td></tr></table></figure><p>Table API：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">BOOLEAN1 || BOOLEAN2</span><br><span class="line"></span><br><span class="line">BOOLEAN.isFalse</span><br><span class="line"></span><br><span class="line">!BOOLEAN</span><br></pre></td></tr></table></figure><h3 id="3-算术函数"><a href="#3-算术函数" class="headerlink" title="3.算术函数"></a>3.算术函数</h3><p>SQL：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">numeric1 + numeric2</span><br><span class="line"></span><br><span class="line">POWER(numeric1, numeric2)</span><br></pre></td></tr></table></figure><p>Table API：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">NUMERIC1 + NUMERIC2</span><br><span class="line"></span><br><span class="line">NUMERIC1.power(NUMERIC2)</span><br></pre></td></tr></table></figure><h3 id="4-字符串函数"><a href="#4-字符串函数" class="headerlink" title="4.字符串函数"></a>4.字符串函数</h3><p>SQL：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">string1 || string2</span><br><span class="line"></span><br><span class="line">UPPER(string)</span><br><span class="line"></span><br><span class="line">CHAR_LENGTH(string)</span><br></pre></td></tr></table></figure><p>Table API：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">STRING1 + STRING2</span><br><span class="line"></span><br><span class="line">STRING.upperCase()</span><br><span class="line"></span><br><span class="line">STRING.charLength()</span><br></pre></td></tr></table></figure><h3 id="5-时间函数"><a href="#5-时间函数" class="headerlink" title="5.时间函数"></a>5.时间函数</h3><p>SQL：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">DATE string</span><br><span class="line"></span><br><span class="line">TIMESTAMP string</span><br><span class="line"></span><br><span class="line">CURRENT_TIME</span><br><span class="line"></span><br><span class="line">INTERVAL string range</span><br></pre></td></tr></table></figure><p>Table API：    </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">STRING.toDate</span><br><span class="line"></span><br><span class="line">STRING.toTimestamp</span><br><span class="line"></span><br><span class="line">currentTime()</span><br><span class="line"></span><br><span class="line">NUMERIC.days</span><br><span class="line"></span><br><span class="line">NUMERIC.minutes</span><br></pre></td></tr></table></figure><h3 id="6-聚合函数"><a href="#6-聚合函数" class="headerlink" title="6.聚合函数"></a>6.聚合函数</h3><p>SQL：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">COUNT(*)</span><br><span class="line"></span><br><span class="line">SUM([ ALL | DISTINCT ] expression)</span><br><span class="line"></span><br><span class="line">RANK()</span><br><span class="line"></span><br><span class="line">ROW_NUMBER()</span><br></pre></td></tr></table></figure><p>Table API：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FIELD.count</span><br><span class="line"></span><br><span class="line">FIELD.sum0  </span><br></pre></td></tr></table></figure><h2 id="UDF"><a href="#UDF" class="headerlink" title="UDF"></a><strong>UDF</strong></h2><p>​        用户定义函数（User-defined Functions，UDF）是一个重要的特性，因为它们显著地扩展了查询（Query）的表达能力。一些系统内置函数无法解决的需求，我们可以用UDF来自定义实现。</p><h3 id="注册用户自定义函数UDF"><a href="#注册用户自定义函数UDF" class="headerlink" title="注册用户自定义函数UDF"></a><strong>注册用户自定义函数UDF</strong></h3><p>​        在大多数情况下，用户定义的函数必须先注册，然后才能在查询中使用。不需要专门为Scala 的Table API注册函数。</p><p>函数通过调用registerFunction（）方法在TableEnvironment中注册。当用户定义的函数被注册时，它被插入到TableEnvironment的函数目录中，这样Table API或SQL解析器就可以识别并正确地解释它。</p><h3 id="标量函数（Scalar-Functions）"><a href="#标量函数（Scalar-Functions）" class="headerlink" title="标量函数（Scalar Functions）"></a><strong>标量函数（Scalar Functions）</strong></h3><p>​        用户定义的标量函数，可以将0、1或多个标量值，映射到新的标量值。</p><p>​        为了定义标量函数，必须在org.apache.flink.table.functions中扩展基类Scalar Function，并实现（一个或多个）求值（evaluation，eval）方法。标量函数的行为由求值方法决定，求值方法必须公开声明并命名为eval（直接def声明，没有override）。求值方法的参数类型和返回类型，确定了标量函数的参数和返回类型。</p><p>在下面的代码中，我们定义自己的HashCode函数，在TableEnvironment中注册它，并在查询中调用它。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 自定义一个标量函数</span><br><span class="line">public static class HashCode extends ScalarFunction &#123;</span><br><span class="line">    private int factor = 13;</span><br><span class="line"></span><br><span class="line">    public HashCode(int factor) &#123;</span><br><span class="line">        this.factor = factor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int eval(String s) &#123;</span><br><span class="line">        return s.hashCode() * factor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主函数中调用，计算sensor id的哈希值（前面部分照抄，流环境、表环境、读取source、建表）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) throws Exception &#123;</span><br><span class="line">    // 1. 创建环境</span><br><span class="line">    StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">    env.setParallelism(1);</span><br><span class="line"></span><br><span class="line">    StreamTableEnvironment tableEnv = StreamTableEnvironment.create(env);</span><br><span class="line"></span><br><span class="line">    // 2. 读取文件，得到 DataStream</span><br><span class="line">    String filePath = &quot;..\\sensor.txt&quot;;</span><br><span class="line"></span><br><span class="line">    DataStream&lt;String&gt; inputStream = env.readTextFile(filePath);</span><br><span class="line"></span><br><span class="line">    // 3. 转换成 Java Bean，并指定timestamp和watermark</span><br><span class="line">    DataStream&lt;SensorReading&gt; dataStream = inputStream</span><br><span class="line">            .map( line -&gt; &#123;</span><br><span class="line">                String[] fields = line.split(&quot;,&quot;);</span><br><span class="line">                return new SensorReading(fields[0], new Long(fields[1]), new Double(fields[2]));</span><br><span class="line">            &#125; );</span><br><span class="line"></span><br><span class="line">    // 4. 将 DataStream 转换为 Table</span><br><span class="line">    Table sensorTable = tableEnv.fromDataStream(dataStream, &quot;id, timestamp as ts, temperature&quot;);</span><br><span class="line"></span><br><span class="line">    // 5. 调用自定义hash函数，对id进行hash运算</span><br><span class="line">    HashCode hashCode = new HashCode(23);</span><br><span class="line">    tableEnv.registerFunction(&quot;hashCode&quot;, hashCode);</span><br><span class="line">    Table resultTable = sensorTable</span><br><span class="line">            .select(&quot;id, ts, hashCode(id)&quot;);</span><br><span class="line"></span><br><span class="line">    //  sql</span><br><span class="line">    tableEnv.createTemporaryView(&quot;sensor&quot;, sensorTable);</span><br><span class="line">    Table resultSqlTable = tableEnv.sqlQuery(&quot;select id, ts, hashCode(id) from sensor&quot;);</span><br><span class="line"></span><br><span class="line">    tableEnv.toAppendStream(resultTable, Row.class).print(&quot;result&quot;);</span><br><span class="line">    tableEnv.toRetractStream(resultSqlTable, Row.class).print(&quot;sql&quot;);</span><br><span class="line"></span><br><span class="line">    env.execute(&quot;scalar function test&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="表函数（Table-Functions）"><a href="#表函数（Table-Functions）" class="headerlink" title="表函数（Table Functions）"></a><strong>表函数（Table Functions）</strong></h3><p>与用户定义的标量函数类似，用户定义的表函数，可以将0、1或多个标量值作为输入参数；与标量函数不同的是，它可以返回任意数量的行作为输出，而不是单个值。</p><p>为了定义一个表函数，必须扩展org.apache.flink.table.functions中的基类TableFunction并实现（一个或多个）求值方法。表函数的行为由其求值方法决定，求值方法必须是public的，并命名为eval。求值方法的参数类型，决定表函数的所有有效参数。</p><p>返回表的类型由TableFunction的泛型类型确定。求值方法使用protected collect（T）方法发出输出行。</p><p>在Table API中，Table函数需要与.joinLateral或.leftOuterJoinLateral一起使用。</p><p>joinLateral算子，会将外部表中的每一行，与表函数（TableFunction，算子的参数是它的表达式）计算得到的所有行连接起来。</p><p>而leftOuterJoinLateral算子，则是左外连接，它同样会将外部表中的每一行与表函数计算生成的所有行连接起来；并且，对于表函数返回的是空表的外部行，也要保留下来。</p><p>在SQL中，则需要使用Lateral Table（<TableFunction>），或者带有ON TRUE条件的左连接。</p><p>下面的代码中，我们将定义一个表函数，在表环境中注册它，并在查询中调用它。</p><p>自定义TableFunction：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// 自定义TableFunction</span><br><span class="line">public static class Split extends TableFunction&lt;Tuple2&lt;String, Integer&gt;&gt; &#123;</span><br><span class="line">    private String separator = &quot;,&quot;;</span><br><span class="line"></span><br><span class="line">    public Split(String separator) &#123;</span><br><span class="line">        this.separator = separator;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 类似flatmap，没有返回值</span><br><span class="line">    public void eval(String str) &#123;</span><br><span class="line">        for (String s : str.split(separator)) &#123;</span><br><span class="line">            collect(new Tuple2&lt;String, Integer&gt;(s, s.length()));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来，就是在代码中调用。首先是Table API的方式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Split split = new Split(&quot;_&quot;);</span><br><span class="line">tableEnv.registerFunction(&quot;split&quot;, split);</span><br><span class="line">Table resultTable = sensorTable</span><br><span class="line">        .joinLateral( &quot;split(id) as (word, length)&quot;)</span><br><span class="line">        .select(&quot;id, ts, word, length&quot;);</span><br></pre></td></tr></table></figure><p>然后是SQL的方式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tableEnv.createTemporaryView(&quot;sensor&quot;, sensorTable);</span><br><span class="line">Table resultSqlTable = tableEnv.sqlQuery(&quot;select id, ts, word, length &quot; +</span><br><span class="line">        &quot;from sensor, lateral table( split(id) ) as splitId(word, length)&quot;);</span><br></pre></td></tr></table></figure><h3 id="聚合函数（Aggregate-Functions）"><a href="#聚合函数（Aggregate-Functions）" class="headerlink" title="聚合函数（Aggregate Functions）"></a><strong>聚合函数（Aggregate Functions）</strong></h3><p>​        用户自定义聚合函数（User-Defined Aggregate Functions，UDAGGs）可以把一个表中的数据，聚合成一个标量值。用户定义的聚合函数，是通过继承AggregateFunction抽象类实现的。</p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220214220859.png"></p><p>上图中显示了一个聚合的例子。</p><p>假设现在有一张表，包含了各种饮料的数据。该表由三列（id、name和price）、五行组成数据。现在我们需要找到表中所有饮料的最高价格，即执行max（）聚合，结果将是一个数值。</p><p>AggregateFunction的工作原理如下。</p><ul><li> 首先，它需要一个累加器，用来保存聚合中间结果的数据结构（状态）。可以通过调用AggregateFunction的createAccumulator（）方法创建空累加器。</li><li> 随后，对每个输入行调用函数的accumulate（）方法来更新累加器。</li><li> 处理完所有行后，将调用函数的getValue（）方法来计算并返回最终结果。</li></ul><p>AggregationFunction要求必须实现的方法：</p><ul><li> createAccumulator()</li><li> accumulate()</li><li> getValue()</li></ul><p>​    除了上述方法之外，还有一些可选择实现的方法。其中一些方法，可以让系统执行查询更有效率，而另一些方法，对于某些场景是必需的。例如，如果聚合函数应用在会话窗口（session group window）的上下文中，则merge（）方法是必需的。</p><ul><li> retract() </li><li> merge() </li><li> resetAccumulator()</li></ul><p>接下来我们写一个自定义AggregateFunction，计算一下每个sensor的平均温度值.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">// 定义AggregateFunction的Accumulator</span><br><span class="line">public static class AvgTempAcc &#123;</span><br><span class="line">    double sum = 0.0;</span><br><span class="line">    int count = 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 自定义一个聚合函数，求每个传感器的平均温度值，保存状态(tempSum, tempCount)</span><br><span class="line">public static class AvgTemp extends AggregateFunction&lt;Double, AvgTempAcc&gt;&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public Double getValue(AvgTempAcc accumulator) &#123;</span><br><span class="line">        return accumulator.sum / accumulator.count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public AvgTempAcc createAccumulator() &#123;</span><br><span class="line">        return new AvgTempAcc();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 实现一个具体的处理计算函数，accumulate</span><br><span class="line">    public void accumulate( AvgTempAcc accumulator, Double temp) &#123;</span><br><span class="line">        accumulator.sum += temp;</span><br><span class="line">        accumulator.count += 1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来就可以在代码中调用了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// 创建一个聚合函数实例</span><br><span class="line">AvgTemp avgTemp = new AvgTemp();</span><br><span class="line"></span><br><span class="line">// Table API的调用 </span><br><span class="line">tableEnv.registerFunction(&quot;avgTemp&quot;, avgTemp);</span><br><span class="line">Table resultTable = sensorTable</span><br><span class="line">        .groupBy(&quot;id&quot;)</span><br><span class="line">        .aggregate(&quot;avgTemp(temperature) as avgTemp&quot;)</span><br><span class="line">        .select(&quot;id, avgTemp&quot;);</span><br><span class="line">// sql</span><br><span class="line">tableEnv.createTemporaryView(&quot;sensor&quot;, sensorTable);</span><br><span class="line">Table resultSqlTable = tableEnv.sqlQuery(&quot;select id, avgTemp(temperature) &quot; +</span><br><span class="line">        &quot;from sensor group by id&quot;);</span><br><span class="line"></span><br><span class="line">tableEnv.toRetractStream(resultTable, Row.class).print(&quot;result&quot;);</span><br><span class="line">tableEnv.toRetractStream(resultSqlTable, Row.class).print(&quot;sql&quot;);</span><br></pre></td></tr></table></figure><h3 id="表聚合函数（Table-Aggregate-Functions）"><a href="#表聚合函数（Table-Aggregate-Functions）" class="headerlink" title="表聚合函数（Table Aggregate Functions）"></a><strong>表聚合函数（Table Aggregate Functions）</strong></h3><p>​        用户定义的表聚合函数（User-Defined Table Aggregate Functions，UDTAGGs），可以把一个表中数据，聚合为具有多行和多列的结果表。这跟AggregateFunction非常类似，只是之前聚合结果是一个标量值，现在变成了一张表。</p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220214221100.png"></p><p>​        比如现在我们需要找到表中所有饮料的前2个最高价格，即执行top2（）表聚合。我们需要检查5行中的每一行，得到的结果将是一个具有排序后前2个值的表。</p><p>用户定义的表聚合函数，是通过继承TableAggregateFunction抽象类来实现的。</p><p>TableAggregateFunction的工作原理如下。</p><ul><li><p> 首先，它同样需要一个累加器（Accumulator），它是保存聚合中间结果的数据结构。通过调用TableAggregateFunction的createAccumulator（）方法可以创建空累加器。</p></li><li><p> 随后，对每个输入行调用函数的accumulate（）方法来更新累加器。</p></li><li><p>处理完所有行后，将调用函数的emitValue（）方法来计算并返回最终结果。</p></li></ul><p>AggregationFunction要求必须实现的方法：</p><ul><li> createAccumulator()</li><li> accumulate()</li></ul><p>除了上述方法之外，还有一些可选择实现的方法。</p><ul><li><p> retract() </p></li><li><p> merge() </p></li><li><p> resetAccumulator() </p></li><li><p> emitValue() </p></li><li><p>emitUpdateWithRetract()</p></li></ul><p>接下来我们写一个自定义TableAggregateFunction，用来提取每个sensor最高的两个温度值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">// 先定义一个 Accumulator </span><br><span class="line">public static class Top2TempAcc &#123;</span><br><span class="line">    double highestTemp = Double.MIN_VALUE;</span><br><span class="line">    double secondHighestTemp = Double.MIN_VALUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 自定义表聚合函数</span><br><span class="line">public static class Top2Temp extends TableAggregateFunction&lt;Tuple2&lt;Double, Integer&gt;, Top2TempAcc&gt; &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public Top2TempAcc createAccumulator() &#123;</span><br><span class="line">        return new Top2TempAcc();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 实现计算聚合结果的函数accumulate</span><br><span class="line">    public void accumulate(Top2TempAcc acc, Double temp) &#123;</span><br><span class="line">        if (temp &gt; acc.highestTemp) &#123;</span><br><span class="line">            acc.secondHighestTemp = acc.highestTemp;</span><br><span class="line">            acc.highestTemp = temp;</span><br><span class="line">        &#125; else if (temp &gt; acc.secondHighestTemp) &#123;</span><br><span class="line">            acc.secondHighestTemp = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    // 实现一个输出结果的方法，最终处理完表中所有数据时调用</span><br><span class="line">    public void emitValue(Top2TempAcc acc, Collector&lt;Tuple2&lt;Double, Integer&gt;&gt; out) &#123;</span><br><span class="line">        out.collect(new Tuple2&lt;&gt;(acc.highestTemp, 1));</span><br><span class="line">        out.collect(new Tuple2&lt;&gt;(acc.secondHighestTemp, 2));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来就可以在代码中调用了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 创建一个表聚合函数实例</span><br><span class="line">Top2Temp top2Temp = new Top2Temp();</span><br><span class="line">tableEnv.registerFunction(&quot;top2Temp&quot;, top2Temp);</span><br><span class="line">Table resultTable = sensorTable</span><br><span class="line">        .groupBy(&quot;id&quot;)</span><br><span class="line">        .flatAggregate(&quot;top2Temp(temperature) as (temp, rank)&quot;)</span><br><span class="line">        .select(&quot;id, temp, rank&quot;);</span><br><span class="line"></span><br><span class="line">tableEnv.toRetractStream(resultTable, Row.class).print(&quot;result&quot;);</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;Flink Table 和 SQL内置了很多SQL中支持的函数；如果有无法满足的需要，则可以实现用户自定义的函数（UDF）来解决。&lt;/p&gt;</summary>
    
    
    
    <category term="大数据" scheme="http://xubatian.cn/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
    <category term="Flink" scheme="http://xubatian.cn/tags/Flink/"/>
    
  </entry>
  
  <entry>
    <title>Flink 原理与实现: FlinkSQL的Table API 与SQL之窗口（Windows）</title>
    <link href="http://xubatian.cn/Flink-%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E7%8E%B0-FlinkSQL%E7%9A%84Table-API-%E4%B8%8ESQL%E4%B9%8B%E7%AA%97%E5%8F%A3%EF%BC%88Windows%EF%BC%89/"/>
    <id>http://xubatian.cn/Flink-%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E7%8E%B0-FlinkSQL%E7%9A%84Table-API-%E4%B8%8ESQL%E4%B9%8B%E7%AA%97%E5%8F%A3%EF%BC%88Windows%EF%BC%89/</id>
    <published>2022-02-14T12:21:59.000Z</published>
    <updated>2022-02-14T13:59:27.017Z</updated>
    
    <content type="html"><![CDATA[<p>​        时间语义，要配合窗口操作才能发挥作用。最主要的用途，当然就是开窗口、根据时间段做计算了。下面我们就来看看Table API和SQL中，怎么利用时间字段做窗口操作。</p><p>在Table API和SQL中，主要有两种窗口：Group Windows和Over Windows</p><span id="more"></span><h2 id="分组窗口（Group-Windows）"><a href="#分组窗口（Group-Windows）" class="headerlink" title="分组窗口（Group Windows）"></a><strong>分组窗口（Group Windows）</strong></h2><p>分组窗口（Group Windows）会根据时间或行计数间隔，将行聚合到有限的组（Group）中，并对每个组的数据执行一次聚合函数。</p><p>Table API中的Group Windows都是使用.window（w:GroupWindow）子句定义的，并且必须由as子句指定一个别名。为了按窗口对表进行分组，窗口的别名必须在group by子句中，像常规的分组字段一样引用。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Table table = input</span><br><span class="line">  .window([w: GroupWindow] as &quot;w&quot;) // 定义窗口，别名 w</span><br><span class="line">  .groupBy(&quot;w, a&quot;)  // 以属性a和窗口w作为分组的key </span><br><span class="line">  .select(&quot;a, b.sum&quot;)  // 聚合字段b的值，求和</span><br></pre></td></tr></table></figure><p>或者，还可以把窗口的相关信息，作为字段添加到结果表中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Table table = input</span><br><span class="line">  .window([w: GroupWindow] as &quot;w&quot;) </span><br><span class="line">  .groupBy(&quot;w, a&quot;) </span><br><span class="line">  .select(&quot;a, w.start, w.end, w.rowtime, b.count&quot;)</span><br></pre></td></tr></table></figure><p>Table API提供了一组具有特定语义的预定义Window类，这些类会被转换为底层DataStream或DataSet的窗口操作。</p><p>Table API支持的窗口定义，和我们熟悉的一样，主要也是三种：滚动（Tumbling）、滑动（Sliding）和会话（Session）。</p><h3 id="滚动窗口"><a href="#滚动窗口" class="headerlink" title="滚动窗口"></a><strong>滚动窗口</strong></h3><p>滚动窗口（Tumbling windows）要用Tumble类来定义，另外还有三个方法：</p><ul><li> over：定义窗口长度</li><li> on：用来分组（按时间间隔）或者排序（按行数）的时间字段</li><li> as：别名，必须出现在后面的groupBy中</li></ul><p>代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// Tumbling Event-time Window</span><br><span class="line">.window(Tumble.over(&quot;10.minutes&quot;).on(&quot;rowtime&quot;).as(&quot;w&quot;))</span><br><span class="line"></span><br><span class="line">// Tumbling Processing-time Window</span><br><span class="line">.window(Tumble.over(&quot;10.minutes&quot;).on(&quot;proctime&quot;).as(&quot;w&quot;))</span><br><span class="line"></span><br><span class="line">// Tumbling Row-count Window</span><br><span class="line">.window(Tumble.over(&quot;10.rows&quot;).on(&quot;proctime&quot;).as(&quot;w&quot;))</span><br></pre></td></tr></table></figure><h3 id="滑动窗口"><a href="#滑动窗口" class="headerlink" title="滑动窗口"></a>滑动窗口</h3><p>滑动窗口（Sliding windows）要用Slide类来定义，另外还有四个方法：</p><ul><li> over：定义窗口长度</li><li> every：定义滑动步长</li><li> on：用来分组（按时间间隔）或者排序（按行数）的时间字段</li><li> as：别名，必须出现在后面的groupBy中</li></ul><p>代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// Sliding Event-time Window</span><br><span class="line">.window(Slide.over(&quot;10.minutes&quot;).every(&quot;5.minutes&quot;).on(&quot;rowtime&quot;).as(&quot;w&quot;))</span><br><span class="line"></span><br><span class="line">// Sliding Processing-time window </span><br><span class="line">.window(Slide.over(&quot;10.minutes&quot;).every(&quot;5.minutes&quot;).on(&quot;proctime&quot;).as(&quot;w&quot;))</span><br><span class="line"></span><br><span class="line">// Sliding Row-count window</span><br><span class="line">.window(Slide.over(&quot;10.rows&quot;).every(&quot;5.rows&quot;).on(&quot;proctime&quot;).as(&quot;w&quot;))</span><br></pre></td></tr></table></figure><h3 id="会话窗口"><a href="#会话窗口" class="headerlink" title="会话窗口"></a><strong>会话窗口</strong></h3><p>会话窗口（Session windows）要用Session类来定义，另外还有三个方法：</p><ul><li> withGap：会话时间间隔</li><li> on：用来分组（按时间间隔）或者排序（按行数）的时间字段</li><li> as：别名，必须出现在后面的groupBy中</li></ul><p>代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// Session Event-time Window</span><br><span class="line">.window(Session.withGap.(&quot;10.minutes&quot;).on(&quot;rowtime&quot;).as(&quot;w&quot;))</span><br><span class="line"></span><br><span class="line">// Session Processing-time Window</span><br><span class="line">.window(Session.withGap.(&quot;10.minutes&quot;).on(“proctime&quot;).as(&quot;w&quot;))</span><br></pre></td></tr></table></figure><h2 id="Over-Windows"><a href="#Over-Windows" class="headerlink" title="Over Windows"></a><strong>Over Windows</strong></h2><p>Over window聚合是标准SQL中已有的（Over子句），可以在查询的SELECT子句中定义。Over window 聚合，会针对每个输入行，计算相邻行范围内的聚合。Over windows</p><p>使用.window（w:overwindows*）子句定义，并在select（）方法中通过别名来引用。</p><p>比如这样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Table table = input</span><br><span class="line">  .window([w: OverWindow] as &quot;w&quot;)</span><br><span class="line">  .select(&quot;a, b.sum over w, c.min over w&quot;)</span><br></pre></td></tr></table></figure><p>Table API提供了Over类，来配置Over窗口的属性。可以在事件时间或处理时间，以及指定为时间间隔、或行计数的范围内，定义Over windows。</p><p>无界的over window是使用常量指定的。也就是说，时间间隔要指定UNBOUNDED_RANGE，或者行计数间隔要指定UNBOUNDED_ROW。而有界的over window是用间隔的大小指定的。</p><p>实际代码应用如下：</p><p>1） 无界的 over window</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 无界的事件时间 over window</span><br><span class="line">.window(Over.partitionBy(&quot;a&quot;).orderBy(&quot;rowtime&quot;).preceding.(UNBOUNDED_RANGE).as(&quot;w&quot;))</span><br><span class="line"></span><br><span class="line">// 无界的处理时间 over window</span><br><span class="line">.window(Over.partitionBy(&quot;a&quot;).orderBy(&quot;proctime&quot;).preceding.(UNBOUNDED_RANGE).as(&quot;w&quot;))</span><br><span class="line"></span><br><span class="line">// 无界的事件时间 Row-count over window</span><br><span class="line">.window(Over.partitionBy(&quot;a&quot;).orderBy(&quot;rowtime&quot;).preceding.(UNBOUNDED_ROW).as(&quot;w&quot;))</span><br><span class="line"></span><br><span class="line">//无界的处理时间 Row-count over window</span><br><span class="line">.window(Over.partitionBy(&quot;a&quot;).orderBy(&quot;proctime&quot;).preceding.(UNBOUNDED_ROW).as(&quot;w&quot;))</span><br></pre></td></tr></table></figure><p>2） 有界的over window</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 有界的事件时间 over window</span><br><span class="line">.window(Over.partitionBy(&quot;a&quot;).orderBy(&quot;rowtime&quot;).preceding(&quot;1.minutes&quot;).as(&quot;w&quot;))</span><br><span class="line">        </span><br><span class="line">// 有界的处理时间 over window</span><br><span class="line">.window(Over.partitionBy(&quot;a&quot;).orderBy(&quot;proctime&quot;).preceding(&quot;1.minutes&quot;).as(&quot;w&quot;))</span><br><span class="line">        </span><br><span class="line">// 有界的事件时间 Row-count over window</span><br><span class="line">.window(Over.partitionBy(&quot;a&quot;).orderBy(&quot;rowtime&quot;).preceding(&quot;10.rows&quot;).as(&quot;w&quot;))</span><br><span class="line">        </span><br><span class="line">// 有界的处理时间 Row-count over window</span><br><span class="line">.window(Over.partitionBy(&quot;a&quot;).orderBy(&quot;procime&quot;).preceding(&quot;10.rows&quot;).as(&quot;w&quot;))</span><br></pre></td></tr></table></figure><h2 id="SQL中窗口的定义"><a href="#SQL中窗口的定义" class="headerlink" title="SQL中窗口的定义"></a>SQL中窗口的定义</h2><p>我们已经了解了在Table API里window的调用方式，同样，我们也可以在SQL中直接加入窗口的定义和使用。</p><h3 id="Group-Windows"><a href="#Group-Windows" class="headerlink" title="Group Windows"></a><strong>Group Windows</strong></h3><p>Group Windows在SQL查询的Group BY子句中定义。与使用常规GROUP BY子句的查询一样，使用GROUP BY子句的查询会计算每个组的单个结果行。</p><p>SQL支持以下Group窗口函数:</p><ol><li>TUMBLE(time_attr, interval)</li></ol><p>​        定义一个滚动窗口，第一个参数是时间字段，第二个参数是窗口长度。</p><ol start="2"><li>HOP(time_attr, interval, interval)</li></ol><p>​        定义一个滑动窗口，第一个参数是时间字段，第二个参数是窗口滑动步长，第三个是窗口长度。</p><ol start="3"><li>SESSION(time_attr, interval)</li></ol><p>​        定义一个会话窗口，第一个参数是时间字段，第二个参数是窗口间隔（Gap）。</p><p>另外还有一些辅助函数，可以用来选择Group Window的开始和结束时间戳，以及时间属性。</p><p>这里只写TUMBLE_*，滑动和会话窗口是类似的（HOP_*，SESSION_*）。</p><ul><li> TUMBLE_START(time_attr, interval)</li><li> TUMBLE_END(time_attr, interval)</li><li> TUMBLE_ROWTIME(time_attr, interval)</li><li> TUMBLE_PROCTIME(time_attr, interval)</li></ul><h3 id="Over-Windows-1"><a href="#Over-Windows-1" class="headerlink" title="Over Windows"></a><strong>Over Windows</strong></h3><p>​        由于Over本来就是SQL内置支持的语法，所以这在SQL中属于基本的聚合操作。所有聚合必须在同一窗口上定义，也就是说，必须是相同的分区、排序和范围。目前仅支持在当前行范围之前的窗口（无边界和有边界）。</p><p>注意，ORDER BY必须在单一的时间属性上指定。</p><p>代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">SELECT COUNT(amount) OVER (</span><br><span class="line">  PARTITION BY user</span><br><span class="line">  ORDER BY proctime</span><br><span class="line">  ROWS BETWEEN 2 PRECEDING AND CURRENT ROW)</span><br><span class="line">FROM Orders</span><br><span class="line"></span><br><span class="line">// 也可以做多个聚合</span><br><span class="line">SELECT COUNT(amount) OVER w, SUM(amount) OVER w</span><br><span class="line">FROM Orders</span><br><span class="line">WINDOW w AS (</span><br><span class="line">  PARTITION BY user</span><br><span class="line">  ORDER BY proctime</span><br><span class="line">  ROWS BETWEEN 2 PRECEDING AND CURRENT ROW)</span><br></pre></td></tr></table></figure><h3 id="代码练习（以分组滚动窗口为例）"><a href="#代码练习（以分组滚动窗口为例）" class="headerlink" title="代码练习（以分组滚动窗口为例）"></a><strong>代码练习（以分组滚动窗口为例）</strong></h3><p>我们可以综合学习过的内容，用一段完整的代码实现一个具体的需求。例如，可以开一个滚动窗口，统计10秒内出现的每个sensor的个数。</p><p>代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) throws Exception &#123;</span><br><span class="line">        // 1. 创建环境</span><br><span class="line">        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">        env.setParallelism(1);</span><br><span class="line">        // 设置事件时间</span><br><span class="line">        env.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);</span><br><span class="line"></span><br><span class="line">        StreamTableEnvironment tableEnv = StreamTableEnvironment.create(env);</span><br><span class="line"></span><br><span class="line">        // 2. 读取文件，得到 DataStream</span><br><span class="line">        String filePath = &quot;..\\sensor.txt&quot;;</span><br><span class="line">        DataStream&lt;String&gt; inputStream = env.readTextFile(filePath);</span><br><span class="line"></span><br><span class="line">        // 3. 转换成 Java Bean，并指定timestamp和watermark</span><br><span class="line">        DataStream&lt;SensorReading&gt; dataStream = inputStream</span><br><span class="line">                .map( line -&gt; &#123;</span><br><span class="line">                    String[] fields = line.split(&quot;,&quot;);</span><br><span class="line">                    return new SensorReading(fields[0], new Long(fields[1]), new Double(fields[2]));</span><br><span class="line">                &#125; )</span><br><span class="line">                .assignTimestampsAndWatermarks(new BoundedOutOfOrdernessTimestampExtractor&lt;SensorReading&gt;(Time.seconds(1)) &#123;</span><br><span class="line">                    @Override</span><br><span class="line">                    public long extractTimestamp(SensorReading element) &#123;</span><br><span class="line">                        return element.getTimestamp() * 1000L;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line"></span><br><span class="line">        // 4. 将 DataStream 转换为 Table</span><br><span class="line">        Table sensorTable = tableEnv.fromDataStream(dataStream, &quot;id, timestamp.rowtime as ts, temperature&quot;);</span><br><span class="line"></span><br><span class="line">        // 5. 开窗聚合</span><br><span class="line">        Table resultTable = sensorTable</span><br><span class="line">                .window(Tumble.over(&quot;10.seconds&quot;).on(&quot;ts&quot;).as(&quot;tw&quot;))</span><br><span class="line">                // 每10秒统计一次，滚动时间窗口</span><br><span class="line">                .groupBy(&quot;id, tw&quot;)</span><br><span class="line">                .select(&quot;id, id.count, temperature.avg, tw.end&quot;);</span><br><span class="line"></span><br><span class="line">        //  sql</span><br><span class="line">        tableEnv.createTemporaryView(&quot;sensor&quot;, sensorTable);</span><br><span class="line">        Table resultSqlTable = tableEnv.sqlQuery(</span><br><span class="line">                &quot;select id, count(id), avg(temperature), tumble_end(ts, interval &#x27;10&#x27; second) &quot; +</span><br><span class="line">                        &quot;from sensor group by id, tumble(ts, interval &#x27;10&#x27; second)&quot;);</span><br><span class="line"></span><br><span class="line">        // 转换成流打印输出</span><br><span class="line">        tableEnv.toAppendStream(resultTable, Row.class).print(&quot;result&quot;);</span><br><span class="line">        tableEnv.toAppendStream(resultSqlTable, Row.class).print(&quot;sql&quot;);</span><br><span class="line"></span><br><span class="line">        env.execute(&quot;time and window test&quot;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;​        时间语义，要配合窗口操作才能发挥作用。最主要的用途，当然就是开窗口、根据时间段做计算了。下面我们就来看看Table API和SQL中，怎么利用时间字段做窗口操作。&lt;/p&gt;
&lt;p&gt;在Table API和SQL中，主要有两种窗口：Group Windows和Over Windows&lt;/p&gt;</summary>
    
    
    
    <category term="大数据" scheme="http://xubatian.cn/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
    <category term="Flink" scheme="http://xubatian.cn/tags/Flink/"/>
    
  </entry>
  
  <entry>
    <title>Flink 原理与实现: FlinkSQL的Table API 与SQL之流处理中的特殊概念</title>
    <link href="http://xubatian.cn/Flink-%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E7%8E%B0-FlinkSQL%E7%9A%84Table-API-%E4%B8%8ESQL%E4%B9%8B%E6%B5%81%E5%A4%84%E7%90%86%E4%B8%AD%E7%9A%84%E7%89%B9%E6%AE%8A%E6%A6%82%E5%BF%B5/"/>
    <id>http://xubatian.cn/Flink-%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E7%8E%B0-FlinkSQL%E7%9A%84Table-API-%E4%B8%8ESQL%E4%B9%8B%E6%B5%81%E5%A4%84%E7%90%86%E4%B8%AD%E7%9A%84%E7%89%B9%E6%AE%8A%E6%A6%82%E5%BF%B5/</id>
    <published>2022-02-14T12:07:03.000Z</published>
    <updated>2022-02-15T02:27:43.722Z</updated>
    
    <content type="html"><![CDATA[<p>​            Table API和SQL，本质上还是基于关系型表的操作方式；而关系型表、关系代数，以及SQL本身，一般是有界的，更适合批处理的场景。这就导致在进行流处理的过程中，理解会稍微复杂一些，需要引入一些特殊概念。</p><span id="more"></span><h2 id="流处理和关系代数（表，及SQL）的区别"><a href="#流处理和关系代数（表，及SQL）的区别" class="headerlink" title="流处理和关系代数（表，及SQL）的区别"></a><strong>流处理和关系代数（表，及SQL）的区别</strong></h2><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220214200752.png"></p><p>可以看到，其实关系代数（主要就是指关系型数据库中的表）和SQL，主要就是针对批处理的，这和流处理有天生的隔阂。</p><h2 id="动态表（Dynamic-Tables）"><a href="#动态表（Dynamic-Tables）" class="headerlink" title="动态表（Dynamic Tables）"></a><strong>动态表（Dynamic Tables）</strong></h2><p>因为流处理面对的数据，是连续不断的，这和我们熟悉的关系型数据库中保存的“表”完全不同。所以，如果我们把流数据转换成Table，然后执行类似于table的select操作，结果就不是一成不变的，而是随着新数据的到来，会不停更新。</p><p>我们可以随着新数据的到来，不停地在之前的基础上更新结果。这样得到的表，在Flink Table API概念里，就叫做“<strong>动态表</strong>”（Dynamic Tables）。</p><p>动态表是Flink对流数据的Table API和SQL支持的核心概念。与表示批处理数据的静态表不同，动态表是随时间变化的。动态表可以像静态的批处理表一样进行查询，查询一个动态表会产生持续查询（Continuous Query）。连续查询永远不会终止，并会生成另一个动态表。查询（Query）会不断更新其动态结果表，以反映其动态输入表上的更改。</p><h2 id="流式持续查询的过程"><a href="#流式持续查询的过程" class="headerlink" title="流式持续查询的过程"></a><strong>流式持续查询的过程</strong></h2><p>下图显示了流、动态表和连续查询的关系：</p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220214200844.png"></p><p>流式持续查询的过程为：</p><ol><li><p>流被转换为动态表。</p></li><li><p>对动态表计算连续查询，生成新的动态表。</p></li><li><p>生成的动态表被转换回流。</p></li></ol><h3 id="将流转换成表（Table）"><a href="#将流转换成表（Table）" class="headerlink" title="将流转换成表（Table）"></a><strong>将流转换成表（Table）</strong></h3><p>为了处理带有关系查询的流，必须先将其转换为表。</p><p>从概念上讲，流的每个数据记录，都被解释为对结果表的插入（Insert）修改。因为流式持续不断的，而且之前的输出结果无法改变。本质上，我们其实是从一个、只有插入操作的changelog（更新日志）流，来构建一个表。</p><p>为了更好地说明动态表和持续查询的概念，我们来举一个具体的例子。</p><p>比如，我们现在的输入数据，就是用户在网站上的访问行为，数据类型（Schema）如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  user:  VARCHAR,   // 用户名</span><br><span class="line">  cTime: TIMESTAMP, // 访问某个URL的时间戳</span><br><span class="line">  url:   VARCHAR    // 用户访问的URL</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>下图显示了如何将访问URL事件流，或者叫点击事件流（左侧）转换为表（右侧）。</p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220214200937.png"></p><p>随着插入更多的访问事件流记录，生成的表将不断增长。</p><h3 id="持续查询（Continuous-Query）"><a href="#持续查询（Continuous-Query）" class="headerlink" title="持续查询（Continuous Query）"></a><strong>持续查询（Continuous Query）</strong></h3><p>持续查询，会在动态表上做计算处理，并作为结果生成新的动态表。与批处理查询不同，连续查询从不终止，并根据输入表上的更新更新其结果表。</p><p>在任何时间点，连续查询的结果在语义上，等同于在输入表的快照上，以批处理模式执行的同一查询的结果。</p><p>在下面的示例中，我们展示了对点击事件流中的一个持续查询。</p><p>这个Query很简单，是一个分组聚合做count统计的查询。它将用户字段上的clicks表分组，并统计访问的url数。图中显示了随着时间的推移，当clicks表被其他行更新时如何计算查询。</p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220214201010.png"></p><h3 id="将动态表转换成流"><a href="#将动态表转换成流" class="headerlink" title="将动态表转换成流"></a><strong>将动态表转换成流</strong></h3><p>与常规的数据库表一样，动态表可以通过插入（Insert）、更新（Update）和删除（Delete）更改，进行持续的修改。将动态表转换为流或将其写入外部系统时，需要对这些更改进行编码。Flink的Table API和SQL支持三种方式对动态表的更改进行编码：</p><h4 id="1）仅追加（Append-only）流"><a href="#1）仅追加（Append-only）流" class="headerlink" title="1）仅追加（Append-only）流"></a><strong>1）仅追加（Append-only）流</strong></h4><p>仅通过插入（Insert）更改，来修改的动态表，可以直接转换为“仅追加”流。这个流中发出的数据，就是动态表中新增的每一行。</p><h4 id="2）撤回（Retract）流"><a href="#2）撤回（Retract）流" class="headerlink" title="2）撤回（Retract）流"></a><strong>2）撤回（Retract）流</strong></h4><p>Retract流是包含两类消息的流，添加（Add）消息和撤回（Retract）消息。</p><p>动态表通过将INSERT 编码为add消息、DELETE 编码为retract消息、UPDATE编码为被更改行（前一行）的retract消息和更新后行（新行）的add消息，转换为retract流。</p><p>下图显示了将动态表转换为Retract流的过程。</p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220214201708.png"> </p><h4 id="3）Upsert（更新插入）流"><a href="#3）Upsert（更新插入）流" class="headerlink" title="3）Upsert（更新插入）流"></a><strong>3）Upsert（更新插入）流</strong></h4><p>Upsert流包含两种类型的消息：Upsert消息和delete消息。转换为upsert流的动态表，需要有唯一的键（key）。</p><p>通过将INSERT和UPDATE更改编码为upsert消息，将DELETE更改编码为DELETE消息，就可以将具有唯一键（Unique Key）的动态表转换为流。</p><p>下图显示了将动态表转换为upsert流的过程。</p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220214201105.png"></p><p>这些概念我们之前都已提到过。需要注意的是，在代码里将动态表转换为DataStream时，仅支持Append和Retract流。而向外部系统输出动态表的TableSink接口，则可以有不同的实现，比如之前我们讲到的ES，就可以有Upsert模式。</p><h2 id="时间特性"><a href="#时间特性" class="headerlink" title="时间特性"></a><strong>时间特性</strong></h2><p>基于时间的操作（比如Table API和SQL中窗口操作），需要定义相关的时间语义和时间数据来源的信息。所以，Table可以提供一个逻辑上的时间字段，用于在表处理程序中，指示时间和访问相应的时间戳。</p><p>时间属性，可以是每个表schema的一部分。一旦定义了时间属性，它就可以作为一个字段引用，并且可以在基于时间的操作中使用。</p><p>时间属性的行为类似于常规时间戳，可以访问，并且进行计算。</p><h3 id="处理时间（Processing-Time）"><a href="#处理时间（Processing-Time）" class="headerlink" title="处理时间（Processing Time）"></a><strong>处理时间（Processing Time）</strong></h3><p>处理时间语义下，允许表处理程序根据机器的本地时间生成结果。它是时间的最简单概念。它既不需要提取时间戳，也不需要生成watermark。</p><p>定义处理时间属性有三种方法：在DataStream转化时直接指定；在定义Table Schema时指定；在创建表的DDL中指定。</p><h4 id="1-DataStream转化成Table时指定"><a href="#1-DataStream转化成Table时指定" class="headerlink" title="1) DataStream转化成Table时指定"></a><strong>1)</strong> <em>DataStream转化成Table时指定</em></h4><p>由DataStream转换成表时，可以在后面指定字段名来定义Schema。在定义Schema期间，可以使用.proctime，定义处理时间字段。</p><p>注意，这个proctime属性只能通过附加逻辑字段，来扩展物理schema。因此，只能在schema定义的末尾定义它。</p><p>代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 定义好 DataStream</span><br><span class="line">DataStream&lt;String&gt; inputStream = env.readTextFile(&quot;\\sensor.txt&quot;)</span><br><span class="line">DataStream&lt;SensorReading&gt; dataStream = inputStream</span><br><span class="line">        .map( line -&gt; &#123;</span><br><span class="line">            String[] fields = line.split(&quot;,&quot;);</span><br><span class="line">            return new SensorReading(fields[0], new Long(fields[1]), new Double(fields[2]));</span><br><span class="line">        &#125; );</span><br><span class="line"></span><br><span class="line">// 将 DataStream转换为 Table，并指定时间字段</span><br><span class="line">Table sensorTable = tableEnv.fromDataStream(dataStream, &quot;id, temperature, timestamp, pt.proctime&quot;);</span><br></pre></td></tr></table></figure><h4 id="2-定义Table-Schema时指定"><a href="#2-定义Table-Schema时指定" class="headerlink" title="2) 定义Table Schema时指定"></a><strong>2)</strong> <strong>定义Table Schema时指定</strong></h4><p>这种方法其实也很简单，只要在定义Schema的时候，加上一个新的字段，并指定成proctime就可以了。</p><p>代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">tableEnv.connect(</span><br><span class="line">  new FileSystem().path(&quot;..\\sensor.txt&quot;))</span><br><span class="line">  .withFormat(new Csv())</span><br><span class="line">  .withSchema(new Schema()</span><br><span class="line">    .field(&quot;id&quot;, DataTypes.STRING())</span><br><span class="line">    .field(&quot;timestamp&quot;, DataTypes.BIGINT())</span><br><span class="line">    .field(&quot;temperature&quot;, DataTypes.DOUBLE())</span><br><span class="line">    .field(&quot;pt&quot;, DataTypes.TIMESTAMP(3))</span><br><span class="line">      .proctime()    // 指定 pt字段为处理时间</span><br><span class="line">  ) // 定义表结构</span><br><span class="line">  .createTemporaryTable(&quot;inputTable&quot;); // 创建临时表</span><br></pre></td></tr></table></figure><h4 id="3-创建表的DDL中指定"><a href="#3-创建表的DDL中指定" class="headerlink" title="3) 创建表的DDL中指定"></a><strong>3)</strong> <strong>创建表的DDL中指定</strong></h4><p>在创建表的DDL中，增加一个字段并指定成proctime，也可以指定当前的时间字段。</p><p>代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">String sinkDDL = &quot;create table dataTable (&quot; +</span><br><span class="line">        &quot; id varchar(20) not null, &quot; +</span><br><span class="line">        &quot; ts bigint, &quot; +</span><br><span class="line">        &quot; temperature double, &quot; +</span><br><span class="line">        &quot; pt AS PROCTIME() &quot; +</span><br><span class="line">        &quot;) with (&quot; +</span><br><span class="line">        &quot; &#x27;connector.type&#x27; = &#x27;filesystem&#x27;, &quot; +</span><br><span class="line">        &quot; &#x27;connector.path&#x27; = &#x27;/sensor.txt&#x27;, &quot; +</span><br><span class="line">        &quot; &#x27;format.type&#x27; = &#x27;csv&#x27;)&quot;;</span><br><span class="line"></span><br><span class="line">tableEnv.sqlUpdate(sinkDDL);</span><br></pre></td></tr></table></figure><p>注意：运行这段DDL，必须使用Blink Planner。</p><h3 id="事件时间（Event-Time）"><a href="#事件时间（Event-Time）" class="headerlink" title="事件时间（Event Time）"></a><strong>事件时间（Event Time）</strong></h3><p>事件时间语义，允许表处理程序根据每个记录中包含的时间生成结果。这样即使在有乱序事件或者延迟事件时，也可以获得正确的结果。</p><p>为了处理无序事件，并区分流中的准时和迟到事件；Flink需要从事件数据中，提取时间戳，并用来推进事件时间的进展（watermark）。</p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220214201354.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">DataStream&lt;String&gt; inputStream = env.readTextFile(&quot;\\sensor.txt&quot;)</span><br><span class="line">DataStream&lt;SensorReading&gt; dataStream = inputStream</span><br><span class="line">        .map( line -&gt; &#123;</span><br><span class="line">            String[] fields = line.split(&quot;,&quot;);</span><br><span class="line">            return new SensorReading(fields[0], new Long(fields[1]), new Double(fields[2]));</span><br><span class="line">        &#125; )</span><br><span class="line">        .assignTimestampsAndWatermarks(new BoundedOutOfOrdernessTimestampExtractor&lt;SensorReading&gt;(Time.seconds(1)) &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public long extractTimestamp(SensorReading element) &#123;</span><br><span class="line">                return element.getTimestamp() * 1000L;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">Table sensorTable = tableEnv.fromDataStream(dataStream, &quot;id, timestamp.rowtime as ts, temperature&quot;);</span><br></pre></td></tr></table></figure><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220214201454.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">tableEnv.connect(</span><br><span class="line">  new FileSystem().path(&quot;sensor.txt&quot;))</span><br><span class="line">  .withFormat(new Csv())</span><br><span class="line">  .withSchema(new Schema()</span><br><span class="line">    .field(&quot;id&quot;, DataTypes.STRING())</span><br><span class="line">    .field(&quot;timestamp&quot;, DataTypes.BIGINT())</span><br><span class="line">      .rowtime(</span><br><span class="line">        new Rowtime()</span><br><span class="line">          .timestampsFromField(&quot;timestamp&quot;)    // 从字段中提取时间戳</span><br><span class="line">          .watermarksPeriodicBounded(1000)    // watermark延迟1秒</span><br><span class="line">      )</span><br><span class="line">    .field(&quot;temperature&quot;, DataTypes.DOUBLE())</span><br><span class="line">  ) // 定义表结构</span><br><span class="line">  .createTemporaryTable(&quot;inputTable&quot;); // 创建临时表</span><br></pre></td></tr></table></figure><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220214201528.png"></p><p>代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">String sinkDDL = &quot;create table dataTable (&quot; +</span><br><span class="line">        &quot; id varchar(20) not null, &quot; +</span><br><span class="line">        &quot; ts bigint, &quot; +</span><br><span class="line">        &quot; temperature double, &quot; +</span><br><span class="line">        &quot; rt AS TO_TIMESTAMP( FROM_UNIXTIME(ts) ), &quot; +</span><br><span class="line">        &quot; watermark for rt as rt - interval &#x27;1&#x27; second&quot; +</span><br><span class="line">        &quot;) with (&quot; +</span><br><span class="line">        &quot; &#x27;connector.type&#x27; = &#x27;filesystem&#x27;, &quot; +</span><br><span class="line">        &quot; &#x27;connector.path&#x27; = &#x27;/sensor.txt&#x27;, &quot; +</span><br><span class="line">        &quot; &#x27;format.type&#x27; = &#x27;csv&#x27;)&quot;;</span><br><span class="line"></span><br><span class="line">tableEnv.sqlUpdate(sinkDDL);</span><br></pre></td></tr></table></figure><p>这里<strong>FROM_UNIXTIME</strong>是系统内置的时间函数，用来将一个整数（秒数）转换成“YYYY-MM-DD hh:mm:ss”格式（默认，也可以作为第二个String参数传入）的日期时间字符串（date time string）；然后再用<strong>TO_TIMESTAMP</strong>将其转换成Timestamp。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;​            Table API和SQL，本质上还是基于关系型表的操作方式；而关系型表、关系代数，以及SQL本身，一般是有界的，更适合批处理的场景。这就导致在进行流处理的过程中，理解会稍微复杂一些，需要引入一些特殊概念。&lt;/p&gt;</summary>
    
    
    
    <category term="大数据" scheme="http://xubatian.cn/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
    <category term="Flink" scheme="http://xubatian.cn/tags/Flink/"/>
    
  </entry>
  
  <entry>
    <title>Flink 原理与实现: FlinkSQL的Table API 与SQL概念</title>
    <link href="http://xubatian.cn/Flink%20%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E7%8E%B0:%20FlinkSQL%E7%9A%84Table%20API%20%E4%B8%8ESQL%E6%A6%82%E5%BF%B5/"/>
    <id>http://xubatian.cn/Flink%20%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E7%8E%B0:%20FlinkSQL%E7%9A%84Table%20API%20%E4%B8%8ESQL%E6%A6%82%E5%BF%B5/</id>
    <published>2022-02-14T11:00:03.000Z</published>
    <updated>2022-02-14T11:55:02.130Z</updated>
    
    <content type="html"><![CDATA[<h1 id="整体介绍"><a href="#整体介绍" class="headerlink" title="整体介绍"></a>整体介绍</h1><h2 id="Flink-SQL-源码案例"><a href="#Flink-SQL-源码案例" class="headerlink" title="Flink SQL 源码案例"></a>Flink SQL 源码案例</h2><p><a href="https://github.com/ShangBaiShuYao/flink-learning-from-zhisheng/blob/main/flink-1.12.0-Demo/src/main/java/com/shangbaishuyao/demo/FlinkDemo10/">https://github.com/ShangBaiShuYao/flink-learning-from-zhisheng/blob/main/flink-1.12.0-Demo/src/main/java/com/shangbaishuyao/demo/FlinkDemo10/</a>  从FlinkDemo10往后都是</p><h2 id="什么是-Table-API-和-Flink-SQL"><a href="#什么是-Table-API-和-Flink-SQL" class="headerlink" title="什么是 Table API 和 Flink SQL"></a>什么是 Table API 和 Flink SQL</h2><p>Flink本身是批流统一的处理框架，所以Table API和SQL，就是批流统一的上层处理API。<br>目前功能尚未完善，处于活跃的开发阶段。<br>Table API是一套内嵌在Java和Scala语言中的查询API，它允许我们以非常直观的方式，组合来自一些关系运算符的查询（比如select、filter和join）。而对于Flink SQL，就是直接可以在代码中写SQL，来实现一些查询（Query）操作。Flink的SQL支持，基于实现了SQL标准的Apache Calcite（Apache开源SQL解析工具）。<br>无论输入是批输入还是流式输入，在这两套API中，指定的查询都具有相同的语义，得到相同的结果。</p><span id="more"></span><p>Table API和SQL: </p><p>实际上就是把我们一个流变成一个关系型的API.</p><p>如果我们有关系型的API的话.我们的代码变成就非常方便一些.这个和我们所说的hive是一样的.为什么要用hive呢?<strong>本来我们使用SparkCore和MapReduce也是能替代hive的</strong>.但是我们为什么用hive呢?因为我们就是不想写复杂的代码呀!当然了,也是为了以后的数据管理和数据分析方便一些.</p><p>所以我们把这个流变成关系型的API的话.把Data Stream变成关系型的API后,实际上就是方便以后我们对数据进行分析和处理的.而且他的可读性也强一些.</p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220214190035.png"></p><p>​        Table API是流处理和批处理通用的关系型API，Table API可以基于流输入或者批输入来运行而不需要进行任何修改。Table API是SQL语言的超集并专门为Apache Flink设计的，Table API是Scala 和Java语言集成式的API。与常规SQL语言中将查询指定为字符串不同，Table API查询是以Java或Scala中的语言嵌入样式来定义的，具有IDE支持如:自动完成和语法检测。</p><h2 id="需要引入的依赖"><a href="#需要引入的依赖" class="headerlink" title="需要引入的依赖"></a>需要引入的依赖</h2><p>Table API和SQL需要引入的依赖有两个：planner和bridge。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.flink&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;flink-table-planner_2.12&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.10.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.flink&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;flink-table-api-java-bridge_2.12&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.10.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p><strong>flink-table-planner</strong>：planner计划器，是table API最主要的部分，提供了运行时环境和生成程序执行计划的planner；</p><p><strong>flink-table-api-java-bridge</strong>：bridge桥接器，主要负责table API和 DataStream/DataSet API的连接支持，按照语言分java和scala。</p><p>这里的两个依赖，是IDE环境下运行需要添加的；如果是生产环境，lib目录下默认已经有了planner，就只需要有bridge就可以了。</p><p>当然，如果想使用用户自定义函数，或是跟kafka做连接，需要有一个SQL client，这个包含在flink-table-common里。</p><h2 id="两种planner（old-amp-blink）的区别"><a href="#两种planner（old-amp-blink）的区别" class="headerlink" title="两种planner（old &amp; blink）的区别"></a>两种planner（old &amp; blink）的区别</h2><ol><li><p>批流统一：Blink将批处理作业，视为流式处理的特殊情况。所以，blink不支持表和DataSet之间的转换，批处理作业将不转换为DataSet应用程序，而是跟流处理一样，转换为DataStream程序来处理。</p></li><li><p>因为批流统一，Blink planner也不支持BatchTableSource，而使用有界的StreamTableSource代替。</p></li><li><p>Blink planner只支持全新的目录，不支持已弃用的ExternalCatalog。</p></li><li><p>旧planner和Blink planner的FilterableTableSource实现不兼容。旧的planner会把PlannerExpressions下推到filterableTableSource中，而blink planner则会把Expressions下推。</p></li><li><p>基于字符串的键值配置选项仅适用于Blink planner。</p></li><li><p>PlannerConfig在两个planner中的实现不同。</p></li><li><p>Blink planner会将多个sink优化在一个DAG中（仅在TableEnvironment上受支持，而在StreamTableEnvironment上不受支持）。而旧planner的优化总是将每一个sink放在一个新的DAG中，其中所有DAG彼此独立。</p></li><li><p>旧的planner不支持目录统计，而Blink planner支持。</p></li></ol><h1 id="API调用"><a href="#API调用" class="headerlink" title="API调用"></a><strong>API调用</strong></h1><h2 id="基本程序结构"><a href="#基本程序结构" class="headerlink" title="基本程序结构"></a>基本程序结构</h2><p>​        Table API 和 SQL 的程序结构，与流式处理的程序结构类似；也可以近似地认为有这么几步：首先创建执行环境，然后定义source、transform和sink。</p><p>​        具体操作流程如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">StreamTableEnvironment  tableEnv = ...     // 创建表的执行环境</span><br><span class="line"></span><br><span class="line">// 创建一张表，用于读取数据</span><br><span class="line">tableEnv.connect(...).createTemporaryTable(&quot;inputTable&quot;);</span><br><span class="line">// 注册一张表，用于把计算结果输出</span><br><span class="line">tableEnv.connect(...).createTemporaryTable(&quot;outputTable&quot;);</span><br><span class="line"></span><br><span class="line">// 通过 Table API 查询算子，得到一张结果表</span><br><span class="line">Table result = tableEnv.from(&quot;inputTable&quot;).select(...);</span><br><span class="line">// 通过 SQL查询语句，得到一张结果表</span><br><span class="line">Table sqlResult  = tableEnv.sqlQuery(&quot;SELECT ... FROM inputTable ...&quot;);</span><br><span class="line"></span><br><span class="line">// 将结果表写入输出表中</span><br><span class="line">result.insertInto(&quot;outputTable&quot;);</span><br></pre></td></tr></table></figure><h2 id="创建表环境"><a href="#创建表环境" class="headerlink" title="创建表环境"></a><strong>创建表环境</strong></h2><p>创建表环境最简单的方式，就是基于流处理执行环境，调create方法直接创建：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">StreamTableEnvironment tableEnv = StreamTableEnvironment.create(env);</span><br></pre></td></tr></table></figure><p>表环境（TableEnvironment）是flink中集成Table API &amp; SQL的核心概念。它负责:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">注册catalog</span><br><span class="line"></span><br><span class="line">在内部 catalog 中注册表</span><br><span class="line"></span><br><span class="line">执行 SQL 查询</span><br><span class="line"></span><br><span class="line">注册用户自定义函数</span><br><span class="line"></span><br><span class="line">将 DataStream 或 DataSet 转换为表</span><br><span class="line"></span><br><span class="line">保存对 ExecutionEnvironment 或 StreamExecutionEnvironment 的引用</span><br></pre></td></tr></table></figure><p>在创建TableEnv的时候，可以多传入一个EnvironmentSettings或者TableConfig参数，可以用来配置 TableEnvironment的一些特性。</p><p>​        比如，配置老版本的流式查询（Flink-Streaming-Query）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">EnvironmentSettings settings = EnvironmentSettings.newInstance()</span><br><span class="line">  .useOldPlanner()      // 使用老版本planner</span><br><span class="line">  .inStreamingMode()    // 流处理模式</span><br><span class="line">  .build();</span><br><span class="line">StreamTableEnvironment tableEnv = StreamTableEnvironment.create(env, settings);</span><br></pre></td></tr></table></figure><p>基于老版本的批处理环境（Flink-Batch-Query）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ExecutionEnvironment batchEnv = ExecutionEnvironment.getExecutionEnvironment;</span><br><span class="line">BatchTableEnvironment batchTableEnv = BatchTableEnvironment.create(batchEnv);</span><br></pre></td></tr></table></figure><p>基于blink版本的流处理环境（Blink-Streaming-Query）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">EnvironmentSettings bsSettings = EnvironmentSettings.newInstance()</span><br><span class="line">.useBlinkPlanner()</span><br><span class="line">.inStreamingMode().build();</span><br><span class="line">StreamTableEnvironment bsTableEnv = StreamTableEnvironment.create(env, bsSettings);</span><br></pre></td></tr></table></figure><p>基于blink版本的批处理环境（Blink-Batch-Query）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">EnvironmentSettings bbSettings = EnvironmentSettings.newInstance()</span><br><span class="line">.useBlinkPlanner()</span><br><span class="line">.inBatchMode().build();</span><br><span class="line">TableEnvironment bbTableEnv = TableEnvironment.create(bbSettings);</span><br></pre></td></tr></table></figure><h2 id="在Catalog中注册表"><a href="#在Catalog中注册表" class="headerlink" title="在Catalog中注册表"></a>在Catalog中注册表</h2><h3 id="表（Table）的概念"><a href="#表（Table）的概念" class="headerlink" title="表（Table）的概念"></a><strong>表（Table）的概念</strong></h3><p>​        TableEnvironment可以注册目录Catalog，并可以基于Catalog注册表。它会维护一个Catalog-Table表之间的map。</p><p>表（Table）是由一个“标识符”来指定的，由3部分组成：Catalog名、数据库（database）名和对象名（表名）。如果没有指定目录或数据库，就使用当前的默认值。</p><p>表可以是常规的（Table，表），或者虚拟的（View，视图）。常规表（Table）一般可以用来描述外部数据，比如文件、数据库表或消息队列的数据，也可以直接从 DataStream转换而来。视图可以从现有的表中创建，通常是table API或者SQL查询的一个结果。</p><h3 id="连接到文件系统（Csv格式）"><a href="#连接到文件系统（Csv格式）" class="headerlink" title="连接到文件系统（Csv格式）"></a><strong>连接到文件系统（Csv格式）</strong></h3><p>​        连接外部系统在Catalog中注册表，直接调用tableEnv.connect()就可以，里面参数要传入一个ConnectorDescriptor，也就是connector描述器。对于文件系统的connector而言，flink内部已经提供了，就叫做FileSystem()。</p><p>代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">tableEnv</span><br><span class="line">.connect( new FileSystem().path(&quot;sensor.txt&quot;))  // 定义表数据来源，外部连接</span><br><span class="line">  .withFormat(new OldCsv())    // 定义从外部系统读取数据之后的格式化方法</span><br><span class="line">  .withSchema( new Schema()</span><br><span class="line">    .field(&quot;id&quot;, DataTypes.STRING())</span><br><span class="line">    .field(&quot;timestamp&quot;, DataTypes.BIGINT())</span><br><span class="line">    .field(&quot;temperature&quot;, DataTypes.DOUBLE())</span><br><span class="line">  )    // 定义表结构</span><br><span class="line">  .createTemporaryTable(&quot;inputTable&quot;);    // 创建临时表</span><br></pre></td></tr></table></figure><p>这是旧版本的csv格式描述器。由于它是非标的，跟外部系统对接并不通用，所以将被弃用，以后会被一个符合RFC-4180标准的新format描述器取代。新的描述器就叫Csv()，但flink没有直接提供，需要引入依赖flink-csv：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.flink&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;flink-csv&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.10.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>代码非常类似，只需要把withFormat里的OldCsv改成Csv就可以了。</p><h3 id="连接到Kafka"><a href="#连接到Kafka" class="headerlink" title="连接到Kafka"></a><strong>连接到Kafka</strong></h3><p>​        kafka的连接器flink-kafka-connector中，1.10版本的已经提供了Table API的支持。我们可以在 connect方法中直接传入一个叫做Kafka的类，这就是kafka连接器的描述器ConnectorDescriptor。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">tableEnv.connect(</span><br><span class="line">  new Kafka()</span><br><span class="line">    .version(&quot;0.11&quot;) // 定义kafka的版本</span><br><span class="line">    .topic(&quot;sensor&quot;) // 定义主题</span><br><span class="line">    .property(&quot;zookeeper.connect&quot;, &quot;localhost:2181&quot;) </span><br><span class="line">    .property(&quot;bootstrap.servers&quot;, &quot;localhost:9092&quot;)</span><br><span class="line">)</span><br><span class="line">  .withFormat(new Csv())</span><br><span class="line">  .withSchema(new Schema()</span><br><span class="line">  .field(&quot;id&quot;, DataTypes.STRING())</span><br><span class="line">  .field(&quot;timestamp&quot;, DataTypes.BIGINT())</span><br><span class="line">  .field(&quot;temperature&quot;, DataTypes.DOUBLE())</span><br><span class="line">)</span><br><span class="line">  .createTemporaryTable(&quot;kafkaInputTable&quot;);</span><br></pre></td></tr></table></figure><p>​        当然也可以连接到ElasticSearch、MySql、HBase、Hive等外部系统，实现方式基本上是类似的。</p><h2 id="表的查询"><a href="#表的查询" class="headerlink" title="表的查询"></a><strong>表的查询</strong></h2><p>利用外部系统的连接器connector，我们可以读写数据，并在环境的Catalog中注册表。接下来就可以对表做查询转换了。</p><p>Flink给我们提供了两种查询方式：Table API和 SQL。</p><h3 id="Table-API的调用"><a href="#Table-API的调用" class="headerlink" title="Table API的调用"></a><strong>Table API的调用</strong></h3><p>Table API是集成在Scala和Java语言内的查询API。与SQL不同，Table API的查询不会用字符串表示，而是在宿主语言中一步一步调用完成的。</p><p>Table API基于代表一张“表”的Table类，并提供一整套操作处理的方法API。这些方法会返回一个新的Table对象，这个对象就表示对输入表应用转换操作的结果。有些关系型转换操作，可以由多个方法调用组成，构成链式调用结构。例如table.select(…).filter(…)，其中select（…）表示选择表中指定的字段，filter(…)表示筛选条件。</p><p>代码中的实现如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Table sensorTable = tableEnv.from(&quot;inputTable&quot;);</span><br><span class="line"></span><br><span class="line">Table resultTable = senorTable</span><br><span class="line">.select(&quot;id, temperature&quot;)</span><br><span class="line">.filter(&quot;id =&#x27;sensor_1&#x27;&quot;);</span><br></pre></td></tr></table></figure><h3 id="SQL查询"><a href="#SQL查询" class="headerlink" title="SQL查询"></a><strong>SQL查询</strong></h3><p>Flink的SQL集成，基于的是ApacheCalcite，它实现了SQL标准。在Flink中，用常规字符串来定义SQL查询语句。SQL 查询的结果，是一个新的 Table。</p><p>代码实现如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Table resultSqlTable = tableEnv.sqlQuery(&quot;select id, temperature from inputTable where id =&#x27;sensor_1&#x27;&quot;);</span><br></pre></td></tr></table></figure><p>当然，也可以加上聚合操作，比如我们统计每个sensor温度数据出现的个数，做个count统计：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Table aggResultTable = sensorTable</span><br><span class="line">.groupBy(&quot;id&quot;)</span><br><span class="line">.select(&quot;id, id.count as count&quot;);</span><br></pre></td></tr></table></figure><p>SQL的实现：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Table aggResultSqlTable = tableEnv.sqlQuery(&quot;select id, count(id) as cnt from inputTable group by id&quot;);</span><br></pre></td></tr></table></figure><p>这里Table API里指定的字段，前面加了一个单引号’，这是Table API中定义的Expression类型的写法，可以很方便地表示一个表中的字段。</p><p>字段可以直接全部用双引号引起来，也可以用半边单引号+字段名的方式。以后的代码中，一般都用后一种形式。</p><h2 id="将DataStream-转换成表"><a href="#将DataStream-转换成表" class="headerlink" title="将DataStream 转换成表"></a><strong>将DataStream 转换成表</strong></h2><p>Flink允许我们把Table和DataStream做转换：我们可以基于一个DataStream，先流式地读取数据源，然后map成POJO，再把它转成Table。Table的列字段（column fields），就是POJO里的字段，这样就不用再麻烦地定义schema了。</p><h3 id="代码表达"><a href="#代码表达" class="headerlink" title="代码表达"></a><strong>代码表达</strong></h3><p>代码中实现非常简单，直接用tableEnv.fromDataStream()就可以了。默认转换后的 Table schema 和 DataStream 中的字段定义一一对应，也可以单独指定出来。</p><p>这就允许我们更换字段的顺序、重命名，或者只选取某些字段出来，相当于做了一次map操作（或者Table API的 select操作）。</p><p>代码具体如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">DataStream&lt;String&gt; inputStream = env.readTextFile(&quot;sensor.txt&quot;);</span><br><span class="line"></span><br><span class="line">DataStream&lt;SensorReading&gt; dataStream = inputStream</span><br><span class="line">        .map( line -&gt; &#123;</span><br><span class="line">            String[] fields = line.split(&quot;,&quot;);</span><br><span class="line">            return new SensorReading(fields[0], new Long(fields[1]), new Double(fields[2]));</span><br><span class="line">        &#125; );</span><br><span class="line"></span><br><span class="line">Table sensorTable = tableEnv.fromDataStream(dataStream, &quot;id, timestamp.rowtime as ts, temperature&quot;);</span><br></pre></td></tr></table></figure><h3 id="数据类型与-Table-schema的对应"><a href="#数据类型与-Table-schema的对应" class="headerlink" title="数据类型与 Table schema的对应"></a><strong>数据类型与 Table schema的对应</strong></h3><p>在上节的例子中，DataStream 中的数据类型，与表的 Schema 之间的对应关系，是按照类中的字段名来对应的（name-based mapping），所以还可以用as做重命名。</p><p>基于名称的对应：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Table sensorTable = tableEnv.fromDataStream(dataStream, &quot;timestamp as ts, id as myId, temperature&quot;);</span><br></pre></td></tr></table></figure><p>Flink的DataStream和 DataSet API支持多种类型。</p><p>组合类型，比如元组（内置Scala和Java元组）、POJO、Scala case类和Flink的Row类型等，允许具有多个字段的嵌套数据结构，这些字段可以在Table的表达式中访问。其他类型，则被视为原子类型。</p><h2 id="创建临时视图（Temporary-View）"><a href="#创建临时视图（Temporary-View）" class="headerlink" title="创建临时视图（Temporary View）"></a><strong>创建临时视图（Temporary View）</strong></h2><p>创建临时视图的第一种方式，就是直接从DataStream转换而来。同样，可以直接对应字段转换；也可以在转换的时候，指定相应的字段。</p><p>代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tableEnv.createTemporaryView(&quot;sensorView&quot;, dataStream);</span><br><span class="line">tableEnv.createTemporaryView(&quot;sensorView&quot;, dataStream, &quot;id, temperature, timestamp as ts&quot;);</span><br></pre></td></tr></table></figure><p>另外，当然还可以基于Table创建视图：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tableEnv.createTemporaryView(&quot;sensorView&quot;, sensorTable);</span><br></pre></td></tr></table></figure><p>View和Table的Schema完全相同。事实上，在Table API中，可以认为View和Table是等价的。</p><h2 id="输出表"><a href="#输出表" class="headerlink" title="输出表"></a><strong>输出表</strong></h2><p>表的输出，是通过将数据写入 TableSink 来实现的。TableSink 是一个通用接口，可以支持不同的文件格式、存储数据库和消息队列。</p><p>具体实现，输出表最直接的方法，就是通过 Table.insertInto() 方法将一个 Table 写入注册过的 TableSink 中。</p><h3 id="输出到文件"><a href="#输出到文件" class="headerlink" title="输出到文件"></a><strong>输出到文件</strong></h3><p>代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 注册输出表</span><br><span class="line">tableEnv.connect(</span><br><span class="line">  new FileSystem().path(&quot;…\\resources\\out.txt&quot;)</span><br><span class="line">) // 定义到文件系统的连接</span><br><span class="line">  .withFormat(new Csv()) // 定义格式化方法，Csv格式</span><br><span class="line">  .withSchema(new Schema()</span><br><span class="line">  .field(&quot;id&quot;, DataTypes.STRING())</span><br><span class="line">  .field(&quot;temp&quot;, DataTypes.DOUBLE())</span><br><span class="line">) // 定义表结构</span><br><span class="line">  .createTemporaryTable(&quot;outputTable&quot;); // 创建临时表</span><br><span class="line"></span><br><span class="line">resultSqlTable.insertInto(&quot;outputTable&quot;);</span><br></pre></td></tr></table></figure><h3 id="更新模式（Update-Mode）"><a href="#更新模式（Update-Mode）" class="headerlink" title="更新模式（Update Mode）"></a><strong>更新模式（Update Mode）</strong></h3><p>在流处理过程中，表的处理并不像传统定义的那样简单。</p><p>对于流式查询（Streaming Queries），需要声明如何在（动态）表和外部连接器之间执行转换。与外部系统交换的消息类型，由<strong>更新模式</strong>（update mode）指定。</p><p>Flink Table API中的更新模式有以下三种：</p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220214192920.png"></p><h3 id="输出到Kafka"><a href="#输出到Kafka" class="headerlink" title="输出到Kafka"></a><strong>输出到Kafka</strong></h3><p>除了输出到文件，也可以输出到Kafka。我们可以结合前面Kafka作为输入数据，构建数据管道，kafka进，kafka出。</p><p>代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// 输出到 kafka</span><br><span class="line">tableEnv.connect(</span><br><span class="line">  new Kafka()</span><br><span class="line">    .version(&quot;0.11&quot;)</span><br><span class="line">    .topic(&quot;sinkTest&quot;)</span><br><span class="line">    .property(&quot;zookeeper.connect&quot;, &quot;localhost:2181&quot;)</span><br><span class="line">    .property(&quot;bootstrap.servers&quot;, &quot;localhost:9092&quot;)</span><br><span class="line">)</span><br><span class="line">  .withFormat( new Csv() )</span><br><span class="line">  .withSchema( new Schema()</span><br><span class="line">    .field(&quot;id&quot;, DataTypes.STRING())</span><br><span class="line">    .field(&quot;temp&quot;, DataTypes.DOUBLE())</span><br><span class="line">  )</span><br><span class="line">  .createTemporaryTable(&quot;kafkaOutputTable&quot;);</span><br><span class="line"></span><br><span class="line">resultTable.insertInto(&quot;kafkaOutputTable&quot;);</span><br></pre></td></tr></table></figure><h3 id="输出到ElasticSearch"><a href="#输出到ElasticSearch" class="headerlink" title="输出到ElasticSearch"></a><strong>输出到ElasticSearch</strong></h3><p>ElasticSearch的connector可以在upsert（update+insert，更新插入）模式下操作，这样就可以使用Query定义的键（key）与外部系统交换UPSERT/DELETE消息。</p><p>另外，对于“仅追加”（append-only）的查询，connector还可以在append 模式下操作，这样就可以与外部系统只交换insert消息。</p><p>es目前支持的数据格式，只有Json，而flink本身并没有对应的支持，所以还需要引入依赖：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.flink&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;flink-json&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.10.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>代码实现如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// 输出到es</span><br><span class="line">tableEnv.connect(</span><br><span class="line">  new Elasticsearch()</span><br><span class="line">    .version(&quot;6&quot;)</span><br><span class="line">    .host(&quot;localhost&quot;, 9200, &quot;http&quot;)</span><br><span class="line">    .index(&quot;sensor&quot;)</span><br><span class="line">    .documentType(&quot;temp&quot;)</span><br><span class="line">)</span><br><span class="line">  .inUpsertMode()           // 指定是 Upsert 模式</span><br><span class="line">  .withFormat(new Json())</span><br><span class="line">  .withSchema( new Schema()</span><br><span class="line">    .field(&quot;id&quot;, DataTypes.STRING())</span><br><span class="line">    .field(&quot;count&quot;, DataTypes.BIGINT())</span><br><span class="line">  )</span><br><span class="line">  .createTemporaryTable(&quot;esOutputTable&quot;);</span><br><span class="line"></span><br><span class="line">aggResultTable.insertInto(&quot;esOutputTable&quot;);</span><br></pre></td></tr></table></figure><h3 id="输出到MySql"><a href="#输出到MySql" class="headerlink" title="输出到MySql"></a><strong>输出到MySql</strong></h3><p>Flink专门为Table API的jdbc连接提供了flink-jdbc连接器，我们需要先引入依赖：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.flink&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;flink-jdbc_2.12&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.10.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>jdbc连接的代码实现比较特殊，因为没有对应的java/scala类实现ConnectorDescriptor，所以不能直接tableEnv.connect()。不过Flink SQL留下了执行DDL的接口：tableEnv.sqlUpdate()。</p><p>对于jdbc的创建表操作，天生就适合直接写DDL来实现，所以我们的代码可以这样写：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// 输出到 Mysql</span><br><span class="line">String sinkDDL= &quot;create table jdbcOutputTable (&quot; +</span><br><span class="line">        &quot; id varchar(20) not null, &quot; +</span><br><span class="line">        &quot; cnt bigint not null &quot; +</span><br><span class="line">        &quot;) with (&quot; +</span><br><span class="line">        &quot; &#x27;connector.type&#x27; = &#x27;jdbc&#x27;, &quot; +</span><br><span class="line">        &quot; &#x27;connector.url&#x27; = &#x27;jdbc:mysql://localhost:3306/test&#x27;, &quot; +</span><br><span class="line">        &quot; &#x27;connector.table&#x27; = &#x27;sensor_count&#x27;, &quot; +</span><br><span class="line">        &quot; &#x27;connector.driver&#x27; = &#x27;com.mysql.jdbc.Driver&#x27;, &quot; +</span><br><span class="line">        &quot; &#x27;connector.username&#x27; = &#x27;root&#x27;, &quot; +</span><br><span class="line">        &quot; &#x27;connector.password&#x27; = &#x27;123456&#x27; )&quot;;</span><br><span class="line"></span><br><span class="line">tableEnv.sqlUpdate(sinkDDL);    // 执行 DDL创建表</span><br><span class="line">aggResultSqlTable.insertInto(&quot;jdbcOutputTable&quot;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="将表转换成DataStream"><a href="#将表转换成DataStream" class="headerlink" title="将表转换成DataStream"></a><strong>将表转换成DataStream</strong></h2><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220214193149.png"></p><p>代码实现如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">DataStream&lt;Row&gt; resultStream = tableEnv.toAppendStream(resultTable, Row.class);</span><br><span class="line">DataStream&lt;Tuple2&lt;Boolean, Row&gt;&gt; aggResultStream = tableEnv.toRetractStream(aggResultTable, Row.class);</span><br><span class="line"></span><br><span class="line">resultStream.print(&quot;result&quot;);</span><br><span class="line">aggResultStream.print(&quot;aggResult&quot;);</span><br></pre></td></tr></table></figure><p>所以，没有经过groupby之类聚合操作，可以直接用 toAppendStream 来转换；而如果经过了聚合，有更新操作，一般就必须用 toRetractDstream。</p><h2 id="Query的解释和执行"><a href="#Query的解释和执行" class="headerlink" title="Query的解释和执行"></a>Query的解释和执行</h2><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220214193238.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String explaination = tableEnv.explain(resultTable);</span><br><span class="line">System.out.println(explaination);</span><br></pre></td></tr></table></figure><p>Query的解释和执行过程，老planner和blink planner大体是一致的，又有所不同。整体来讲，Query都会表示成一个逻辑查询计划，然后分两步解释：</p><ol><li><p>优化查询计划</p></li><li><p>解释成 DataStream 或者 DataSet程序</p></li></ol><p>而Blink版本是批流统一的，所以所有的Query，只会被解释成DataStream程序；另外在批处理环境TableEnvironment下，Blink版本要到tableEnv.execute()执行调用才开始解释。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;整体介绍&quot;&gt;&lt;a href=&quot;#整体介绍&quot; class=&quot;headerlink&quot; title=&quot;整体介绍&quot;&gt;&lt;/a&gt;整体介绍&lt;/h1&gt;&lt;h2 id=&quot;Flink-SQL-源码案例&quot;&gt;&lt;a href=&quot;#Flink-SQL-源码案例&quot; class=&quot;headerlink&quot; title=&quot;Flink SQL 源码案例&quot;&gt;&lt;/a&gt;Flink SQL 源码案例&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/ShangBaiShuYao/flink-learning-from-zhisheng/blob/main/flink-1.12.0-Demo/src/main/java/com/shangbaishuyao/demo/FlinkDemo10/&quot;&gt;https://github.com/ShangBaiShuYao/flink-learning-from-zhisheng/blob/main/flink-1.12.0-Demo/src/main/java/com/shangbaishuyao/demo/FlinkDemo10/&lt;/a&gt;  从FlinkDemo10往后都是&lt;/p&gt;
&lt;h2 id=&quot;什么是-Table-API-和-Flink-SQL&quot;&gt;&lt;a href=&quot;#什么是-Table-API-和-Flink-SQL&quot; class=&quot;headerlink&quot; title=&quot;什么是 Table API 和 Flink SQL&quot;&gt;&lt;/a&gt;什么是 Table API 和 Flink SQL&lt;/h2&gt;&lt;p&gt;Flink本身是批流统一的处理框架，所以Table API和SQL，就是批流统一的上层处理API。&lt;br&gt;目前功能尚未完善，处于活跃的开发阶段。&lt;br&gt;Table API是一套内嵌在Java和Scala语言中的查询API，它允许我们以非常直观的方式，组合来自一些关系运算符的查询（比如select、filter和join）。而对于Flink SQL，就是直接可以在代码中写SQL，来实现一些查询（Query）操作。Flink的SQL支持，基于实现了SQL标准的Apache Calcite（Apache开源SQL解析工具）。&lt;br&gt;无论输入是批输入还是流式输入，在这两套API中，指定的查询都具有相同的语义，得到相同的结果。&lt;/p&gt;</summary>
    
    
    
    <category term="大数据" scheme="http://xubatian.cn/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
    <category term="Flink" scheme="http://xubatian.cn/tags/Flink/"/>
    
  </entry>
  
  <entry>
    <title>Flink 原理与实现: Flink+Kafka如何实现端到端的exactly-once语义</title>
    <link href="http://xubatian.cn/Flink-%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E7%8E%B0-Flink-Kafka%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E7%AB%AF%E5%88%B0%E7%AB%AF%E7%9A%84exactly-once%E8%AF%AD%E4%B9%89/"/>
    <id>http://xubatian.cn/Flink-%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E7%8E%B0-Flink-Kafka%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E7%AB%AF%E5%88%B0%E7%AB%AF%E7%9A%84exactly-once%E8%AF%AD%E4%B9%89/</id>
    <published>2022-02-14T10:27:01.000Z</published>
    <updated>2022-02-15T03:21:22.267Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220214231316.png"></p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220214164852.png"></p><span id="more"></span><h1 id="Flink和kafka是如何实现端到端的exactly-once的呢"><a href="#Flink和kafka是如何实现端到端的exactly-once的呢" class="headerlink" title="Flink和kafka是如何实现端到端的exactly-once的呢?"></a>Flink和kafka是如何实现端到端的exactly-once的呢?</h1><p>​        ①首先Flink的内部一定是exactly-once的.因为他利用了CheckPoint机制,把状态存盘,发生故障的时候可以从HDFS文件系统中恢复.<br>​        ②如果你的Source是kafka的话.可不可以做到呢?<br>​            可以的.因为kafka的source是可以做到偏移量(offset)重置的.而且可以随意重置.甚至Flink他会自动帮我重置的.就是在故障恢复的时候他会自动帮我重置的.所以代码我都可以不用写.<br>​        ③那Sink,kafka支持什么呢?<br>​            kafka支持两阶段提交.实际上说白了就是真正意义上的事务.<br>这个一个前提条件,就是你必须在kafka的配置文件中设置隔离级别和开启我们kafka的事务.这是kafka的配置,是需要我们自己去配的.他和我们Flink的代码是没有关系的.    </p><p>​           而且我们kafka 的producer的sink本身就继承了这个TwoPhaseCommitSinkFunction(两阶段提交函数). 上面我们说过有两个父类.一个支持预写日志(WAL)的父类GenriceWriteAheadSink模板类,这个模板类就是父类.还有一个是两阶段提价(2PC)的父类TwoPhaseCommitSinkFunction接口.实际上我们kafka的Producer默认就是支持的.如下图所示:</p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220214183024.png"></p><p>所以这个对象<strong>FlinkKafkaProducer011默认就支持两阶段提交</strong>.你只需要把kafka的属性设置好.他就能做到两阶段提交了.所以实际上Flink天生就和kafka结合的.</p><p>​    我们知道，端到端的状态一致性的实现，需要每一个组件都实现，对于Flink + Kafka的数据管道系统（Kafka进、Kafka出）而言，各组件怎样保证exactly-once语义呢？</p><ul><li>内部 —— 利用checkpoint机制，把状态存盘，发生故障的时候可以恢复，保证内部的状态一致性</li><li>source —— kafka consumer作为source，可以将偏移量保存下来，如果后续任务出现了故障，恢复的时候可以由连接器重置偏移量，重新消费数据，保证一致性</li><li>sink —— kafka producer作为sink，采用两阶段提交 sink，需要实现一个 TwoPhaseCommitSinkFunction</li></ul><p>内部的checkpoint机制我们已经有了了解，那source和sink具体又是怎样运行的呢？接下来我们逐步做一个分析。</p><p>我们知道Flink由JobManager协调各个TaskManager进行checkpoint存储，checkpoint保存在 StateBackend中，默认StateBackend是内存级的，也可以改为文件级的进行持久化保存。</p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220214183208.png"></p><p>当 checkpoint 启动时，JobManager 会将检查点分界线（barrier）注入数据流；barrier会在算子间传递下去。</p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220214183224.png"></p><p>每个算子会对当前的状态做个快照，保存到状态后端。对于source任务而言，就会把当前的offset作为状态保存起来。下次从checkpoint恢复时，source任务可以重新提交偏移量，从上次保存的位置开始重新消费数据。</p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220214183240.png"></p><p>每个内部的 transform 任务遇到 barrier 时，都会把状态存到 checkpoint 里。</p><p>sink 任务首先把数据写入外部 kafka，这些数据都属于预提交的事务（还不能被消费）；当遇到 barrier 时，把状态保存到状态后端，并开启新的预提交事务。</p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220214183300.png"></p><p>当所有算子任务的快照完成，也就是这次的 checkpoint 完成时，JobManager 会向所有任务发通知，确认这次 checkpoint 完成。</p><p>当sink 任务收到确认通知，就会正式提交之前的事务，kafka 中未确认的数据就改为“已确认”，数据就真正可以被消费了。</p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220214183318.png"></p><p>所以我们看到，执行过程实际上是一个两段式提交，每个算子执行完成，会进行“预提交”，直到执行完sink操作，会发起“确认提交”，如果执行失败，预提交会放弃掉。</p><p>具体的两阶段提交步骤总结如下：</p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220214183346.png"></p><p>所以我们也可以看到，如果宕机需要通过StateBackend进行恢复，只能恢复所有确认提交的操作。</p><h1 id="选择一个状态后端-state-backend"><a href="#选择一个状态后端-state-backend" class="headerlink" title="选择一个状态后端(state backend)"></a>选择一个状态后端(state backend)</h1><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220214183451.png"></p><p>注意：RocksDB的支持并不直接包含在flink中，需要引入依赖：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.flink&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;flink-statebackend-rocksdb_2.11&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.7.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>设置状态后端为FsStateBackend：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">val env = StreamExecutionEnvironment.getExecutionEnvironment</span><br><span class="line">val checkpointPath: String = ???</span><br><span class="line">val backend = new RocksDBStateBackend(checkpointPath)</span><br><span class="line"></span><br><span class="line">env.setStateBackend(backend)</span><br><span class="line">env.setStateBackend(new FsStateBackend(&quot;file:///tmp/checkpoints&quot;))</span><br><span class="line">env.enableCheckpointing(1000)</span><br><span class="line">// 配置重启策略</span><br><span class="line">env.setRestartStrategy(RestartStrategies.fixedDelayRestart(60, Time.of(10, TimeUnit.SECONDS)))</span><br></pre></td></tr></table></figure><h1 id="探讨"><a href="#探讨" class="headerlink" title="探讨:"></a>探讨:</h1><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220215112031.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220214231316.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220214164852.png&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="大数据" scheme="http://xubatian.cn/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
    <category term="Flink" scheme="http://xubatian.cn/tags/Flink/"/>
    
  </entry>
  
  <entry>
    <title>Flink 原理与实现: Flink的状态编程和容错机制之检查点（checkpoint）</title>
    <link href="http://xubatian.cn/Flink-%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E7%8E%B0-Flink%E7%9A%84%E7%8A%B6%E6%80%81%E7%BC%96%E7%A8%8B%E5%92%8C%E5%AE%B9%E9%94%99%E6%9C%BA%E5%88%B6%E4%B9%8B%E6%A3%80%E6%9F%A5%E7%82%B9%EF%BC%88checkpoint%EF%BC%89/"/>
    <id>http://xubatian.cn/Flink-%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E7%8E%B0-Flink%E7%9A%84%E7%8A%B6%E6%80%81%E7%BC%96%E7%A8%8B%E5%92%8C%E5%AE%B9%E9%94%99%E6%9C%BA%E5%88%B6%E4%B9%8B%E6%A3%80%E6%9F%A5%E7%82%B9%EF%BC%88checkpoint%EF%BC%89/</id>
    <published>2022-02-14T09:03:12.000Z</published>
    <updated>2022-02-14T14:28:15.594Z</updated>
    
    <content type="html"><![CDATA[<p>​        Flink具体如何保证exactly-once呢? 它使用一种被称为”检查点”（checkpoint）的特性，在出现故障时将系统重置回正确状态。下面通过简单的类比来解释检查点的作用。</p><p>​        假设你和两位朋友正在数项链上有多少颗珠子，如下图所示。你捏住珠子，边数边拨，每拨过一颗珠子就给总数加一。你的朋友也这样数他们手中的珠子。当你分神忘记数到哪里时，怎么办呢? 如果项链上有很多珠子，你显然不想从头再数一遍，尤其是当三人的速度不一样却又试图合作的时候，更是如此(比如想记录前一分钟三人一共数了多少颗珠子，回想一下一分钟滚动窗口)。</p><span id="more"></span><p>​    <img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220214170606.png">        </p><p>​        于是，你想了一个更好的办法: 在项链上每隔一段就松松地系上一根有色皮筋，将珠子分隔开; 当珠子被拨动的时候，皮筋也可以被拨动; 然后，你安排一个助手，让他在你和朋友拨到皮筋时记录总数。用这种方法，当有人数错时，就不必从头开始数。相反，你向其他人发出错误警示，然后你们都从上一根皮筋处开始重数，助手则会告诉每个人重数时的起始数值，例如在粉色皮筋处的数值是多少。</p><p>​        Flink检查点的作用就类似于皮筋标记。数珠子这个类比的关键点是: 对于指定的皮筋而言，珠子的相对位置是确定的; 这让皮筋成为重新计数的参考点。总状态(珠子的总数)在每颗珠子被拨动之后更新一次，助手则会保存与每根皮筋对应的检查点状态，如当遇到粉色皮筋时一共数了多少珠子，当遇到橙色皮筋时又是多少。当问题出现时，这种方法使得重新计数变得简单。</p><h1 id="Flink的检查点算法"><a href="#Flink的检查点算法" class="headerlink" title="Flink的检查点算法"></a>Flink的检查点算法</h1><p>Flink检查点:</p><p>①隔一段时间(程序员设置),由JobManager来触发CheckPoint.<br>②CheckPoint保存在JobManager内存里面.</p><p>保存CheckPoint之后就意味着我们程序有一份快照了.比如source5,sum奇数9,偶数6.保存了</p><p>某个子任务挂掉造成整个Job挂掉.重启Job,需要保证状态一致.<br>一致性分为三种级别: ①最多一次②至少一次③精确一次<br>如何保证精确一次? 从上一个检查点开始恢复.从source5,sum奇数9,偶数6.开始恢复.<br>由于你offset是5,那就从5开始重新读.</p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220214222509.png"></p><p>Jobmanger发送Barrier,Barrier里面封装id号, JobManager将barrier发送给每一个source.</p><p>只是将Barrier发送到原来source流里面的数据中了.只是将Barrier插入到流里面了.</p><p>算子接收到Barrier之后马上进行CheckPoint, 即将Barrier之前的offset保存到CheckPoint中. 保存在哪里呢? 保存在状态中,或者说保存在JobManager的内存中.<br>接收到Barrier之后,将offset保存到状态中,同时还要将Barrier以广播的形式发送出去.下面的几个节点都发. 下面的节点,如果有个source的情况下, 其中一个算子接收到Barrier之后,这个算子先暂停工作,将barrier后的数据缓存起来, 到了第二个source的Barrier来了之后在进行CheckPoint.即将offset保存到状态中.</p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220214222807.png"></p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220214171442.png"></p><p>①CheckPoint的Barrier检查点机制确实可以做到Flink内部算子的精确一致. 但是无法做到端到端的一致.<br>如果想要保证端到端的一致就要考虑,source是哪一种source. 比如: source支不支持重置offset.  Kafka可以,kafka是支持offset重置的.  如果是kafka, 再结合CheckPoint就能做到end-to-end,即端到端的精确一致.</p><p>我们到底把CheckPoint保存在哪里?<br><strong>checkPoint数据保存在哪里是由状态后端(state backend)的机制决定的.</strong></p><p>Flink有三种状态后端.<br>实际上有两种情况:<br>没有checkPoint的本地状态保存在TaskManager内存中<br>CheckPoint之后由TaskManager内存上转移到JobManager内存中.<br>即Flink的默认状态保存在TaskManager的JVM内存上,  而CheckPoint的状态保存在JobManager的JVM内存 上. 这是默认情况.</p><p>第一: <strong>memoryStateBackend(内存级状态后端)</strong> ,保存内存中, 将键控状态作为内存中的对象进行管理. 一开始键控状态是存储在TaskManager的JVM堆内存中.<br>因为TaskManager才真正执行任务. 当触发CheckPoint的时候, 他会将键控状态保存到JobManager的JVM内存中.  所以说内存级状态后端是保存在JobManager内存中的.<br>第二:<strong>FsStateBackend(持久化到远程文件系统中,最常用的是HDFS文件系统).</strong><br>第三:<strong>RocksDBStateBackend(RockDB 数据库的状态后端)</strong></p><p>我们用是内存级状态后端比较多,虽然存储在状态中不稳定,但是因为我们JobManager使用zookeeper做了高可用.还有另外一台JobManager存放CheckPoint呀.<br>如果你认为这种还要风险的话,那就使用第二种,存放在文件系统中.</p><p><strong>内存级状态后端和文件系统状态状态后端</strong><br>共同点:<br>他们的算子状态和键控状态都保存在TaskManager的堆内存上.<br>不同点:<br>当触发checkPoint时,内存级状态后端保存在JobManager内存上; 而文件系统状态后端保存在文件系统上.<br>注意: checkPoint之后,TaskManager内存上的还有状态的, 他不会动原来的状态,只是又存了一份而已. 可以理解为存了两份状态.<br>但是RockDB状态后端就不保存在TaskManager的内存上了,而是直接保存在RockDB数据库中.  RockDB是键值对数据库,类似redis,有Flink自己维护.</p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220214171657.png"></p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220214171719.png"></p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220214171738.png"></p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220214171801.png"></p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220214171819.png"></p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220214171838.png"></p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220214171904.png"></p><p><strong>总结CheckPoint原理</strong></p><p>​        首先CheckPoint是由JobManager来发起来开始CheckPoint.由他来发起的话,他就将Barrier发到流里面去.把Barrier发给流.比如:如果当且这个Barrier就插在3的后面4的前面. 而且所有的流都可以插.所以这里暂时不用考虑两个流的情况.因为两个流和一个流实际上是一样的.如下图:</p><p>​    <img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220214171952.png"></p><p>​        直接当Source2不存在就可以了.然后我们也暂时不考虑分组.就直接每一个数据我们做聚合累加.就做这么一个简单的事情.我们就先将一下这个简单的过程.将他讲清楚.如下图:</p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220214172014.png"></p><p>​        现在我们是这种情况:我们不做奇偶的分组了.而是来一个数据就累加,来一个数据就累加.所以这个sum直接做累加.他不是什么累加偶数,累加奇数什么的.而是来一条数据就累加,来一条数据就累加.<br>​        假设JobManager触发了一个CheckPoint,然后他就把这个三角形的Barrier插到数据里面去即插到流里面去.source1呢,刚刚把3收到了.并且把3发出去了.假设把3发出去了.这个之后就收到了一个三角形即Barrier了.<br>收到这个三角形(Barrier)之后呢,马上把当前状态中保存的Offset,再把它保存到CheckPoint里面去.实际上就是把这个Offset保存到CheckPoint里面.<br>​            保存完了之后,他需要做两件事情.<br>​            第一件事情就是把Barrier往外广播.往下一步广播.<br>​            第二件事情就是告诉通知我们的JobManager,我当前Source的这个CheckPoint结束了.<br>​        然后由于他往外广播了,那这个barrier可能是不是又被这个Sum 算子收到了呢?(sum even )那么请问这个Sum算子收到的Barrier一定是在那一条数据后面才能收到的.因为这里不考虑奇偶,所以一定是在3后面才能收到.所以,一开始他收到3的时候他直接做累加.1+2+3=6所以他的状态就是6.如下图所示:</p><p>​    <img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220214172114.png"></p><p>​        因为3进来之后就是1+2+3=6 ,所以状态就是6. 收到3之后马上是不是收到一个Barrier呀.收到Barrier之后.他把这个6(这个6本来就在状态里面了)<br>也是CheckPoint一下.保存到我们的状态后端.然后也是一样.做两件事情.第一件事情:对外广播.第二件事情:通知我的JobManager,我的Sum聚合算子完成了CheckPoint.<br>​        那这里可能会有疑问,就是这个sum这个节点正在做CheckPoint的时候这个source1又有数据来了,即4过来了.4来了怎么办呢?<br>他会把这个4缓存起来.因为我这个CheckPoint还没有做完,所以他把4缓存起来.缓存到哪里呢?缓存到map集合中.那么这个map集合保存到哪里呢?当然是保存到JVM的内存里面.除非这个sum节点的CheckPoint完成了.完成之后呢.他就会从缓存中去把4读进来,再次做聚合.做4的聚合.那你可能会问,这时候5也来了呀?他是按照队列来的,先拿4,再拿5.  5那完之后再次从source里面拿下一个.以此类推.那接下来开始 写到sink里面.写到Sink他也是一样的.他也是按照上面所说的这个过程.一直到所有的节点CheckPoint都完成了最后一次通知我这个JobManager之后,如下图:</p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220214172157.png"></p><p>最后一次通知我这个JobManager之后.我这个JobManager就知道了,整个过程的CheckPoint就已经结束了.也就是说,ID为2的这个CheckPoint就已经结束了.就是这么一个过程.所以两条流和一条流实际上都是一样的.</p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220214172238.png"></p><p>Flink检查点的核心作用是确保状态正确，即使遇到程序中断，也要正确。记住这一基本点之后，我们用一个例子来看检查点是如何运行的。Flink为用户提供了用来定义状态的工具。例如，以下这个Scala程序按照输入记录的第一个字段(一个字符串)进行分组并维护第二个字段的计数状态。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">val stream: DataStream[(String, Int)] = ... </span><br><span class="line">val counts: DataStream[(String, Int)] = stream</span><br><span class="line">.keyBy(record =&gt; record._1)</span><br><span class="line">.mapWithState(  (in: (String, Int), state: Option[Int])  =&gt; </span><br><span class="line">state match &#123; </span><br><span class="line">case Some(c) =&gt; ( (in._1, c + in._2), Some(c + in._2) ) </span><br><span class="line">case None =&gt; ( (in._1, in._2), Some(in._2) )</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>该程序有两个算子: keyBy算子用来将记录按照第一个元素(一个字符串)进行分组，根据该key将数据进行重新分区，然后将记录再发送给下一个算子: 有状态的map算子(mapWithState)。map算子在接收到每个元素后，将输入记录的第二个字段的数据加到现有总数中，再将更新过的元素发射出去。下图表示程序的初始状态: 输入流中的6条记录被检查点分割线(checkpoint barrier)隔开，所有的map算子状态均为0(计数还未开始)。所有key为a的记录将被顶层的map算子处理，所有key为b的记录将被中间层的map算子处理，所有key为c的记录则将被底层的map算子处理。</p><p>图 按key累加计数程序初始状态</p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220214172446.png"></p><p>上图是程序的初始状态。注意，a、b、c三组的初始计数状态都是0，即三个圆柱上的值。ckpt表示检查点分割线（checkpoint barriers）。每条记录在处理顺序上严格地遵守在检查点之前或之后的规定，例如[“b”,2]在检查点之前被处理，[“a”,2]则在检查点之后被处理。</p><p>当该程序处理输入流中的6条记录时，涉及的操作遍布3个并行实例(节点、CPU内核等)。那么，检查点该如何保证exactly-once呢?</p><p>检查点分割线和普通数据记录类似。它们由算子处理，但并不参与计算，而是会触发与检查点相关的行为。当读取输入流的数据源(在本例中与keyBy算子内联)遇到检查点屏障时，它将其在输入流中的位置保存到持久化存储中。如果输入流来自消息传输系统(Kafka)，这个位置就是偏移量。Flink的存储机制是插件化的，持久化存储可以是分布式文件系统，如HDFS。下图展示了这个过程。</p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220214172524.png"></p><p>当Flink数据源(在本例中与keyBy算子内联)遇到检查点分界线（barrier）时，它会将其在输入流中的位置保存到持久化存储中。这让 Flink可以根据该位置重启。</p><p>检查点像普通数据记录一样在算子之间流动。当map算子处理完前3条数据并收到检查点分界线时，它们会将状态以异步的方式写入持久化存储，如下图所示</p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220214172548.png"></p><p>位于检查点之前的所有记录([“b”,2]、[“b”,3]和[“c”,1])被map算子处理之后的情况。此时，持久化存储已经备份了检查点分界线在输入流中的位置(备份操作发生在barrier被输入算子处理的时候)。map算子接着开始处理检查点分界线，并触发将状态异步备份到稳定存储中这个动作。</p><p>当map算子的状态备份和检查点分界线的位置备份被确认之后，该检查点操作就可以被标记为完成，如下图所示。我们在无须停止或者阻断计算的条件下，在一个逻辑时间点(对应检查点屏障在输入流中的位置)为计算状态拍了快照。通过确保备份的状态和位置指向同一个逻辑时间点，后文将解释如何基于备份恢复计算，从而保证exactly-once。值得注意的是，当没有出现故障时，Flink检查点的开销极小，检查点操作的速度由持久化存储的可用带宽决定。回顾数珠子的例子: 除了因为数错而需要用到皮筋之外，皮筋会被很快地拨过。</p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220214172608.png"></p><p>检查点操作完成，状态和位置均已备份到稳定存储中。输入流中的所有数据记录都已处理完成。值得注意的是，备份的状态值与实际的状态值是不同的。备份反映的是检查点的状态。</p><p>如果检查点操作失败，Flink可以丢弃该检查点并继续正常执行，因为之后的某一个检查点可能会成功。虽然恢复时间可能更长，但是对于状态的保证依旧很有力。只有在一系列连续的检查点操作失败之后，Flink才会抛出错误，因为这通常预示着发生了严重且持久的错误。</p><p>现在来看看下图所示的情况: 检查点操作已经完成，但故障紧随其后。</p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220214172719.png"></p><p>在这种情况下，Flink会重新拓扑(可能会获取新的执行资源)，将输入流倒回到上一个检查点，然后恢复状态值并从该处开始继续计算。在本例中，[“a”,2]、[“a”,2]和[“c”,2]这几条记录将被重播。</p><p>下图展示了这一重新处理过程。从上一个检查点开始重新计算，可以保证在剩下的记录被处理之后，得到的map算子的状态值与没有发生故障时的状态值一致。</p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220214172742.png"></p><p>Flink将输入流倒回到上一个检查点屏障的位置，同时恢复map算子的状态值。然后，Flink从此处开始重新处理。这样做保证了在记录被处理之后，map算子的状态值与没有发生故障时的一致。<br>Flink检查点算法的正式名称是异步分界线快照(asynchronous barrier snapshotting)。该算法大致基于Chandy-Lamport分布式快照算法。<br><strong>检查点是Flink最有价值的创新之一，因为它使Flink可以保证exactly-once，并且不需要牺牲性能。</strong></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;​        Flink具体如何保证exactly-once呢? 它使用一种被称为”检查点”（checkpoint）的特性，在出现故障时将系统重置回正确状态。下面通过简单的类比来解释检查点的作用。&lt;/p&gt;
&lt;p&gt;​        假设你和两位朋友正在数项链上有多少颗珠子，如下图所示。你捏住珠子，边数边拨，每拨过一颗珠子就给总数加一。你的朋友也这样数他们手中的珠子。当你分神忘记数到哪里时，怎么办呢? 如果项链上有很多珠子，你显然不想从头再数一遍，尤其是当三人的速度不一样却又试图合作的时候，更是如此(比如想记录前一分钟三人一共数了多少颗珠子，回想一下一分钟滚动窗口)。&lt;/p&gt;</summary>
    
    
    
    <category term="大数据" scheme="http://xubatian.cn/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
    <category term="Flink" scheme="http://xubatian.cn/tags/Flink/"/>
    
  </entry>
  
  <entry>
    <title>Flink 原理与实现: Flink的状态编程和容错机制之状态一致性</title>
    <link href="http://xubatian.cn/Flink-%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E7%8E%B0-Flink%E7%9A%84%E7%8A%B6%E6%80%81%E7%BC%96%E7%A8%8B%E5%92%8C%E5%AE%B9%E9%94%99%E6%9C%BA%E5%88%B6%E4%B9%8B%E7%8A%B6%E6%80%81%E4%B8%80%E8%87%B4%E6%80%A7/"/>
    <id>http://xubatian.cn/Flink-%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E7%8E%B0-Flink%E7%9A%84%E7%8A%B6%E6%80%81%E7%BC%96%E7%A8%8B%E5%92%8C%E5%AE%B9%E9%94%99%E6%9C%BA%E5%88%B6%E4%B9%8B%E7%8A%B6%E6%80%81%E4%B8%80%E8%87%B4%E6%80%A7/</id>
    <published>2022-02-14T08:40:53.000Z</published>
    <updated>2022-02-14T08:52:56.661Z</updated>
    
    <content type="html"><![CDATA[<p>当在分布式系统中引入状态时，自然也会导致一系列的问题.如:</p><p>​    一致性问题.</p><p>什么叫一致性问题呢?</p><p><strong>就是不管你这个任务是失败了,还是中间出错了,还是暂停了,还是重复启动了.我要保证所有数据,不管在那种情况下发生,数据都是准确的或者说结果一定是准确的.这就叫所谓的状态一致.</strong></p><p>你要想保证结果准确,首先你就要保证的就是状态一致.所以状态一致就是为了保证最后结果的准确.</p><p>一致性的级别在我们Flink中分为三种.</p><span id="more"></span><h1 id="一致性-级别分为3种"><a href="#一致性-级别分为3种" class="headerlink" title="一致性(级别分为3种)"></a>一致性(级别分为3种)</h1><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220214164400.png"></p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220214164425.png"></p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220214164506.png"></p><h1 id="端到端（end-to-end）状态一致性"><a href="#端到端（end-to-end）状态一致性" class="headerlink" title="端到端（end-to-end）状态一致性"></a>端到端（end-to-end）状态一致性</h1><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220214164634.png"></p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220214164658.png"></p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220214164829.png"></p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220214164852.png"></p><p>如下图所示:</p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220214164911.png"></p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220214164935.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;当在分布式系统中引入状态时，自然也会导致一系列的问题.如:&lt;/p&gt;
&lt;p&gt;​    一致性问题.&lt;/p&gt;
&lt;p&gt;什么叫一致性问题呢?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;就是不管你这个任务是失败了,还是中间出错了,还是暂停了,还是重复启动了.我要保证所有数据,不管在那种情况下发生,数据都是准确的或者说结果一定是准确的.这就叫所谓的状态一致.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;你要想保证结果准确,首先你就要保证的就是状态一致.所以状态一致就是为了保证最后结果的准确.&lt;/p&gt;
&lt;p&gt;一致性的级别在我们Flink中分为三种.&lt;/p&gt;</summary>
    
    
    
    <category term="大数据" scheme="http://xubatian.cn/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
    <category term="Flink" scheme="http://xubatian.cn/tags/Flink/"/>
    
  </entry>
  
  <entry>
    <title>Flink 原理与实现: Flink的状态编程和容错机制之算子状态和键控状态</title>
    <link href="http://xubatian.cn/Flink%20%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E7%8E%B0:%20Flink%E7%9A%84%E7%8A%B6%E6%80%81%E7%BC%96%E7%A8%8B%E5%92%8C%E5%AE%B9%E9%94%99%E6%9C%BA%E5%88%B6%E4%B9%8B%E7%AE%97%E5%AD%90%E7%8A%B6%E6%80%81%E5%92%8C%E9%94%AE%E6%8E%A7%E7%8A%B6%E6%80%81/"/>
    <id>http://xubatian.cn/Flink%20%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E7%8E%B0:%20Flink%E7%9A%84%E7%8A%B6%E6%80%81%E7%BC%96%E7%A8%8B%E5%92%8C%E5%AE%B9%E9%94%99%E6%9C%BA%E5%88%B6%E4%B9%8B%E7%AE%97%E5%AD%90%E7%8A%B6%E6%80%81%E5%92%8C%E9%94%AE%E6%8E%A7%E7%8A%B6%E6%80%81/</id>
    <published>2022-02-14T08:08:20.000Z</published>
    <updated>2022-02-14T08:39:24.246Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Flink的状态编程概述"><a href="#Flink的状态编程概述" class="headerlink" title="Flink的状态编程概述"></a>Flink的状态编程概述</h1><p>​    在我们的Flink中,他默认就是有状态的.他和spark的一个本质的区别.有状态,但是他的状态是如何分布的呢?<br>​            <strong>状态分为两类: 算子状态(operator state)和键控状态(keyed state)</strong></p><p>​    算子状态: </p><p>​            是由Flink每一个子任务自己把任务运行过程中的一些业务或者逻辑或者数据,由自己来保存的或者说由自己来管理的,这样的状态称为算子状态.</p><p>​            所以算子状态的作用范围是限定为当前的算子任务的.</p><p>​            什么叫算子任务啊?</p><span id="more"></span><p>​            比如如下图:<img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220214160955.png"></p><p>​            如图所示: sum()就是一个算子.这个算子里面在真正运行的过程中要看你这里写的并行度是多少.假设我这里定义的并行度setParallelism(2)是2.如图所示:</p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220214161028.png"></p><p>​        如图所示:图上这句话的意思就是表示,我的这个sum()算子他有两个子任务.因为他有两个并行度.所以他就有两个子任务.这意味着由同一并行任务所处理的所有数据都可以访问到相同的状态，<strong>状态对于同一任务而言是共享的。但是算子状态不能由相同或不同算子的另一个任务访问</strong>。这是什么意思呢?如下图所以:就以下图sum()为例,因为我们知道下图这个sum()一定是用到状态了.</p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220214161059.png"></p><p>​        如图所示: 如果我给这个sum()的并行度设置为2.就意味着这个sum()这个算子有两个subtask即子任务.他是这样子的: 就是他每一个subtask(子任务)都有各自所管理的算子状态.</p><p>​        就算你这两个subtask(子任务)都属于同一个算子.他也是不能够相互访问的.他是不能访问另外一个的.所以所谓的作用范围其实就是限定当前算子的子任务的.如下图所示:</p><p>​        <img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220214161121.png"></p><p>而我们这样的<strong>算子状态</strong>呢,他有三种基本数据的存储结构.这所说的是算子管理的这些状态有三个存储方式.</p><p>​        第一种是<strong>列表状态(List state)</strong>:就是说我们的算子状态中的数据是使用列表的方式.是存在一个列表里面的.把整个算子的所有数据以一组列表的方式存储起来.</p><p>​        第二种是<strong>联合列表状态(Union List State)</strong>:他也是以列表来存放算子状态的所有的数据.他和前面列表状态的区别是: 在发生故障时,或者从保存点启动应用程序去恢复数据的时候,他的运行代码不同.</p><p>​        第三种是<strong>广播状态(Broadcast state)</strong>:广播状态的意思就是说.我现在有一个算子.这个算子里面呢,他有一些数据或者说有一些逻辑,这个逻辑呢,其他的算子也是会用得到这个逻辑的.或者说这个数据,其他的算子也会用得到.那怎么办呢? 我们前面讲过,算子和算子之间的任务是不能共享的.这个时候呢,我们可以把这个状态存为一种广播状态,存为广播状态的话,这种情况下,他会把状态数据往其他的子任务上去发.这样的话,其他任务上也会有这个所谓的状态数据了.</p><p>​        不管怎么说,这个算子状态一般情况下是不能由程序员来控制的.(这个我们只需要知道就OK了). 而真正能由程序员控制的状态是键控状态(Keyed state),所谓键控状态(Keyed State)就是说我们这个状态只会依赖于数据中的键来进行维护和存储的.这种称之为键控状态.那我们马上就想到,我们sum()这个算子里面存的每一个单词,存的每一个单词里面的数据,实际上就是一种键控状态.如图所示:</p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220214161229.png"></p><p>​        因为他是根据数据流中定义的键来进行维护和管理的,那我们访问的时候也是根据键来进行访问.<strong>Flink为每一个键值维护一个状态实例,让你每次可以修改或者你可以根据键去访问</strong>,<strong>当然删除实际上也是可以删除,删除实际上我们调用一下clear()就可以了.这样的一个键控状态(Keyed state )的数据有点类似于一个分布式的键值对(keyed-value)的map数据结构</strong>.为什么叫分布式的呢?因为我们有很多并行度,每个并行度很有可能一直在多个不同的slot上运行.slot是一个线程.那么这个slot这个线程所在的JVM里面就会保存这个状态信息.保存这个键控状态(Keyed state)的值.键控状态的值是以键值对进行存储的. 你的键就是你数据中定义的那个键. <strong>你这个键在某一个JVM中存放了,他有可能还会在另外一个TaskManager的JVM上再存一个吗? 不会的</strong>.所以,其他的TaskManager上所存放的这些状态是可能有其他的键.那么对整个集群而言就是一个分布式的Key-Value数据结构.而且是惟一的Key.就算是分布式的也是一个唯一的Key.刚才我们已经说了,一个key他只会在某一台TaskManager上的JVM所管理的内存里面存放的.至于这个数据存放,后面会说.</p><p>​        当然,我们的Key-Value(键控状态)也是有所谓的数据结构的.它存储的数据结构呢有这么几种:</p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220214161422.png"></p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220214161438.png"></p><p>​            <strong>流式计算分为无状态和有状态两种情况</strong>。无状态的计算观察每个独立事件，并根据最后一个事件输出结果。例如，流处理应用程序从传感器接收温度读数，并在温度超过90度时发出警告。有状态的计算则会基于多个事件输出结果。以下是一些例子。</p><p>​            所有类型的窗口。例如，计算过去一小时的平均温度，就是有状态的计算。</p><p>​            所有用于复杂事件处理的状态机。例如，若在一分钟内收到两个相差20度以上的温度读数，则发出警告，这是有状态的计算。</p><p>​            流与流之间的所有关联操作，以及流与静态表或动态表之间的关联操作，都是有状态的计算。</p><p>​            下图展示了无状态流处理和有状态流处理的主要区别。无状态流处理分别接收每条数据记录(图中的黑条)，然后根据最新输入的数据生成输出数据(白条)。有状态流处理会维护状态(根据每条输入记录进行更新)，并基于最新输入的记录和当前的状态值生成输出记录(灰条)。</p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220214161603.png"></p><p>上图中输入数据由黑条表示。无状 态流处理每次只转换一条输入记录，并且仅根据最新的输入记录输出结果(白条)。有状态 流处理维护所有已处理记录的状态值，并根据每条新输入的记录更新状态，因此输出记录(灰条)反映的是综合考虑多个事件之后的结果。</p><p>尽管无状态的计算很重要，但是流处理对有状态的计算更感兴趣。事实上，正确地实现有状态的计算比实现无状态的计算难得多。旧的流处理系统并不支持有状态的计算，而新一代的流处理系统则将状态及其正确性视为重中之重。</p><h1 id="有状态的算子和应用程序"><a href="#有状态的算子和应用程序" class="headerlink" title="有状态的算子和应用程序"></a>有状态的算子和应用程序</h1><p>​        Flink内置的很多算子，数据源source，数据存储sink都是有状态的，流中的数据都是buffer records，会保存一定的元素或者元数据。例如: ProcessWindowFunction会缓存输入流的数据，ProcessFunction会保存设置的定时器信息等等。</p><p>在Flink中，状态始终与特定算子相关联。总的来说，有两种类型的状态：</p><pre><code>     算子状态（operator state）     键控状态（keyed state）</code></pre><h2 id="算子状态（operator-state）"><a href="#算子状态（operator-state）" class="headerlink" title="算子状态（operator state）"></a>算子状态（operator state）</h2><p>​        算子状态的作用范围限定为算子任务。这意味着由同一并行任务所处理的所有数据都可以访问到相同的状态，状态对于同一任务而言是共享的。算子状态不能由相同或不同算子的另一个任务访问。</p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220214161855.png"></p><h2 id="键控状态（keyed-state）"><a href="#键控状态（keyed-state）" class="headerlink" title="键控状态（keyed state）"></a>键控状态（keyed state）</h2><p>​        键控状态是根据输入数据流中定义的键（key）来维护和访问的。Flink为每个键值维护一个状态实例，并将具有相同键的所有数据，都分区到同一个算子任务中，这个任务会维护和处理这个key对应的状态。当任务处理一条数据时，它会自动将状态的访问范围限定为当前数据的key。因此，具有相同key的所有数据都会访问相同的状态。Keyed State很类似于一个分布式的key-value map数据结构，只能用于KeyedStream（keyBy算子处理之后）。</p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220214162021.png"></p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220214162040.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">val sensorData: DataStream[SensorReading] = ...</span><br><span class="line">val keyedData: KeyedStream[SensorReading, String] = sensorData.keyBy(_.id)</span><br><span class="line">val alerts: DataStream[(String, Double, Double)] = keyedData</span><br><span class="line">.flatMap(new TemperatureAlertFunction(1.7))</span><br><span class="line">class TemperatureAlertFunction(val threshold: Double) extends RichFlatMapFunction[SensorReading, (String, Double, Double)] &#123;</span><br><span class="line">//定义一个值状态</span><br><span class="line">private var lastTempState: ValueState[Double] = _</span><br><span class="line">override def open(parameters: Configuration): Unit = &#123;</span><br><span class="line">val lastTempDescriptor = new ValueStateDescriptor[Double](&quot;lastTemp&quot;, classOf[Double])</span><br><span class="line">lastTempState = getRuntimeContext.getState[Double](lastTempDescriptor)</span><br><span class="line">&#125;</span><br><span class="line">override def flatMap(reading: SensorReading,</span><br><span class="line">out: Collector[(String, Double, Double)]): Unit = &#123;</span><br><span class="line">val lastTemp = lastTempState.value()</span><br><span class="line">val tempDiff = (reading.temperature - lastTemp).abs</span><br><span class="line">if (tempDiff &gt; threshold) &#123;</span><br><span class="line">out.collect((reading.id, reading.temperature, tempDiff))</span><br><span class="line">&#125;</span><br><span class="line">this.lastTempState.update(reading.temperature)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过RuntimeContext注册StateDescriptor。StateDescriptor以状态state的名字和存储的数据类型为参数。</p><p>在open()方法中创建state变量。注意复习之前的RichFunction相关知识。</p><p>接下来我们使用了FlatMap with keyed ValueState的快捷方式flatMapWithState实现以上需求。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">val alerts: DataStream[(String, Double, Double)] = keyedSensorData</span><br><span class="line">  .flatMapWithState[(String, Double, Double), Double] &#123;</span><br><span class="line">    case (in: SensorReading, None) =&gt;</span><br><span class="line">      (List.empty, Some(in.temperature))</span><br><span class="line">    case (r: SensorReading, lastTemp: Some[Double]) =&gt;</span><br><span class="line">      val tempDiff = (r.temperature - lastTemp.get).abs</span><br><span class="line">      if (tempDiff &gt; 1.7) &#123;</span><br><span class="line">        (List((r.id, r.temperature, tempDiff)), Some(r.temperature))</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        (List.empty, Some(r.temperature))</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Flink的状态编程概述&quot;&gt;&lt;a href=&quot;#Flink的状态编程概述&quot; class=&quot;headerlink&quot; title=&quot;Flink的状态编程概述&quot;&gt;&lt;/a&gt;Flink的状态编程概述&lt;/h1&gt;&lt;p&gt;​    在我们的Flink中,他默认就是有状态的.他和spark的一个本质的区别.有状态,但是他的状态是如何分布的呢?&lt;br&gt;​            &lt;strong&gt;状态分为两类: 算子状态(operator state)和键控状态(keyed state)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​    算子状态: &lt;/p&gt;
&lt;p&gt;​            是由Flink每一个子任务自己把任务运行过程中的一些业务或者逻辑或者数据,由自己来保存的或者说由自己来管理的,这样的状态称为算子状态.&lt;/p&gt;
&lt;p&gt;​            所以算子状态的作用范围是限定为当前的算子任务的.&lt;/p&gt;
&lt;p&gt;​            什么叫算子任务啊?&lt;/p&gt;</summary>
    
    
    
    <category term="大数据" scheme="http://xubatian.cn/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
    <category term="Flink" scheme="http://xubatian.cn/tags/Flink/"/>
    
  </entry>
  
  <entry>
    <title>Flink 原理与实现: Flink的ProcessFunction API（底层API）</title>
    <link href="http://xubatian.cn/Flink-%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E7%8E%B0-Flink%E7%9A%84ProcessFunction-API%EF%BC%88%E5%BA%95%E5%B1%82API%EF%BC%89/"/>
    <id>http://xubatian.cn/Flink-%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E7%8E%B0-Flink%E7%9A%84ProcessFunction-API%EF%BC%88%E5%BA%95%E5%B1%82API%EF%BC%89/</id>
    <published>2022-02-14T07:44:22.000Z</published>
    <updated>2022-02-14T08:05:53.264Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Flink底层API概述"><a href="#Flink底层API概述" class="headerlink" title="Flink底层API概述"></a>Flink底层API概述</h1><p>ProcessFunction API是属于Flink三层API中最底层的一层API.最底层的API意味着什么呢?</p><p>​        顾名思义就是我们可以做任何你想要做的任何事情.你可以理解为底层的API我们想要处理一些细腻化的操作,或者要处理一些特殊的业务.我如果使用高级的API ,DataStream API已经搞定不了的情况下.最后呢,我们就可以是用ProcessFunction API. ProcessFunction API是属于我们Flink里面最底层的转换算子.在这个最底层的转换算子中.我们可以有很多的工作可以做.或者有很多的功能可以完成.可以访问时间戳.那我们访问的时间戳是什么时间戳呢?是处理的时间戳.也可以是当前进来的那条数据的时间戳.那么当前进来的时间戳和处理的时间戳我们不是可以使用system.currenttimemillis()吗?但是这个时候我们使用这个是不准确的.<strong>你要想访问准确的时间的话.我们就可以使用底层的API.他就给我们提供了一个方法.我们可以访问watermark,还可以查看当前的水位线.水位线实际上是这样的,就是他每个两百毫秒调用一次.是需要更新这个水位线的.因为水位线有两种.</strong></p><p>一种是周期性的水位线.<br>还有一种是间断性的水位线.</p><p>周期性的水位线就是说我每隔多长时间来更新一下或者设置一下这个新的水位线.就是这个意思.那么当前<strong>最新的水位线是多少我们都可以通过在底层API中去拿到</strong>.甚至我们还可以<strong>注册定时的事件.</strong></p><p>什么叫注册定时的事件呢?</p><p>​    比如说:我们到达某一个条件之后我想触发一个事件.触发一个新的事件.这个事件我规定你在三秒钟之后你给我执行.那么在三秒钟还没到的时候我就有必要把这个事件注册一下.注册之后,从现在开始到三秒钟之后他会自动触发.所以你可以理解为定义,我们定义一个马上过一段时间要触发的一个事件.</p><p>​        还可以输出一个特定的一些事件.比如说超时的一些事件.什么意思呢?比如说我们现在正在处理数据.假设处理数据的时候我们发现可能某一个条件还没成熟.那么没关系,我们可以在几秒钟之后设置一个超时时间.在几秒钟之后我们再进行处理.这就是所谓的超时时间.</p><p><strong>实际上几秒钟之后再处理的话,也是需要注册一个定时事件的</strong>.因为你要注册一个处理的时间,多长时间之后再进行处理.这些都是原来我们的API所无法做到的.那我们就可以通过ProcessFunction API这个底层的API来进行处理.</p><span id="more"></span><p><strong>Flink给我们提供了8中ProcessFunction API.</strong></p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220214154851.png"></p><p>这些窗口函数说白了就是一个个的对象,看着像函数,实际上他是对象.或者说就是一个类.那我们要用的话是声明一个匿名方法吗?不是的,是声明一个匿名函数吗?不是的.而是你需要写一个类去继承这8个ProcessFunction.他是我们真正的窗口函数类.如果你要把前面的知识点串联起来的话.</p><p>Flink里面我们提供了三种函数类</p><p>匿名函数不好</p><p>一个是普通的函数类.</p><p>第二个是富函数类.</p><p>第三个是底层处理的函数类.</p><p>所以我们有三种函数类.这块儿函数类有一个特点,他不是说你要声明写一个匿名函数就可以了.而是你必须要写一个类去继承他.</p><p>这里最常用的是ProcessFunction和KeyedProcessFunction.</p><p>下面以KeyedProcessFunction举例子.</p><p>​        我们之前学习的转换算子是无法访问事件的时间戳信息和水位线信息的。而这在一些应用场景下，极为重要。例如MapFunction这样的map转换算子就无法访问时间戳或者当前事件的事件时间。<br>​        基于此，DataStream API提供了一系列的Low-Level(底层的)转换算子。可以访问时间戳、watermark以及注册定时事件。还可以输出特定的一些事件，例如超时事件等。Process Function用来构建事件驱动的应用以及实现自定义的业务逻辑(使用之前的window函数和转换算子无法实现)。例如，Flink SQL就是使用Process Function实现的。<br>Flink提供了8个Process Function：<br>ProcessFunction<br>KeyedProcessFunction<br>CoProcessFunction<br>ProcessJoinFunction<br>BroadcastProcessFunction<br>KeyedBroadcastProcessFunction<br>ProcessWindowFunction<br>ProcessAllWindowFunction</p><h1 id="KeyedProcessFunction"><a href="#KeyedProcessFunction" class="headerlink" title="KeyedProcessFunction"></a>KeyedProcessFunction</h1><p><strong>这里以KeyedProcessFunction举例,因为他用的最多.上面的这8个ProcessFunction API即底层API,都是按照下面连个案例去操作的.</strong></p><p>​        以下例子说明,就是你可以通过这个Process Function中,拿到你想要拿到的任何东西,包括你对侧输出流的管理,包括你对当前的运行时间还有当前的watermark,当前的TimerService(时间服务),TimerService里面又可以注册一个触发器,并且还可以删除一个触发器.总之一句话,就是底层的ProcessFunction提供了所有你想要拿到的东西.都可以在底层的ProcessFunction API里面拿</p><p>​        KeyedProcessFunction是专门用来操作KeyedStream的.只会操作KeyedStream.</p><p>​        KeyedProcessFunction他会处理我们流的每一个元素.可以输出多个元素.也可以输出0个,也可以输出1个.这个我们之前说的DataStream API里面的处理函数或者转换函数不一样的.比如我们在DataStream中说的FlatMap这个处理函数(注意:处理函数就是所谓的转换函数),这里FlatMap他是把一条数据变成n条数据,即把一个元素转换成多个元素.还有一个,比如说map算子,map算子就是把一条数据通过map输出一条数据.我们可不可以用map算子来把一条数输出0条数据呢?(0个元素就代表不输出的意思.) 请问可以这样做吗?不可以的.那为什么我们后面不能输出null呢?输出null不就是代表不输出了呢?因为null也是等于0的呀!因为我们的map是要申明类型的,一个输入类型,一个输出类型.那我们写代码的时候输出一个null不就行了嘛?你什么代码也不写,这是不行的,因为这个代码是必须有返回值的.你这个方法声明的返回值你却没有返回任何东西的话,你的语法就通不过,然后他的编译也通不过.那什么都不输出的话编译不通过,那我就输出个null不行吗?不行,输出null的话,在执行过程中是会报错的.为什么?因为他要把输出的数据还要反序列化一下.在我们Flink中,流的处理,尤其在后面写到Sink里面他要进行序列化的.也就是说,他会造成后面的算子报错的现象.可能你这个map算子不会报错,但是会造成后面的算子报错.因为后面的算子他要反序列化你这个map算子输出的对象.那这个时候因为你为null,那他就会报一个空指针异常的错误.所以说,他做不到.</p><p>​        但是我们当前的底层API即KeyedProcessFunction这个底层API他就可以做到,他可以不输出.因为它里面的方法是没有返回值的.他既然没有返回值,我不输出,我不写代码就可以了.他可以输出1个元素也可以输出0个元素.他是非常灵活的.这就是所谓的底层API.当然,灵活归灵活,只不过代码写的稍微多一点.以前是调一个函数就ok了.现在我们用底层API我们还得写一个类.去继承这个父类.然后重写父类的所有抽象方法.而且我们所有的ProcessFunction都继承自RichFunction接口.RichFunction接口的特点是,有生命周期的管理.你可以知道我们这个subtask,就是我们这算子所对应的subtask在什么时候初始化,什么时候关闭.什么时候初始化的回调方法就是Open()方法.什么时候关闭的回调方法就是close()方法.这就是所谓的声明周期.还可以的到当前运行的上下文环境getRuntimeContext().这个上下文环境以后是要用的.为什么呢?因为我们前面说,我们的底层API可以访问时间,可以访问watermark(水位线),可以注册事件.那么可以通过谁来注册事件呢?就是通过我们运行时的上下环境,就是getRuntimeContext()来进行注册事件.</p><p>​        归纳总结: 我们整个Flink学了三种函数类.普通的函数类.富函数类和底层处理的函数类.那我们是不是可以认为底层处理的函数类可以做前面两种所有能做的事情.除此之外,我们的底层处理的函数还能做额外的一些事情,比如说注册新的事件,访问时间戳等等.或者说底层处理的函数类,就是我们所谓的写代码过程中发现一个业务数据做不到的我们就可以放大招了,使用我们底层处理的函数类来完成我们想要的需求.那如果底层处理的函数类都搞定不了的话,那就是我们技术选型有问题了.我们就不该选用Flink了.</p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220214155410.png"></p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220214155648.png"></p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220214160025.png"></p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220214160123.png"></p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220214160218.png"></p><h1 id="时间服务-TimerService-和-定时器（Timers）"><a href="#时间服务-TimerService-和-定时器（Timers）" class="headerlink" title="时间服务 (TimerService )和 定时器（Timers）"></a>时间服务 (TimerService )和 定时器（Timers）</h1><p>Context和OnTimerContext所持有的TimerService对象拥有以下方法:</p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220214160312.png"></p><p>当定时器timer触发时，会执行回调函数onTimer()。注意定时器timer只能在keyed streams上面使用。</p><p>下面举个例子说明KeyedProcessFunction如何操作KeyedStream。</p><p>需求：监控温度传感器的温度值，如果温度值在一秒钟之内(processing time)连续上升，则报警。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">val warnings = readings</span><br><span class="line">.keyBy(_.id)</span><br><span class="line">.process(new TempIncreaseAlertFunction)</span><br></pre></td></tr></table></figure><p>看一下TempIncreaseAlertFunction如何实现, 程序中使用了ValueState这样一个状态变量。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">class TempIncreaseAlertFunction extends KeyedProcessFunction[String, SensorReading, String] &#123;</span><br><span class="line">  // 保存上一个传感器温度值</span><br><span class="line">  lazy val lastTemp: ValueState[Double] = getRuntimeContext.getState(</span><br><span class="line">    new ValueStateDescriptor[Double](&quot;lastTemp&quot;, Types.of[Double])</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">  // 保存注册的定时器的时间戳</span><br><span class="line">  lazy val currentTimer: ValueState[Long] = getRuntimeContext.getState(</span><br><span class="line">    new ValueStateDescriptor[Long](&quot;timer&quot;, Types.of[Long])</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">  override def processElement(r: SensorReading,</span><br><span class="line">                          ctx: KeyedProcessFunction[String, SensorReading, String]#Context,</span><br><span class="line">                          out: Collector[String]): Unit = &#123;</span><br><span class="line">    // 取出上一次的温度</span><br><span class="line">    val prevTemp = lastTemp.value()</span><br><span class="line">    // 将当前温度更新到上一次的温度这个变量中</span><br><span class="line">    lastTemp.update(r.temperature)</span><br><span class="line"></span><br><span class="line">    val curTimerTimestamp = currentTimer.value()</span><br><span class="line">    if (prevTemp == 0.0 || r.temperature &lt; prevTemp) &#123;</span><br><span class="line">      // 温度下降或者是第一个温度值，删除定时器</span><br><span class="line">      ctx.timerService().deleteProcessingTimeTimer(curTimerTimestamp)</span><br><span class="line">      // 清空状态变量</span><br><span class="line">      currentTimer.clear()</span><br><span class="line">    &#125; else if (r.temperature &gt; prevTemp &amp;&amp; curTimerTimestamp == 0) &#123;</span><br><span class="line">      // 温度上升且我们并没有设置定时器</span><br><span class="line">      val timerTs = ctx.timerService().currentProcessingTime() + 1000</span><br><span class="line">      ctx.timerService().registerProcessingTimeTimer(timerTs)</span><br><span class="line"></span><br><span class="line">      currentTimer.update(timerTs)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  override def onTimer(ts: Long,</span><br><span class="line">                    ctx: KeyedProcessFunction[String, SensorReading, String]#OnTimerContext,</span><br><span class="line">                    out: Collector[String]): Unit = &#123;</span><br><span class="line">    out.collect(&quot;传感器id为: &quot; + ctx.getCurrentKey + &quot;的传感器温度值已经连续1s上升了。&quot;)</span><br><span class="line">    currentTimer.clear()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="侧输出流（SideOutput）【注意：测输出流是用来替代Split算子的。Split算子已经过时了。】"><a href="#侧输出流（SideOutput）【注意：测输出流是用来替代Split算子的。Split算子已经过时了。】" class="headerlink" title="侧输出流（SideOutput）【注意：测输出流是用来替代Split算子的。Split算子已经过时了。】"></a>侧输出流（SideOutput）【注意：测输出流是用来替代Split算子的。Split算子已经过时了。】</h1><p>​        侧输出流是用来替代Split算子的,split算子实际上已经过时了.侧输出流的意思就是说,我们把一条流分成多个流.这个侧输出流可以这样子的.就是一条主流两个测流.或者一条主流,三个测流.这就根据你自己的意思来决定.但是有一个特点就是你的类型必须相同.那么,如果你输出侧输出流的话.你必须需要用到我们的底层,也需要用到底层的function才行的.所以这个侧输出流他也是属于我们的ProcessFunction API里面的.就是底层API里面的.<br>​        由于我们可以输出多条测流,那么每一个测流呢,我们可以定义一个OutputTag[X]对象来区分.其中的X就是他每条测流里面的每个元素的类型.所以需要在前面就得定义一个OutputTag[X].有多少个侧输出流,你就需要定义多少个OutputTag[X].实际上你可以理解为就是我当前测流的一个标记.或者我当前测流的一个标签.到时候你去拿我这个测流的时候,你也是根据这个标签去拿.</p><p>​        大部分的DataStream API的算子的输出是单一输出，也就是某种数据类型的流。除了split算子，可以将一条流分成多条流，这些流的数据类型也都相同。process function的side outputs功能可以产生多条流，并且这些流的数据类型可以不一样。一个side output可以定义为OutputTag[X]对象，X是输出流的数据类型。process function可以通过Context对象发射一个事件到一个或者多个side outputs。</p><p>下面是一个示例程序:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">val monitoredReadings: DataStream[SensorReading] = readings</span><br><span class="line">  .process(new FreezingMonitor)</span><br><span class="line"></span><br><span class="line">monitoredReadings</span><br><span class="line">  .getSideOutput(new OutputTag[String](&quot;freezing-alarms&quot;))</span><br><span class="line">  .print()</span><br><span class="line"></span><br><span class="line">readings.print()</span><br></pre></td></tr></table></figure><p>接下来我们实现FreezingMonitor函数，用来监控传感器温度值，将温度值低于32F的温度输出到side output。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">class FreezingMonitor extends ProcessFunction[SensorReading, SensorReading] &#123;</span><br><span class="line">  // 定义一个侧输出标签</span><br><span class="line">  lazy val freezingAlarmOutput: OutputTag[String] =</span><br><span class="line">    new OutputTag[String](&quot;freezing-alarms&quot;)</span><br><span class="line"></span><br><span class="line">  override def processElement(r: SensorReading,</span><br><span class="line">                              ctx: ProcessFunction[SensorReading, SensorReading]#Context,</span><br><span class="line">                              out: Collector[SensorReading]): Unit = &#123;</span><br><span class="line">    // 温度在32F以下时，输出警告信息</span><br><span class="line">    if (r.temperature &lt; 32.0) &#123;</span><br><span class="line">      ctx.output(freezingAlarmOutput, s&quot;Freezing Alarm for $&#123;r.id&#125;&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">    // 所有数据直接常规输出到主流</span><br><span class="line">    out.collect(r)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="CoProcessFunction-这是将两条流汇成一个流的"><a href="#CoProcessFunction-这是将两条流汇成一个流的" class="headerlink" title="CoProcessFunction(这是将两条流汇成一个流的)"></a>CoProcessFunction(这是将两条流汇成一个流的)</h1><p>CoProcessFunction,这个是将两个流汇成一个流的.CoProcessFunction和我们之前讲的两个底层的函数不一样.它里面有两个需要实现的方法.如果你需要把两条流汇成一个流的话.你就要分别处理,所以要<strong>重写CoProcessFunction里面的两个方法:ProcessElement1()和ProcessElement2().那如果我想要将他汇成一个流的话,我只需要在这两个方法中用同样的代码去删除就可以了.</strong></p><p>对于两条输入流，DataStream API提供了CoProcessFunction这样的low-level操作。CoProcessFunction提供了操作每一个输入流的方法: processElement1()和processElement2()。</p><p>类似于ProcessFunction，这两种方法都通过Context对象来调用。这个Context对象可以访问事件数据，定时器时间戳，TimerService，以及side outputs。CoProcessFunction也提供了onTimer()回调函数。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Flink底层API概述&quot;&gt;&lt;a href=&quot;#Flink底层API概述&quot; class=&quot;headerlink&quot; title=&quot;Flink底层API概述&quot;&gt;&lt;/a&gt;Flink底层API概述&lt;/h1&gt;&lt;p&gt;ProcessFunction API是属于Flink三层API中最底层的一层API.最底层的API意味着什么呢?&lt;/p&gt;
&lt;p&gt;​        顾名思义就是我们可以做任何你想要做的任何事情.你可以理解为底层的API我们想要处理一些细腻化的操作,或者要处理一些特殊的业务.我如果使用高级的API ,DataStream API已经搞定不了的情况下.最后呢,我们就可以是用ProcessFunction API. ProcessFunction API是属于我们Flink里面最底层的转换算子.在这个最底层的转换算子中.我们可以有很多的工作可以做.或者有很多的功能可以完成.可以访问时间戳.那我们访问的时间戳是什么时间戳呢?是处理的时间戳.也可以是当前进来的那条数据的时间戳.那么当前进来的时间戳和处理的时间戳我们不是可以使用system.currenttimemillis()吗?但是这个时候我们使用这个是不准确的.&lt;strong&gt;你要想访问准确的时间的话.我们就可以使用底层的API.他就给我们提供了一个方法.我们可以访问watermark,还可以查看当前的水位线.水位线实际上是这样的,就是他每个两百毫秒调用一次.是需要更新这个水位线的.因为水位线有两种.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一种是周期性的水位线.&lt;br&gt;还有一种是间断性的水位线.&lt;/p&gt;
&lt;p&gt;周期性的水位线就是说我每隔多长时间来更新一下或者设置一下这个新的水位线.就是这个意思.那么当前&lt;strong&gt;最新的水位线是多少我们都可以通过在底层API中去拿到&lt;/strong&gt;.甚至我们还可以&lt;strong&gt;注册定时的事件.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;什么叫注册定时的事件呢?&lt;/p&gt;
&lt;p&gt;​    比如说:我们到达某一个条件之后我想触发一个事件.触发一个新的事件.这个事件我规定你在三秒钟之后你给我执行.那么在三秒钟还没到的时候我就有必要把这个事件注册一下.注册之后,从现在开始到三秒钟之后他会自动触发.所以你可以理解为定义,我们定义一个马上过一段时间要触发的一个事件.&lt;/p&gt;
&lt;p&gt;​        还可以输出一个特定的一些事件.比如说超时的一些事件.什么意思呢?比如说我们现在正在处理数据.假设处理数据的时候我们发现可能某一个条件还没成熟.那么没关系,我们可以在几秒钟之后设置一个超时时间.在几秒钟之后我们再进行处理.这就是所谓的超时时间.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;实际上几秒钟之后再处理的话,也是需要注册一个定时事件的&lt;/strong&gt;.因为你要注册一个处理的时间,多长时间之后再进行处理.这些都是原来我们的API所无法做到的.那我们就可以通过ProcessFunction API这个底层的API来进行处理.&lt;/p&gt;</summary>
    
    
    
    <category term="大数据" scheme="http://xubatian.cn/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
    <category term="Flink" scheme="http://xubatian.cn/tags/Flink/"/>
    
  </entry>
  
  <entry>
    <title>Flink 原理与实现: Flink 的时间语义与Wartermark(水位线)机制</title>
    <link href="http://xubatian.cn/Flink-%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E7%8E%B0-Flink-%E7%9A%84%E6%97%B6%E9%97%B4%E8%AF%AD%E4%B9%89%E4%B8%8EWartermark-%E6%B0%B4%E4%BD%8D%E7%BA%BF-%E6%9C%BA%E5%88%B6/"/>
    <id>http://xubatian.cn/Flink-%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E7%8E%B0-Flink-%E7%9A%84%E6%97%B6%E9%97%B4%E8%AF%AD%E4%B9%89%E4%B8%8EWartermark-%E6%B0%B4%E4%BD%8D%E7%BA%BF-%E6%9C%BA%E5%88%B6/</id>
    <published>2022-02-14T07:05:57.000Z</published>
    <updated>2022-02-14T07:33:17.678Z</updated>
    
    <content type="html"><![CDATA[<h1 id="时间语义与Wartermark-水位线-阐述"><a href="#时间语义与Wartermark-水位线-阐述" class="headerlink" title="时间语义与Wartermark(水位线)阐述:"></a>时间语义与Wartermark(水位线)阐述:</h1><p>用到了时间语义和watermark,所以Flink和sparkStreaming是有一定的区别的.</p><p><strong>Flink中的时间语义有三种:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Event Time(事件触发的时间或者是事件创建的时间),</span><br><span class="line"></span><br><span class="line">Ingestion Time(进入Flink的时间),</span><br><span class="line"></span><br><span class="line">Processing Time(Flink在处理这条数据的时间),</span><br></pre></td></tr></table></figure><span id="more"></span>        <p>​        在生产环境中,大多数我们都关心Event Time,我们可能会把Event Time来作为我们开窗的时间参数.就是说我们任何一个开窗都会有一个开窗时间,我们的开窗时间是基于这三个时间的哪一种呢?他是基于Event Time这一种的.但是默认情况下,他的时间语义是基于Processing Time这种的.这是所谓的Flink中的时间语义.所以,如果我们不使用Flink默认的时间语义的话,而是使用Event Time的话,我首先还得想清楚,如何去引入这个Event Time.引入Event Time的两行代码,第一行时先声明,告诉我们的Flink,我不用processing Time,我想要使用Event Time. 如下所示:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">val env = StreamExecutionEnvironment.getExecutionEnvironment</span><br><span class="line">// 从调用时刻开始给env创建的每一个stream追加时间特征</span><br><span class="line">env.setStreamTimeCharacteristic(TimeCharacteristic.EventTime)</span><br></pre></td></tr></table></figure><p>​        第二行代码就是说,到底我们的每一条数据中的哪一个属性,数据中的哪一个小段,数据中的哪一个字段,他是属于Event Time的,或者说,具体的Event Time的值是多少,你得告诉我.所以第二行代码,如上图所示.</p><p>​        但是具体的Event Time的值是多少呢？ <strong>这个时候我还要你考虑一下,是否我们的数据严格按照我的Event Time的顺序进来呢,还是按照我的Event Time无序(乱序)的进来.所以我们必须考虑这两种情况</strong>.我们的开窗函数事实上在以后的业务中很有可能会考虑这两种情况.无<strong>论你是按照Event Time还是按照Processing Time,我们很有可能都需要考虑这两种情况</strong>.第一种情况就是我的数据是严格按照某一个时间语义升序进来的.还有一种情况就是按照某一个时间语义乱序进来的.升序进来的话就比较简单,但是如果是乱序进来的话.就需要考虑一个延迟的问题了.为了保证我们延迟的时候,可以再固定的时间触发.或者说在某一个条件下去触发,那我们就需要引入一个叫watermark(水位线)</p><p>​        <strong>watermark的作用其实只有两个作用: 一个是规定我们延迟之后(因为我们每一个窗口都要做延迟,为何要延迟?因为数据是乱序的)我到底在什么条件下去触发呢?那是由watermark来决定的.第二个作用是,watermark还可以确定,我们在触发的时候有哪些时间的数据已经进到我们的窗口里面来了.这就是watermark的两个具体的作用.</strong> </p><h1 id="Flink中的时间语义"><a href="#Flink中的时间语义" class="headerlink" title="Flink中的时间语义"></a>Flink中的时间语义</h1><p>在Flink的流式处理中，会涉及到时间的不同概念，如下图所示(Flink时间概念)：</p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220214150638.png"></p><p><strong>Event Time</strong>：是事件创建的时间。它通常由事件中的时间戳描述，例如采集的日志数据中，每一条日志都会记录自己的生成时间，Flink通过时间戳分配器访问事件时间戳。</p><p><strong>Ingestion Time</strong>：是数据进入Flink的时间。</p><p><strong>Processing Time</strong>：是每一个执行基于时间操作的算子的本地系统时间，与机器相关，默认的时间属性就是Processing Time。</p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220214151213.png"></p><p>一个例子——电影《星球大战》：</p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220214151321.png"></p><p>例如，一条日志进入Flink的时间为2017-11-12 10:00:00.123，到达Window的系统时间为2017-11-12 10:00:01.234，日志的内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2017-11-02 18:37:15.624 INFO Fail over to rm2</span><br></pre></td></tr></table></figure><p>对于业务来说，要统计1min内的故障日志个数，哪个时间是最有意义的？—— eventTime，因为我们要根据日志的生成时间进行统计。</p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220214151401.png"></p><h1 id="EventTime的引入"><a href="#EventTime的引入" class="headerlink" title="EventTime的引入"></a>EventTime的引入</h1><p>​        在Flink的流式处理中，绝大部分的业务都会使用eventTime，一般只在eventTime无法使用时，才会被迫使用ProcessingTime或者IngestionTime。<br>​        如果要使用EventTime，那么需要引入EventTime的时间属性，引入方式如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">val env = StreamExecutionEnvironment.getExecutionEnvironment</span><br><span class="line">// 从调用时刻开始给env创建的每一个stream追加时间特征</span><br><span class="line">env.setStreamTimeCharacteristic(TimeCharacteristic.EventTime)</span><br><span class="line"></span><br><span class="line">解析:</span><br><span class="line">其实这TimeCharacteristic.EventTime整个是一个常量,里面有三种常量对应着三种时间.</span><br><span class="line">这句话的意思就是说,未来我要采用eventTime作为我真正要计算的时间.但是问题是你的具体的某一条数据中(这里,假设我们定义的sessionRead使我们的某一条具体数据),但是问题是,我这个eventTime在我sessionRead这条数据中,是哪个属性才是eventTime呢?你还没告诉我,所以这一行代码很明显还是不够的,我们肯定还有明确的代码,告诉我们的Flink, 到底具体的时间是哪一个时间.这里只是告诉你,你如果要用,你必须首先申明.</span><br><span class="line">env.setStreamTimeCharacteristic(TimeCharacteristic.EventTime)</span><br><span class="line">这行代码你可以理解为,申明告诉我们的Flink,我未来要使用不是Processing Time而是EventTime.至于EventTime中的哪一个,在后面慢慢详解.</span><br></pre></td></tr></table></figure><h1 id="Watermark"><a href="#Watermark" class="headerlink" title="Watermark"></a>Watermark</h1><p>​        Watermark翻译成中文叫做水位线.他就是用来规定,什么样的数据算是迟到的数据.他就是定义一个标准,低于这个标准了,我们就认为是迟到的数据.这个就是所谓的水位线.这个水位线一般来说就是处理乱序的数据,这里我们得清楚,是基于哪一个时间乱序.在第七章我们探讨的是基于Event Time乱序.因为处理时间是不肯定乱序的.因为我是实时处理,所以我们严格按照时间的顺序来进行处理的.但是我进来的数据,他是有可能根据我们事件产生的时间产生一个乱序的行为.这个乱序我们如何处理呢?这就需要定义一个watermark.不但要定义一个Watermark,还要让这个watermark实时的,或者隔一段时间或者达到什么样的条件.他的水位线要跟着变化.但是一般情况下这个水位线是单调递增还是单调递减呢?还是保持不变呢?</p><p>​        你想一下,数据源源不断的从一个管道里面进来,这个数据总体上我们一般认为他是有序的.他不可能总体上无序,比如说我要处理1999年到2020年的数据,最后发现,1999年的数据最后再来.等我全部处理完成之后再来.那这个总体上就无序了.那如果我要处理1999年到2020年数据,这数据有一点乱序的,什么叫有一点乱序呀?就是1999年的某一天,假设是1月1号的某一天.有可能是10:05分的数据来了,05分的数据来了之后,又来了03分的数据.那发现这个数据就不对了,顺序变了.这种情况不止一处的话,说明总体上还是有序的,细节上还是不对的.</p><p>​        但是我的数据总体上完全乱序的,这个就不在我们的watermark的处理范围之内.</p><p>​        Watermark的具体的机制是:<strong>Watermark可以理解成一个延迟触发机制，我们可以设置Watermark的延时时长t，每次系统会校验已经到达的数据中最大的maxEventTime，然后认定eventTime小于maxEventTime - t的所有数据都已经到达，如果有窗口的停止时间等于maxEventTime – t，那么这个窗口被触发执行。</strong></p><p>​        我们设置watermark的一个延时的时长为T,这个T实际上是我们根据数据的特点来设置的.什么叫数据的特点呢?就是数据是进入窗口是乱序进来的,你这数据乱到什么程度.根据你数据乱到什么程度来确定我的T该设置为多少.比如说:本来按道理说是进来的是9:05分的数据了,可是你还进来的是8:05分的数据.这就很明显延迟了1个小时.那么,既然我的数据延迟了一个小时了,所以我的T也应该是要延迟一个小时.这就是所谓的根据你数据的乱序程度.</p><p>​        但是如果我数据应该进来了9:05分,可是呢.我进来的确是9:00的数据,那只是延迟5秒就可以了.所以这个T就要设置为5秒.实际上T是根据你数据乱序的特点来确定我T设置为多少.当你确定好T之后,我们的系统会校验已经到达的数据中最大的Event Time,然后认定我们的eventTime是否小于maxEventTime - t,如果我们的Evnet Time小于我们的maxEventTime-t,那这就说明我们所有的数据都已经到达.这个时候我们就要开始触发了.触发的时候需要判断我们窗口的停止时间是不是小于等于maxEventTime-t,窗口的停止时间就是窗口的结束时间.</p><p>​        我们窗口的起始时间和结束时间是有一个时间范围的.只要是范围的话我们就要考虑一个问题.就是到底是左闭右开,还是左开右闭,或者左闭右也是闭合的,或者包头不包尾的呢?</p><p>​        其实我们的时间范围就是包头不包尾的.啥意思呢?就是包括了起始时间,不包括结束时间.比如说的起始时间是9:00分到9:05分,那结束时间就是9:05分,比如说我现在有一条数据,他就是属于9:00的,那么请问这条数据是不是属于我当前这个窗口的呢?是的.那如果我这条数据是9:05分的数据呢?那他就不属于我们当前这个窗口的了,因为包头不包尾.他应该是属于下一个窗口的.所以我的窗口的起始时间小于等于maxEventTime-t那么我这个窗口就会被触发.</p><p>​        这样的话就有一个watermark这么一个机制来控制我的延迟触发的问题. </p><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>​        我们知道，流处理从事件产生，到流经source，再到operator，中间是有一个过程和时间的，虽然大部分情况下，流到operator的数据都是按照事件产生的时间顺序来的，但是也不排除由于网络、分布式等原因，导致乱序的产生，所谓乱序，就是指Flink接收到的事件的先后顺序不是严格按照事件的Event Time顺序排列的。</p><h3 id="数据的乱序图-示"><a href="#数据的乱序图-示" class="headerlink" title="数据的乱序图 示:"></a><strong>数据的乱序图 示:</strong></h3><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220214151816.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">那么此时出现一个问题，一旦出现乱序，如果只根据eventTime决定window的运行，我们不能明确数据是否全部到位，但又不能无限期的等下去，此时必须要有个机制来保证一个特定的时间后，必须触发window去进行计算了，这个特别的机制，就是Watermark。</span><br><span class="line">Watermark是一种衡量Event Time进展的机制。</span><br><span class="line">Watermark是用于处理乱序事件的，而正确的处理乱序事件，通常用Watermark机制结合window来实现。</span><br><span class="line">数据流中的Watermark用于表示timestamp小于Watermark的数据，都已经到达了，因此，window的执行也是由Watermark触发的。</span><br><span class="line">Watermark可以理解成一个延迟触发机制，我们可以设置Watermark的延时时长t，每次系统会校验已经到达的数据中最大的maxEventTime，然后认定eventTime小于maxEventTime - t的所有数据都已经到达，如果有窗口的停止时间等于maxEventTime – t，那么这个窗口被触发执行。</span><br></pre></td></tr></table></figure><h3 id="有序流的Watermarker如下图所示："><a href="#有序流的Watermarker如下图所示：" class="headerlink" title="有序流的Watermarker如下图所示："></a>有序流的Watermarker如下图所示：</h3><p><strong>Watermark设置为0</strong></p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220214151946.png"></p><h3 id="乱序流的Watermarker如下图所示："><a href="#乱序流的Watermarker如下图所示：" class="headerlink" title="乱序流的Watermarker如下图所示："></a>乱序流的Watermarker如下图所示：</h3><p><strong>Watermark设置为2</strong></p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220214152129.png"></p><p><img src="https://xubatian.oss-cn-hangzhou.aliyuncs.com/xubatian_blogs_img2/20220214152151.png"></p><p>​        当Flink接收到数据时，会按照一定的规则去生成Watermark，这条Watermark就等于当前所有到达数据中的maxEventTime - 延迟时长，也就是说，Watermark是由数据携带的，一旦数据携带的Watermark比当前未触发的窗口的停止时间要晚，那么就会触发相应窗口的执行。由于Watermark是由数据携带的，因此，如果运行过程中无法获取新的数据，那么没有被触发的窗口将永远都不被触发。</p><p>​        上图中，我们设置的允许最大延迟到达时间为2s，所以时间戳为7s的事件对应的Watermark是5s，时间戳为12s的事件的Watermark是10s，如果我们的窗口1是1s<del>5s，窗口2是6s</del>10s，那么时间戳为7s的事件到达时的Watermarker恰好触发窗口1，时间戳为12s的事件到达时的Watermark恰好触发窗口2。</p><pre><code>     Watermark 就是触发前一窗口的“关窗时间”，一旦触发关门那么以当前时刻为准在窗口范围内的所有所有数据都会收入窗中。</code></pre><p>只要没有达到水位那么不管现实中的时间推进了多久都不会触发关窗。</p><h2 id="Watermark的引入"><a href="#Watermark的引入" class="headerlink" title="Watermark的引入"></a>Watermark的引入</h2><h3 id="水位线有两种-周期性水位线和间断性的水位线"><a href="#水位线有两种-周期性水位线和间断性的水位线" class="headerlink" title="水位线有两种:周期性水位线和间断性的水位线"></a><strong>水位线有两种:周期性水位线和间断性的水位线</strong></h3><p>watermark的引入很简单，对于乱序数据，最常见的引用方式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//上面只说了要引入EventTime,但是没说到底什么时候引入eventTime. 这里就告诉你到底什么时候引入Event</span><br><span class="line">dataStream.assignTimestampsAndWatermarks( new BoundedOutOfOrdernessTimestampExtractor[SensorReading](Time.milliseconds(1000)) &#123;</span><br><span class="line">  override def extractTimestamp(element: SensorReading): Long = &#123;</span><br><span class="line">    element.timestamp * 1000    //EventTime一定要设置毫秒为单位的</span><br><span class="line">  &#125;</span><br><span class="line">&#125; )</span><br></pre></td></tr></table></figure><p>​        Event Time的使用一定要<strong>指定数据源中的时间戳</strong>。否则程序无法知道事件的事件时间是什么(数据源里的数据没有时间戳的话，就只能使用Processing Time了)。</p><p>​        我们看到上面的例子中创建了一个看起来有点复杂的类，这个类实现的其实就是分配时间戳的接口。Flink暴露了TimestampAssigner接口供我们实现，使我们可以自定义如何从事件数据中抽取时间戳。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">val env = StreamExecutionEnvironment.getExecutionEnvironment</span><br><span class="line"></span><br><span class="line">// 从调用时刻开始给env创建的每一个stream追加时间特性</span><br><span class="line">env.setStreamTimeCharacteristic(TimeCharacteristic.EventTime)</span><br><span class="line"></span><br><span class="line">val readings: DataStream[SensorReading] = env</span><br><span class="line">        .addSource(new SensorSource)</span><br><span class="line">        .assignTimestampsAndWatermarks(new MyAssigner())</span><br></pre></td></tr></table></figure><h3 id="MyAssigner有两种类型"><a href="#MyAssigner有两种类型" class="headerlink" title="MyAssigner有两种类型"></a>MyAssigner有两种类型</h3><p>​            AssignerWithPeriodicWatermarks   按照周期来设置分配水位线<br>​            AssignerWithPunctuatedWatermarks  根据间断的特点来分配水位线<br>以上两个接口都继承自TimestampAssigner。</p><h4 id="Assigner-with-periodic-watermarks-根据周期来设置分配水位线"><a href="#Assigner-with-periodic-watermarks-根据周期来设置分配水位线" class="headerlink" title="Assigner with periodic watermarks(根据周期来设置分配水位线)"></a>Assigner with periodic watermarks(根据周期来设置分配水位线)</h4><p>Assigner with periodic watermarks 这是一个接口,一定要自己写一个类去实现这个接口,这是一种复杂的代码写法</p><p>如果你想要通过周期性来生成我的watermark的话,实际上你得告诉我周期的间隔时间.默认情况下,周期的时间是200毫秒.也就是说没隔200毫秒会插入水位线.会在数据流中插入水位线.插入一次一定就是调用一个方法去插入.如果我肯定要写一个类去实现AssignerWithPeriodicWatermarks(根据周期来设置分配水位线)这个接口.</p><p>当然这个200毫秒我也可以自己设置,在ExecutionConfig.setAutoWatermark<br>Interval()这个方法中,我可以指定一个时间.那么这个时间就是由我来设置这个周期性.这叫周期性的水位线.就是隔一段时间我给你水位线加上去,隔一段时间我就给你水位线加上去.</p><p>水位线有两个作用:</p><p>第一个作用是,我可以判断小于等于当前水位线的数据已经来了.</p><p>第二个作用是,我可以用他来判断他在什么时候应该触发我们window的function的执行.</p><p>周期性的生成watermark：系统会周期性的将watermark插入到流中(水位线也是一种特殊的事件!)。默认周期是200毫秒。可以使用ExecutionConfig.setAutoWatermarkInterval()方法进行设置。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">val env = StreamExecutionEnvironment.getExecutionEnvironment</span><br><span class="line">env.setStreamTimeCharacteristic(TimeCharacteristic.EventTime)</span><br><span class="line"></span><br><span class="line">// 每隔5秒产生一个watermark</span><br><span class="line">env.getConfig.setAutoWatermarkInterval(5000)</span><br></pre></td></tr></table></figure><p>​        产生watermark的逻辑：每隔5秒钟，Flink会调用</p><p>AssignerWithPeriodicWatermarks的getCurrentWatermark()方法。如果方法返回一个时间戳大于之前水位的时间戳，新的watermark会被插入到流中。这个检查保证了水位线是单调递增的。如果方法返回的时间戳小于等于之前水位的时间戳，则不会产生新的watermark。</p><p>例子，自定义一个周期性的时间戳抽取：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">class PeriodicAssigner extends AssignerWithPeriodicWatermarks[SensorReading] &#123;</span><br><span class="line">val bound: Long = 60 * 1000 // 延时为1分钟</span><br><span class="line">var maxTs: Long = Long.MinValue // 观察到的最大时间戳</span><br><span class="line">//返回当前的水位线</span><br><span class="line">override def getCurrentWatermark: Watermark = &#123;</span><br><span class="line">new Watermark(maxTs - bound)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">override def extractTimestamp(r: SensorReading, previousTS: Long) = &#123;</span><br><span class="line">maxTs = maxTs.max(r.timestamp)</span><br><span class="line">r.timestamp</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        一种简单的特殊情况是，如果我们事先得知数据流的时间戳是单调递增的，也就是说没有乱序，那我们可以使用assignAscendingTimestamps，这个方法会直接使用数据的时间戳生成watermark。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">val stream: DataStream[SensorReading] = ...</span><br><span class="line">val withTimestampsAndWatermarks = stream</span><br><span class="line">.assignAscendingTimestamps(e =&gt; e.timestamp)</span><br><span class="line"></span><br><span class="line">&gt;&gt; result:  E(1), W(1), E(2), W(2), ...</span><br></pre></td></tr></table></figure><p>​        而对于乱序数据流，如果我们能大致估算出数据流中的事件的最大延迟时间，就可以使用如下代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">val stream: DataStream[SensorReading] = ...</span><br><span class="line">val withTimestampsAndWatermarks = stream.assignTimestampsAndWatermarks(</span><br><span class="line">new SensorTimeAssigner</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">class SensorTimeAssigner extends BoundedOutOfOrdernessTimestampExtractor[SensorReading](Time.seconds(5)) &#123;</span><br><span class="line">// 抽取时间戳</span><br><span class="line">override def extractTimestamp(r: SensorReading): Long = r.timestamp</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt; relust:  E(10), W(0), E(8), E(7), E(11), W(1), ...</span><br></pre></td></tr></table></figure><h4 id="Assigner-with-punctuated-watermarks-间断式的生产水位线"><a href="#Assigner-with-punctuated-watermarks-间断式的生产水位线" class="headerlink" title="Assigner with punctuated watermarks(间断式的生产水位线)"></a>Assigner with punctuated watermarks(间断式的生产水位线)</h4><p>​        什么叫间断式的生产watermark(水位线)呢?本质上来说就是根据你指定的条件,他不是按照时间来的,而是让你来决定.你觉得可以加上一个watermark(水位线)了,那你就加.就是你写代码到达某一个条件了你就加一个水位线.当然你写代码时也可以判断时间.比如说你到达某一个时间,你加一个水位线.当然也可以不以时间为判断.比如说我判断你的键值对.键值对中的某一个键等于某个值的时候,我给你加个水位线.或者你的值等于什么什么的时候.我给你加一个水位线.所以,这叫健壮式的生产watermark(水位线).说白了这个所谓的健壮式的watermark(水位线),就是不以这个时间周期性来生成的.就是由我自己根据业务查询,自己根据条件去设置.</p><p>​        </p><p>​    间断式地生成watermark。和周期性生成的方式不同，这种方式不是固定时间的，而是可以根据需要对每条数据进行筛选和处理。直接上代码来举个例子，我们只给sensor_1的传感器的数据流插入watermark：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">class PunctuatedAssigner extends AssignerWithPunctuatedWatermarks[SensorReading] &#123;</span><br><span class="line">val bound: Long = 60 * 1000</span><br><span class="line"></span><br><span class="line">override def checkAndGetNextWatermark(r: SensorReading, extractedTS: Long): Watermark = &#123;</span><br><span class="line">if (r.id == &quot;sensor_1&quot;) &#123;</span><br><span class="line">new Watermark(extractedTS - bound)</span><br><span class="line">&#125; else &#123;</span><br><span class="line">null</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">override def extractTimestamp(r: SensorReading, previousTS: Long): Long = &#123;</span><br><span class="line">r.timestamp</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="EvnetTime在window中的使用"><a href="#EvnetTime在window中的使用" class="headerlink" title="EvnetTime在window中的使用"></a>EvnetTime在window中的使用</h1><h2 id="滚动窗口（TumblingEventTimeWindows）"><a href="#滚动窗口（TumblingEventTimeWindows）" class="headerlink" title="滚动窗口（TumblingEventTimeWindows）"></a>滚动窗口（TumblingEventTimeWindows）</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">def main(args: Array[String]): Unit = &#123;</span><br><span class="line">    //  环境</span><br><span class="line">    val env: StreamExecutionEnvironment = StreamExecutionEnvironment.getExecutionEnvironment</span><br><span class="line"></span><br><span class="line">    env.setStreamTimeCharacteristic(TimeCharacteristic.EventTime)</span><br><span class="line">    env.setParallelism(1)</span><br><span class="line"></span><br><span class="line">    val dstream: DataStream[String] = env.socketTextStream(&quot;localhost&quot;,7777)</span><br><span class="line"></span><br><span class="line">    val textWithTsDstream: DataStream[(String, Long, Int)] = dstream.map &#123; text =&gt;</span><br><span class="line">      val arr: Array[String] = text.split(&quot; &quot;)</span><br><span class="line">      (arr(0), arr(1).toLong, 1)</span><br><span class="line">    &#125;</span><br><span class="line">    val textWithEventTimeDstream: DataStream[(String, Long, Int)] = textWithTsDstream.assignTimestampsAndWatermarks(new BoundedOutOfOrdernessTimestampExtractor[(String, Long, Int)](Time.milliseconds(1000)) &#123;</span><br><span class="line">      override def extractTimestamp(element: (String, Long, Int)): Long = &#123;</span><br><span class="line"></span><br><span class="line">       return  element._2</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    val textKeyStream: KeyedStream[(String, Long, Int), Tuple] = textWithEventTimeDstream.keyBy(0)</span><br><span class="line">    textKeyStream.print(&quot;textkey:&quot;)</span><br><span class="line"></span><br><span class="line">    val windowStream: WindowedStream[(String, Long, Int), Tuple, TimeWindow] = textKeyStream.window(TumblingEventTimeWindows.of(Time.seconds(2)))</span><br><span class="line"></span><br><span class="line">    val groupDstream: DataStream[mutable.HashSet[Long]] = windowStream.fold(new mutable.HashSet[Long]()) &#123; case (set, (key, ts, count)) =&gt;</span><br><span class="line">      set += ts</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    groupDstream.print(&quot;window::::&quot;).setParallelism(1)</span><br><span class="line"></span><br><span class="line">    env.execute()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果是按照Event Time的时间窗口计算得出的，而无关系统的时间（包括输入的快慢）</p><h2 id="滑动窗口（SlidingEventTimeWindows）"><a href="#滑动窗口（SlidingEventTimeWindows）" class="headerlink" title="滑动窗口（SlidingEventTimeWindows）"></a>滑动窗口（SlidingEventTimeWindows）</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">def main(args: Array[String]): Unit = &#123;</span><br><span class="line">  //  环境</span><br><span class="line">  val env: StreamExecutionEnvironment = StreamExecutionEnvironment.getExecutionEnvironment</span><br><span class="line"></span><br><span class="line">  env.setStreamTimeCharacteristic(TimeCharacteristic.EventTime)</span><br><span class="line">  env.setParallelism(1)</span><br><span class="line"></span><br><span class="line">  val dstream: DataStream[String] = env.socketTextStream(&quot;localhost&quot;,7777)</span><br><span class="line"></span><br><span class="line">  val textWithTsDstream: DataStream[(String, Long, Int)] = dstream.map &#123; text =&gt;</span><br><span class="line">    val arr: Array[String] = text.split(&quot; &quot;)</span><br><span class="line">    (arr(0), arr(1).toLong, 1)</span><br><span class="line">  &#125;</span><br><span class="line">  val textWithEventTimeDstream: DataStream[(String, Long, Int)] = textWithTsDstream.assignTimestampsAndWatermarks(new BoundedOutOfOrdernessTimestampExtractor[(String, Long, Int)](Time.milliseconds(1000)) &#123;</span><br><span class="line">    override def extractTimestamp(element: (String, Long, Int)): Long = &#123;</span><br><span class="line"></span><br><span class="line">     return  element._2</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  val textKeyStream: KeyedStream[(String, Long, Int), Tuple] = textWithEventTimeDstream.keyBy(0)</span><br><span class="line">  textKeyStream.print(&quot;textkey:&quot;)</span><br><span class="line"></span><br><span class="line">  val windowStream: WindowedStream[(String, Long, Int), Tuple, TimeWindow] = textKeyStream.window(SlidingEventTimeWindows.of(Time.seconds(2),Time.milliseconds(500)))</span><br><span class="line"></span><br><span class="line">  val groupDstream: DataStream[mutable.HashSet[Long]] = windowStream.fold(new mutable.HashSet[Long]()) &#123; case (set, (key, ts, count)) =&gt;</span><br><span class="line">    set += ts</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  groupDstream.print(&quot;window::::&quot;).setParallelism(1)</span><br><span class="line"></span><br><span class="line">  env.execute()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="会话窗口（EventTimeSessionWindows）"><a href="#会话窗口（EventTimeSessionWindows）" class="headerlink" title="会话窗口（EventTimeSessionWindows）"></a>会话窗口（EventTimeSessionWindows）</h2><p>​        相邻两次数据的EventTime的时间差超过指定的时间间隔就会触发执行。如果加入Watermark， 会在符合窗口触发的情况下进行延迟。到达延迟水位再进行窗口触发。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">def main(args: Array[String]): Unit = &#123;</span><br><span class="line">    //  环境</span><br><span class="line">    val env: StreamExecutionEnvironment = StreamExecutionEnvironment.getExecutionEnvironment</span><br><span class="line"></span><br><span class="line">    env.setStreamTimeCharacteristic(TimeCharacteristic.EventTime)</span><br><span class="line">    env.setParallelism(1)</span><br><span class="line"></span><br><span class="line">    val dstream: DataStream[String] = env.socketTextStream(&quot;localhost&quot;,7777)</span><br><span class="line"></span><br><span class="line">    val textWithTsDstream: DataStream[(String, Long, Int)] = dstream.map &#123; text =&gt;</span><br><span class="line">      val arr: Array[String] = text.split(&quot; &quot;)</span><br><span class="line">      (arr(0), arr(1).toLong, 1)</span><br><span class="line">    &#125;</span><br><span class="line">    val textWithEventTimeDstream: DataStream[(String, Long, Int)] = textWithTsDstream.assignTimestampsAndWatermarks(new BoundedOutOfOrdernessTimestampExtractor[(String, Long, Int)](Time.milliseconds(1000)) &#123;</span><br><span class="line">      override def extractTimestamp(element: (String, Long, Int)): Long = &#123;</span><br><span class="line"></span><br><span class="line">       return  element._2</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    val textKeyStream: KeyedStream[(String, Long, Int), Tuple] = textWithEventTimeDstream.keyBy(0)</span><br><span class="line">    textKeyStream.print(&quot;textkey:&quot;)</span><br><span class="line"></span><br><span class="line">    val windowStream: WindowedStream[(String, Long, Int), Tuple, TimeWindow] = textKeyStream.window(EventTimeSessionWindows.withGap(Time.milliseconds(500)) )</span><br><span class="line"></span><br><span class="line">    windowStream.reduce((text1,text2)=&gt;</span><br><span class="line">      (  text1._1,0L,text1._3+text2._3)</span><br><span class="line">    )  .map(_._3).print(&quot;windows:::&quot;).setParallelism(1)</span><br><span class="line"></span><br><span class="line">    env.execute()</span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;时间语义与Wartermark-水位线-阐述&quot;&gt;&lt;a href=&quot;#时间语义与Wartermark-水位线-阐述&quot; class=&quot;headerlink&quot; title=&quot;时间语义与Wartermark(水位线)阐述:&quot;&gt;&lt;/a&gt;时间语义与Wartermark(水位线)阐述:&lt;/h1&gt;&lt;p&gt;用到了时间语义和watermark,所以Flink和sparkStreaming是有一定的区别的.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Flink中的时间语义有三种:&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Event Time(事件触发的时间或者是事件创建的时间),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Ingestion Time(进入Flink的时间),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Processing Time(Flink在处理这条数据的时间),&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="大数据" scheme="http://xubatian.cn/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
    <category term="Flink" scheme="http://xubatian.cn/tags/Flink/"/>
    
  </entry>
  
</feed>
